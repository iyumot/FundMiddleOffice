







#region Copyright and License
/*
This file is part of PDFiumSharp, a wrapper around the PDFium library for the .NET framework.
Copyright (C) 2017 Tobias Meyer
License: Microsoft Reciprocal License (MS-RL)
*/
#endregion

// AUTOGENERATED FILE
// DO NOT MODIFY
using System;
using System.Runtime.InteropServices;
using PDFiumSharp.Enums;
using PDFiumSharp.Types;

namespace PDFiumSharp
{
	public static partial class PDFium
	{
		static readonly object _lock = new object();


		#region FPDF_InitLibrary

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDF_InitLibrary")]
			internal static extern void FPDF_InitLibrary_x86();

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDF_InitLibrary")]
			internal static extern void FPDF_InitLibrary_x64();
		}

		/// <include file='PDFium.xml' path='Documentation/FPDF_InitLibrary/*'/>
		public static void FPDF_InitLibrary()
		{

			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { PlatformInvoke.FPDF_InitLibrary_x64(); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { PlatformInvoke.FPDF_InitLibrary_x86(); }
			else
				throw new PlatformNotSupportedException();

		}

		#endregion


		#region FPDF_InitLibraryWithConfig

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDF_InitLibraryWithConfig")]
			internal static extern void FPDF_InitLibraryWithConfig_x86(ref FPDF_LIBRARY_CONFIG config);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDF_InitLibraryWithConfig")]
			internal static extern void FPDF_InitLibraryWithConfig_x64(ref FPDF_LIBRARY_CONFIG config);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDF_InitLibraryWithConfig/*'/>
		public static void FPDF_InitLibraryWithConfig(ref FPDF_LIBRARY_CONFIG config)
		{

			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { PlatformInvoke.FPDF_InitLibraryWithConfig_x64(ref config); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { PlatformInvoke.FPDF_InitLibraryWithConfig_x86(ref config); }
			else
				throw new PlatformNotSupportedException();

		}

		#endregion


		#region FPDF_DestroyLibrary

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDF_DestroyLibrary")]
			internal static extern void FPDF_DestroyLibrary_x86();

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDF_DestroyLibrary")]
			internal static extern void FPDF_DestroyLibrary_x64();
		}

		/// <include file='PDFium.xml' path='Documentation/FPDF_DestroyLibrary/*'/>
		public static void FPDF_DestroyLibrary()
		{

			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { PlatformInvoke.FPDF_DestroyLibrary_x64(); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { PlatformInvoke.FPDF_DestroyLibrary_x86(); }
			else
				throw new PlatformNotSupportedException();

		}

		#endregion


		#region FPDF_SetSandBoxPolicy

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDF_SetSandBoxPolicy")]
			internal static extern void FPDF_SetSandBoxPolicy_x86(int policy, bool enable);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDF_SetSandBoxPolicy")]
			internal static extern void FPDF_SetSandBoxPolicy_x64(int policy, bool enable);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDF_SetSandBoxPolicy/*'/>
		public static void FPDF_SetSandBoxPolicy(int policy, bool enable)
		{

			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { PlatformInvoke.FPDF_SetSandBoxPolicy_x64(policy, enable); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { PlatformInvoke.FPDF_SetSandBoxPolicy_x86(policy, enable); }
			else
				throw new PlatformNotSupportedException();

		}

		#endregion


		#region FPDF_SetPrintMode

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDF_SetPrintMode")]
			internal static extern bool FPDF_SetPrintMode_x86(int mode);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDF_SetPrintMode")]
			internal static extern bool FPDF_SetPrintMode_x64(int mode);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDF_SetPrintMode/*'/>
		public static bool FPDF_SetPrintMode(int mode)
		{

			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { return PlatformInvoke.FPDF_SetPrintMode_x64(mode); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { return PlatformInvoke.FPDF_SetPrintMode_x86(mode); }
			else
				throw new PlatformNotSupportedException();

		}

		#endregion


		#region FPDF_LoadDocument

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDF_LoadDocument")]
			internal static extern FPDF_DOCUMENT FPDF_LoadDocument_x86([MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(Utf8StringMarshaler))] string file_path, [MarshalAs(UnmanagedType.LPStr)] string password);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDF_LoadDocument")]
			internal static extern FPDF_DOCUMENT FPDF_LoadDocument_x64([MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(Utf8StringMarshaler))] string file_path, [MarshalAs(UnmanagedType.LPStr)] string password);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDF_LoadDocument/*'/>
		/// <seealso cref='PdfDocument.PdfDocument(string, string)'/>
		public static FPDF_DOCUMENT FPDF_LoadDocument([MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(Utf8StringMarshaler))] string file_path, [MarshalAs(UnmanagedType.LPStr)] string password)
		{

			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { return PlatformInvoke.FPDF_LoadDocument_x64(file_path, password); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { return PlatformInvoke.FPDF_LoadDocument_x86(file_path, password); }
			else
				throw new PlatformNotSupportedException();

		}

		#endregion


		#region FPDF_LoadMemDocument

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDF_LoadMemDocument")]
			internal static extern FPDF_DOCUMENT FPDF_LoadMemDocument_x86(ref byte data_buf, int size, [MarshalAs(UnmanagedType.LPStr)] string password);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDF_LoadMemDocument")]
			internal static extern FPDF_DOCUMENT FPDF_LoadMemDocument_x64(ref byte data_buf, int size, [MarshalAs(UnmanagedType.LPStr)] string password);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDF_LoadMemDocument/*'/>
		/// <seealso cref='PdfDocument.PdfDocument(byte[], int, int, string)'/>
		private static FPDF_DOCUMENT FPDF_LoadMemDocument(ref byte data_buf, int size, [MarshalAs(UnmanagedType.LPStr)] string password)
		{

			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { return PlatformInvoke.FPDF_LoadMemDocument_x64(ref data_buf, size, password); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { return PlatformInvoke.FPDF_LoadMemDocument_x86(ref data_buf, size, password); }
			else
				throw new PlatformNotSupportedException();

		}

		#endregion


		#region FPDF_LoadMemDocument64

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDF_LoadMemDocument64")]
			internal static extern FPDF_DOCUMENT FPDF_LoadMemDocument64_x86(ref byte data_buf, long size, [MarshalAs(UnmanagedType.LPStr)] string password);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDF_LoadMemDocument64")]
			internal static extern FPDF_DOCUMENT FPDF_LoadMemDocument64_x64(ref byte data_buf, long size, [MarshalAs(UnmanagedType.LPStr)] string password);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDF_LoadMemDocument64/*'/>
		/// <seealso cref='PdfDocument.PdfDocument(byte[], int, int, string)'/>
		private static FPDF_DOCUMENT FPDF_LoadMemDocument64(ref byte data_buf, long size, [MarshalAs(UnmanagedType.LPStr)] string password)
		{

			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { return PlatformInvoke.FPDF_LoadMemDocument64_x64(ref data_buf, size, password); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { return PlatformInvoke.FPDF_LoadMemDocument64_x86(ref data_buf, size, password); }
			else
				throw new PlatformNotSupportedException();

		}

		#endregion


		#region FPDF_LoadCustomDocument

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDF_LoadCustomDocument")]
			internal static extern FPDF_DOCUMENT FPDF_LoadCustomDocument_x86(FPDF_FILEREAD fileRead, [MarshalAs(UnmanagedType.LPStr)] string password);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDF_LoadCustomDocument")]
			internal static extern FPDF_DOCUMENT FPDF_LoadCustomDocument_x64(FPDF_FILEREAD fileRead, [MarshalAs(UnmanagedType.LPStr)] string password);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDF_LoadCustomDocument/*'/>
		/// <seealso cref='PdfDocument.PdfDocument(System.IO.Stream, int, string)'/>
		public static FPDF_DOCUMENT FPDF_LoadCustomDocument(FPDF_FILEREAD fileRead, [MarshalAs(UnmanagedType.LPStr)] string password)
		{

			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { return PlatformInvoke.FPDF_LoadCustomDocument_x64(fileRead, password); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { return PlatformInvoke.FPDF_LoadCustomDocument_x86(fileRead, password); }
			else
				throw new PlatformNotSupportedException();

		}

		#endregion


		#region FPDF_GetFileVersion

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDF_GetFileVersion")]
			internal static extern bool FPDF_GetFileVersion_x86(FPDF_DOCUMENT doc, out int fileVersion);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDF_GetFileVersion")]
			internal static extern bool FPDF_GetFileVersion_x64(FPDF_DOCUMENT doc, out int fileVersion);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDF_GetFileVersion/*'/>
		/// <seealso cref='PdfDocument.FileVersion'/>
		public static bool FPDF_GetFileVersion(FPDF_DOCUMENT doc, out int fileVersion)
		{

			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { return PlatformInvoke.FPDF_GetFileVersion_x64(doc, out fileVersion); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { return PlatformInvoke.FPDF_GetFileVersion_x86(doc, out fileVersion); }
			else
				throw new PlatformNotSupportedException();

		}

		#endregion


		#region FPDF_GetLastError

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDF_GetLastError")]
			internal static extern FPDF_ERR FPDF_GetLastError_x86();

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDF_GetLastError")]
			internal static extern FPDF_ERR FPDF_GetLastError_x64();
		}

		/// <include file='PDFium.xml' path='Documentation/FPDF_GetLastError/*'/>
		public static FPDF_ERR FPDF_GetLastError()
		{

			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { return PlatformInvoke.FPDF_GetLastError_x64(); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { return PlatformInvoke.FPDF_GetLastError_x86(); }
			else
				throw new PlatformNotSupportedException();

		}

		#endregion


		#region FPDF_DocumentHasValidCrossReferenceTable

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDF_DocumentHasValidCrossReferenceTable")]
			internal static extern bool FPDF_DocumentHasValidCrossReferenceTable_x86(FPDF_DOCUMENT document);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDF_DocumentHasValidCrossReferenceTable")]
			internal static extern bool FPDF_DocumentHasValidCrossReferenceTable_x64(FPDF_DOCUMENT document);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDF_DocumentHasValidCrossReferenceTable/*'/>
		public static bool FPDF_DocumentHasValidCrossReferenceTable(FPDF_DOCUMENT document)
		{

			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { return PlatformInvoke.FPDF_DocumentHasValidCrossReferenceTable_x64(document); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { return PlatformInvoke.FPDF_DocumentHasValidCrossReferenceTable_x86(document); }
			else
				throw new PlatformNotSupportedException();

		}

		#endregion


		#region FPDF_GetTrailerEnds

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDF_GetTrailerEnds")]
			internal static extern ulong FPDF_GetTrailerEnds_x86(FPDF_DOCUMENT document, out uint buffer, ulong length);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDF_GetTrailerEnds")]
			internal static extern ulong FPDF_GetTrailerEnds_x64(FPDF_DOCUMENT document, out uint buffer, ulong length);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDF_GetTrailerEnds/*'/>
		public static ulong FPDF_GetTrailerEnds(FPDF_DOCUMENT document, out uint buffer, ulong length)
		{

			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { return PlatformInvoke.FPDF_GetTrailerEnds_x64(document, out buffer, length); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { return PlatformInvoke.FPDF_GetTrailerEnds_x86(document, out buffer, length); }
			else
				throw new PlatformNotSupportedException();

		}

		#endregion


		#region FPDF_GetDocPermissions

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDF_GetDocPermissions")]
			internal static extern DocumentPermissions FPDF_GetDocPermissions_x86(FPDF_DOCUMENT document);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDF_GetDocPermissions")]
			internal static extern DocumentPermissions FPDF_GetDocPermissions_x64(FPDF_DOCUMENT document);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDF_GetDocPermissions/*'/>
		/// <seealso cref='PdfDocument.Permissions'/>
		public static DocumentPermissions FPDF_GetDocPermissions(FPDF_DOCUMENT document)
		{

			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { return PlatformInvoke.FPDF_GetDocPermissions_x64(document); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { return PlatformInvoke.FPDF_GetDocPermissions_x86(document); }
			else
				throw new PlatformNotSupportedException();

		}

		#endregion


		#region FPDF_GetDocUserPermissions

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDF_GetDocUserPermissions")]
			internal static extern DocumentPermissions FPDF_GetDocUserPermissions_x86(FPDF_DOCUMENT document);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDF_GetDocUserPermissions")]
			internal static extern DocumentPermissions FPDF_GetDocUserPermissions_x64(FPDF_DOCUMENT document);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDF_GetDocUserPermissions/*'/>
		public static DocumentPermissions FPDF_GetDocUserPermissions(FPDF_DOCUMENT document)
		{

			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { return PlatformInvoke.FPDF_GetDocUserPermissions_x64(document); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { return PlatformInvoke.FPDF_GetDocUserPermissions_x86(document); }
			else
				throw new PlatformNotSupportedException();

		}

		#endregion


		#region FPDF_GetSecurityHandlerRevision

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDF_GetSecurityHandlerRevision")]
			internal static extern int FPDF_GetSecurityHandlerRevision_x86(FPDF_DOCUMENT document);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDF_GetSecurityHandlerRevision")]
			internal static extern int FPDF_GetSecurityHandlerRevision_x64(FPDF_DOCUMENT document);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDF_GetSecurityHandlerRevision/*'/>
		/// <seealso cref='PdfDocument.SecurityHandlerRevision'/>
		public static int FPDF_GetSecurityHandlerRevision(FPDF_DOCUMENT document)
		{

			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { return PlatformInvoke.FPDF_GetSecurityHandlerRevision_x64(document); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { return PlatformInvoke.FPDF_GetSecurityHandlerRevision_x86(document); }
			else
				throw new PlatformNotSupportedException();

		}

		#endregion


		#region FPDF_GetPageCount

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDF_GetPageCount")]
			internal static extern int FPDF_GetPageCount_x86(FPDF_DOCUMENT document);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDF_GetPageCount")]
			internal static extern int FPDF_GetPageCount_x64(FPDF_DOCUMENT document);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDF_GetPageCount/*'/>
		/// <seealso cref='PdfPageCollection.Count'/>
		/// <seealso cref='PdfDocument.Pages'/>
		public static int FPDF_GetPageCount(FPDF_DOCUMENT document)
		{

			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { return PlatformInvoke.FPDF_GetPageCount_x64(document); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { return PlatformInvoke.FPDF_GetPageCount_x86(document); }
			else
				throw new PlatformNotSupportedException();

		}

		#endregion


		#region FPDF_LoadPage

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDF_LoadPage")]
			internal static extern FPDF_PAGE FPDF_LoadPage_x86(FPDF_DOCUMENT document, int page_index);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDF_LoadPage")]
			internal static extern FPDF_PAGE FPDF_LoadPage_x64(FPDF_DOCUMENT document, int page_index);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDF_LoadPage/*'/>
		/// <seealso cref='T:PdfPageCollection[int]'/>
		/// <seealso cref='PdfDocument.Pages'/>
		public static FPDF_PAGE FPDF_LoadPage(FPDF_DOCUMENT document, int page_index)
		{

			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { return PlatformInvoke.FPDF_LoadPage_x64(document, page_index); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { return PlatformInvoke.FPDF_LoadPage_x86(document, page_index); }
			else
				throw new PlatformNotSupportedException();

		}

		#endregion


		#region FPDF_GetPageWidthF

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDF_GetPageWidthF")]
			internal static extern float FPDF_GetPageWidthF_x86(FPDF_PAGE page);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDF_GetPageWidthF")]
			internal static extern float FPDF_GetPageWidthF_x64(FPDF_PAGE page);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDF_GetPageWidthF/*'/>
		public static float FPDF_GetPageWidthF(FPDF_PAGE page)
		{

			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { return PlatformInvoke.FPDF_GetPageWidthF_x64(page); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { return PlatformInvoke.FPDF_GetPageWidthF_x86(page); }
			else
				throw new PlatformNotSupportedException();

		}

		#endregion


		#region FPDF_GetPageWidth

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDF_GetPageWidth")]
			internal static extern double FPDF_GetPageWidth_x86(FPDF_PAGE page);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDF_GetPageWidth")]
			internal static extern double FPDF_GetPageWidth_x64(FPDF_PAGE page);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDF_GetPageWidth/*'/>
		/// <seealso cref='PdfPage.Width'/>
		public static double FPDF_GetPageWidth(FPDF_PAGE page)
		{

			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { return PlatformInvoke.FPDF_GetPageWidth_x64(page); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { return PlatformInvoke.FPDF_GetPageWidth_x86(page); }
			else
				throw new PlatformNotSupportedException();

		}

		#endregion


		#region FPDF_GetPageHeightF

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDF_GetPageHeightF")]
			internal static extern float FPDF_GetPageHeightF_x86(FPDF_PAGE page);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDF_GetPageHeightF")]
			internal static extern float FPDF_GetPageHeightF_x64(FPDF_PAGE page);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDF_GetPageHeightF/*'/>
		public static float FPDF_GetPageHeightF(FPDF_PAGE page)
		{

			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { return PlatformInvoke.FPDF_GetPageHeightF_x64(page); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { return PlatformInvoke.FPDF_GetPageHeightF_x86(page); }
			else
				throw new PlatformNotSupportedException();

		}

		#endregion


		#region FPDF_GetPageHeight

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDF_GetPageHeight")]
			internal static extern double FPDF_GetPageHeight_x86(FPDF_PAGE page);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDF_GetPageHeight")]
			internal static extern double FPDF_GetPageHeight_x64(FPDF_PAGE page);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDF_GetPageHeight/*'/>
		/// <seealso cref='PdfPage.Height'/>
		public static double FPDF_GetPageHeight(FPDF_PAGE page)
		{

			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { return PlatformInvoke.FPDF_GetPageHeight_x64(page); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { return PlatformInvoke.FPDF_GetPageHeight_x86(page); }
			else
				throw new PlatformNotSupportedException();

		}

		#endregion


		#region FPDF_GetPageBoundingBox

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDF_GetPageBoundingBox")]
			internal static extern bool FPDF_GetPageBoundingBox_x86(FPDF_PAGE page, FS_RECTF rect);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDF_GetPageBoundingBox")]
			internal static extern bool FPDF_GetPageBoundingBox_x64(FPDF_PAGE page, FS_RECTF rect);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDF_GetPageBoundingBox/*'/>
		public static bool FPDF_GetPageBoundingBox(FPDF_PAGE page, FS_RECTF rect)
		{

			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { return PlatformInvoke.FPDF_GetPageBoundingBox_x64(page, rect); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { return PlatformInvoke.FPDF_GetPageBoundingBox_x86(page, rect); }
			else
				throw new PlatformNotSupportedException();

		}

		#endregion


		#region FPDF_GetPageSizeByIndexF

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDF_GetPageSizeByIndexF")]
			internal static extern bool FPDF_GetPageSizeByIndexF_x86(FPDF_DOCUMENT document, int page_index, FS_SIZEF size);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDF_GetPageSizeByIndexF")]
			internal static extern bool FPDF_GetPageSizeByIndexF_x64(FPDF_DOCUMENT document, int page_index, FS_SIZEF size);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDF_GetPageSizeByIndexF/*'/>
		public static bool FPDF_GetPageSizeByIndexF(FPDF_DOCUMENT document, int page_index, FS_SIZEF size)
		{

			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { return PlatformInvoke.FPDF_GetPageSizeByIndexF_x64(document, page_index, size); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { return PlatformInvoke.FPDF_GetPageSizeByIndexF_x86(document, page_index, size); }
			else
				throw new PlatformNotSupportedException();

		}

		#endregion


		#region FPDF_GetPageSizeByIndex

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDF_GetPageSizeByIndex")]
			internal static extern bool FPDF_GetPageSizeByIndex_x86(FPDF_DOCUMENT document, int page_index, out double width, out double height);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDF_GetPageSizeByIndex")]
			internal static extern bool FPDF_GetPageSizeByIndex_x64(FPDF_DOCUMENT document, int page_index, out double width, out double height);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDF_GetPageSizeByIndex/*'/>
		/// <seealso cref='PdfPage.Size'/>
		public static bool FPDF_GetPageSizeByIndex(FPDF_DOCUMENT document, int page_index, out double width, out double height)
		{

			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { return PlatformInvoke.FPDF_GetPageSizeByIndex_x64(document, page_index, out width, out height); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { return PlatformInvoke.FPDF_GetPageSizeByIndex_x86(document, page_index, out width, out height); }
			else
				throw new PlatformNotSupportedException();

		}

		#endregion


		#region FPDF_RenderPage

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDF_RenderPage")]
			internal static extern void FPDF_RenderPage_x86(IntPtr hdc, FPDF_PAGE page, int start_x, int start_y, int size_x, int size_y, PageOrientations rotation, RenderingFlags flags);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDF_RenderPage")]
			internal static extern void FPDF_RenderPage_x64(IntPtr hdc, FPDF_PAGE page, int start_x, int start_y, int size_x, int size_y, PageOrientations rotation, RenderingFlags flags);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDF_RenderPage/*'/>
		/// <seealso cref='PdfPage.Render'/>
		public static void FPDF_RenderPage(IntPtr hdc, FPDF_PAGE page, int start_x, int start_y, int size_x, int size_y, PageOrientations rotation, RenderingFlags flags)
		{

			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { PlatformInvoke.FPDF_RenderPage_x64(hdc, page, start_x, start_y, size_x, size_y, rotation, flags); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { PlatformInvoke.FPDF_RenderPage_x86(hdc, page, start_x, start_y, size_x, size_y, rotation, flags); }
			else
				throw new PlatformNotSupportedException();

		}

		#endregion


		#region FPDF_RenderPageBitmap

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDF_RenderPageBitmap")]
			internal static extern void FPDF_RenderPageBitmap_x86(FPDF_BITMAP bitmap, FPDF_PAGE page, int start_x, int start_y, int size_x, int size_y, PageOrientations rotation, RenderingFlags flags);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDF_RenderPageBitmap")]
			internal static extern void FPDF_RenderPageBitmap_x64(FPDF_BITMAP bitmap, FPDF_PAGE page, int start_x, int start_y, int size_x, int size_y, PageOrientations rotation, RenderingFlags flags);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDF_RenderPageBitmap/*'/>
		/// <seealso cref='PdfPage.Render'/>
		public static void FPDF_RenderPageBitmap(FPDF_BITMAP bitmap, FPDF_PAGE page, int start_x, int start_y, int size_x, int size_y, PageOrientations rotation, RenderingFlags flags)
		{

			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { PlatformInvoke.FPDF_RenderPageBitmap_x64(bitmap, page, start_x, start_y, size_x, size_y, rotation, flags); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { PlatformInvoke.FPDF_RenderPageBitmap_x86(bitmap, page, start_x, start_y, size_x, size_y, rotation, flags); }
			else
				throw new PlatformNotSupportedException();

		}

		#endregion


		#region FPDF_RenderPageBitmapWithMatrix

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDF_RenderPageBitmapWithMatrix")]
			internal static extern void FPDF_RenderPageBitmapWithMatrix_x86(FPDF_BITMAP bitmap, FPDF_PAGE page, [MarshalAs(UnmanagedType.LPStruct)] FS_MATRIX matrix, [MarshalAs(UnmanagedType.LPStruct)] FS_RECTF clipping, RenderingFlags flags);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDF_RenderPageBitmapWithMatrix")]
			internal static extern void FPDF_RenderPageBitmapWithMatrix_x64(FPDF_BITMAP bitmap, FPDF_PAGE page, [MarshalAs(UnmanagedType.LPStruct)] FS_MATRIX matrix, [MarshalAs(UnmanagedType.LPStruct)] FS_RECTF clipping, RenderingFlags flags);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDF_RenderPageBitmapWithMatrix/*'/>
		public static void FPDF_RenderPageBitmapWithMatrix(FPDF_BITMAP bitmap, FPDF_PAGE page, [MarshalAs(UnmanagedType.LPStruct)] FS_MATRIX matrix, [MarshalAs(UnmanagedType.LPStruct)] FS_RECTF clipping, RenderingFlags flags)
		{

			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { PlatformInvoke.FPDF_RenderPageBitmapWithMatrix_x64(bitmap, page, matrix, clipping, flags); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { PlatformInvoke.FPDF_RenderPageBitmapWithMatrix_x86(bitmap, page, matrix, clipping, flags); }
			else
				throw new PlatformNotSupportedException();

		}

		#endregion


		#region FPDF_RenderPageSkp

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDF_RenderPageSkp")]
			internal static extern FPDF_RECORDER FPDF_RenderPageSkp_x86(FPDF_PAGE page, int size_x, int size_y);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDF_RenderPageSkp")]
			internal static extern FPDF_RECORDER FPDF_RenderPageSkp_x64(FPDF_PAGE page, int size_x, int size_y);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDF_RenderPageSkp/*'/>
		public static FPDF_RECORDER FPDF_RenderPageSkp(FPDF_PAGE page, int size_x, int size_y)
		{

			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { return PlatformInvoke.FPDF_RenderPageSkp_x64(page, size_x, size_y); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { return PlatformInvoke.FPDF_RenderPageSkp_x86(page, size_x, size_y); }
			else
				throw new PlatformNotSupportedException();

		}

		#endregion


		#region FPDF_ClosePage

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDF_ClosePage")]
			internal static extern void FPDF_ClosePage_x86(FPDF_PAGE page);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDF_ClosePage")]
			internal static extern void FPDF_ClosePage_x64(FPDF_PAGE page);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDF_ClosePage/*'/>
		/// <seealso cref='PdfDocument.Close'/>
		public static void FPDF_ClosePage(FPDF_PAGE page)
		{

			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { PlatformInvoke.FPDF_ClosePage_x64(page); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { PlatformInvoke.FPDF_ClosePage_x86(page); }
			else
				throw new PlatformNotSupportedException();

		}

		#endregion


		#region FPDF_CloseDocument

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDF_CloseDocument")]
			internal static extern void FPDF_CloseDocument_x86(FPDF_DOCUMENT document);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDF_CloseDocument")]
			internal static extern void FPDF_CloseDocument_x64(FPDF_DOCUMENT document);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDF_CloseDocument/*'/>
		/// <seealso cref='PdfDocument.Close'/>
		public static void FPDF_CloseDocument(FPDF_DOCUMENT document)
		{

			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { PlatformInvoke.FPDF_CloseDocument_x64(document); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { PlatformInvoke.FPDF_CloseDocument_x86(document); }
			else
				throw new PlatformNotSupportedException();

		}

		#endregion


		#region FPDF_DeviceToPage

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDF_DeviceToPage")]
			internal static extern bool FPDF_DeviceToPage_x86(FPDF_PAGE page, int start_x, int start_y, int size_x, int size_y, PageOrientations rotate, int device_x, int device_y, out double page_x, out double page_y);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDF_DeviceToPage")]
			internal static extern bool FPDF_DeviceToPage_x64(FPDF_PAGE page, int start_x, int start_y, int size_x, int size_y, PageOrientations rotate, int device_x, int device_y, out double page_x, out double page_y);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDF_DeviceToPage/*'/>
		/// <seealso cref='T:PdfPage.DeviceToPage((int left, int top, int width, int height), int, int, PageOrientations)'/>
		public static bool FPDF_DeviceToPage(FPDF_PAGE page, int start_x, int start_y, int size_x, int size_y, PageOrientations rotate, int device_x, int device_y, out double page_x, out double page_y)
		{

			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { return PlatformInvoke.FPDF_DeviceToPage_x64(page, start_x, start_y, size_x, size_y, rotate, device_x, device_y, out page_x, out page_y); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { return PlatformInvoke.FPDF_DeviceToPage_x86(page, start_x, start_y, size_x, size_y, rotate, device_x, device_y, out page_x, out page_y); }
			else
				throw new PlatformNotSupportedException();

		}

		#endregion


		#region FPDF_PageToDevice

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDF_PageToDevice")]
			internal static extern bool FPDF_PageToDevice_x86(FPDF_PAGE page, int start_x, int start_y, int size_x, int size_y, PageOrientations rotate, double page_x, double page_y, out int device_x, out int device_y);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDF_PageToDevice")]
			internal static extern bool FPDF_PageToDevice_x64(FPDF_PAGE page, int start_x, int start_y, int size_x, int size_y, PageOrientations rotate, double page_x, double page_y, out int device_x, out int device_y);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDF_PageToDevice/*'/>
		/// <seealso cref='T:PdfPage.PageToDevice((int left, int top, int width, int height), double, double, PageOrientations)'/>
		public static bool FPDF_PageToDevice(FPDF_PAGE page, int start_x, int start_y, int size_x, int size_y, PageOrientations rotate, double page_x, double page_y, out int device_x, out int device_y)
		{

			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { return PlatformInvoke.FPDF_PageToDevice_x64(page, start_x, start_y, size_x, size_y, rotate, page_x, page_y, out device_x, out device_y); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { return PlatformInvoke.FPDF_PageToDevice_x86(page, start_x, start_y, size_x, size_y, rotate, page_x, page_y, out device_x, out device_y); }
			else
				throw new PlatformNotSupportedException();

		}

		#endregion


		#region FPDFBitmap_Create

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFBitmap_Create")]
			internal static extern FPDF_BITMAP FPDFBitmap_Create_x86(int width, int height, bool hasAlpha);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFBitmap_Create")]
			internal static extern FPDF_BITMAP FPDFBitmap_Create_x64(int width, int height, bool hasAlpha);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDFBitmap_Create/*'/>
		/// <seealso cref='PDFiumBitmap.PDFiumBitmap(int, int, bool)'/>
		public static FPDF_BITMAP FPDFBitmap_Create(int width, int height, bool hasAlpha)
		{

			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { return PlatformInvoke.FPDFBitmap_Create_x64(width, height, hasAlpha); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { return PlatformInvoke.FPDFBitmap_Create_x86(width, height, hasAlpha); }
			else
				throw new PlatformNotSupportedException();

		}

		#endregion


		#region FPDFBitmap_CreateEx

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFBitmap_CreateEx")]
			internal static extern FPDF_BITMAP FPDFBitmap_CreateEx_x86(int width, int height, BitmapFormats format, IntPtr first_scan, int stride);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFBitmap_CreateEx")]
			internal static extern FPDF_BITMAP FPDFBitmap_CreateEx_x64(int width, int height, BitmapFormats format, IntPtr first_scan, int stride);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDFBitmap_CreateEx/*'/>
		/// <seealso cref='PDFiumBitmap.PDFiumBitmap(int, int, BitmapFormats, IntPtr, int)'/>
		public static FPDF_BITMAP FPDFBitmap_CreateEx(int width, int height, BitmapFormats format, IntPtr first_scan, int stride)
		{

			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { return PlatformInvoke.FPDFBitmap_CreateEx_x64(width, height, format, first_scan, stride); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { return PlatformInvoke.FPDFBitmap_CreateEx_x86(width, height, format, first_scan, stride); }
			else
				throw new PlatformNotSupportedException();

		}

		#endregion


		#region FPDFBitmap_GetFormat

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFBitmap_GetFormat")]
			internal static extern BitmapFormats FPDFBitmap_GetFormat_x86(FPDF_BITMAP bitmap);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFBitmap_GetFormat")]
			internal static extern BitmapFormats FPDFBitmap_GetFormat_x64(FPDF_BITMAP bitmap);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDFBitmap_GetFormat/*'/>
		public static BitmapFormats FPDFBitmap_GetFormat(FPDF_BITMAP bitmap)
		{

			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { return PlatformInvoke.FPDFBitmap_GetFormat_x64(bitmap); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { return PlatformInvoke.FPDFBitmap_GetFormat_x86(bitmap); }
			else
				throw new PlatformNotSupportedException();

		}

		#endregion


		#region FPDFBitmap_FillRect

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFBitmap_FillRect")]
			internal static extern void FPDFBitmap_FillRect_x86(FPDF_BITMAP bitmap, int left, int top, int width, int height, FPDF_COLOR color);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFBitmap_FillRect")]
			internal static extern void FPDFBitmap_FillRect_x64(FPDF_BITMAP bitmap, int left, int top, int width, int height, FPDF_COLOR color);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDFBitmap_FillRect/*'/>
		/// <seealso cref='PDFiumBitmap.FillRectangle(int, int, int, int, FPDF_COLOR)'/>
		/// <seealso cref='PDFiumBitmap.Fill(FPDF_COLOR)'/>
		public static void FPDFBitmap_FillRect(FPDF_BITMAP bitmap, int left, int top, int width, int height, FPDF_COLOR color)
		{

			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { PlatformInvoke.FPDFBitmap_FillRect_x64(bitmap, left, top, width, height, color); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { PlatformInvoke.FPDFBitmap_FillRect_x86(bitmap, left, top, width, height, color); }
			else
				throw new PlatformNotSupportedException();

		}

		#endregion


		#region FPDFBitmap_GetBuffer

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFBitmap_GetBuffer")]
			internal static extern IntPtr FPDFBitmap_GetBuffer_x86(FPDF_BITMAP bitmap);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFBitmap_GetBuffer")]
			internal static extern IntPtr FPDFBitmap_GetBuffer_x64(FPDF_BITMAP bitmap);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDFBitmap_GetBuffer/*'/>
		/// <seealso cref='PDFiumBitmap.Scan0'/>
		public static IntPtr FPDFBitmap_GetBuffer(FPDF_BITMAP bitmap)
		{

			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { return PlatformInvoke.FPDFBitmap_GetBuffer_x64(bitmap); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { return PlatformInvoke.FPDFBitmap_GetBuffer_x86(bitmap); }
			else
				throw new PlatformNotSupportedException();

		}

		#endregion


		#region FPDFBitmap_GetWidth

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFBitmap_GetWidth")]
			internal static extern int FPDFBitmap_GetWidth_x86(FPDF_BITMAP bitmap);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFBitmap_GetWidth")]
			internal static extern int FPDFBitmap_GetWidth_x64(FPDF_BITMAP bitmap);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDFBitmap_GetWidth/*'/>
		/// <seealso cref='PDFiumBitmap.Width'/>
		public static int FPDFBitmap_GetWidth(FPDF_BITMAP bitmap)
		{

			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { return PlatformInvoke.FPDFBitmap_GetWidth_x64(bitmap); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { return PlatformInvoke.FPDFBitmap_GetWidth_x86(bitmap); }
			else
				throw new PlatformNotSupportedException();

		}

		#endregion


		#region FPDFBitmap_GetHeight

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFBitmap_GetHeight")]
			internal static extern int FPDFBitmap_GetHeight_x86(FPDF_BITMAP bitmap);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFBitmap_GetHeight")]
			internal static extern int FPDFBitmap_GetHeight_x64(FPDF_BITMAP bitmap);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDFBitmap_GetHeight/*'/>
		/// <seealso cref='PDFiumBitmap.Height'/>
		public static int FPDFBitmap_GetHeight(FPDF_BITMAP bitmap)
		{

			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { return PlatformInvoke.FPDFBitmap_GetHeight_x64(bitmap); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { return PlatformInvoke.FPDFBitmap_GetHeight_x86(bitmap); }
			else
				throw new PlatformNotSupportedException();

		}

		#endregion


		#region FPDFBitmap_GetStride

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFBitmap_GetStride")]
			internal static extern int FPDFBitmap_GetStride_x86(FPDF_BITMAP bitmap);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFBitmap_GetStride")]
			internal static extern int FPDFBitmap_GetStride_x64(FPDF_BITMAP bitmap);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDFBitmap_GetStride/*'/>
		/// <seealso cref='PDFiumBitmap.Stride'/>
		public static int FPDFBitmap_GetStride(FPDF_BITMAP bitmap)
		{

			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { return PlatformInvoke.FPDFBitmap_GetStride_x64(bitmap); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { return PlatformInvoke.FPDFBitmap_GetStride_x86(bitmap); }
			else
				throw new PlatformNotSupportedException();

		}

		#endregion


		#region FPDFBitmap_Destroy

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFBitmap_Destroy")]
			internal static extern void FPDFBitmap_Destroy_x86(FPDF_BITMAP bitmap);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFBitmap_Destroy")]
			internal static extern void FPDFBitmap_Destroy_x64(FPDF_BITMAP bitmap);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDFBitmap_Destroy/*'/>
		/// <seealso cref='PDFiumBitmap.Dispose'/>
		public static void FPDFBitmap_Destroy(FPDF_BITMAP bitmap)
		{

			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { PlatformInvoke.FPDFBitmap_Destroy_x64(bitmap); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { PlatformInvoke.FPDFBitmap_Destroy_x86(bitmap); }
			else
				throw new PlatformNotSupportedException();

		}

		#endregion


		#region FPDF_VIEWERREF_GetPrintScaling

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDF_VIEWERREF_GetPrintScaling")]
			internal static extern bool FPDF_VIEWERREF_GetPrintScaling_x86(FPDF_DOCUMENT document);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDF_VIEWERREF_GetPrintScaling")]
			internal static extern bool FPDF_VIEWERREF_GetPrintScaling_x64(FPDF_DOCUMENT document);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDF_VIEWERREF_GetPrintScaling/*'/>
		/// <seealso cref='PdfDocument.PrintPrefersScaling'/>
		public static bool FPDF_VIEWERREF_GetPrintScaling(FPDF_DOCUMENT document)
		{

			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { return PlatformInvoke.FPDF_VIEWERREF_GetPrintScaling_x64(document); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { return PlatformInvoke.FPDF_VIEWERREF_GetPrintScaling_x86(document); }
			else
				throw new PlatformNotSupportedException();

		}

		#endregion


		#region FPDF_VIEWERREF_GetNumCopies

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDF_VIEWERREF_GetNumCopies")]
			internal static extern int FPDF_VIEWERREF_GetNumCopies_x86(FPDF_DOCUMENT document);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDF_VIEWERREF_GetNumCopies")]
			internal static extern int FPDF_VIEWERREF_GetNumCopies_x64(FPDF_DOCUMENT document);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDF_VIEWERREF_GetNumCopies/*'/>
		/// <seealso cref='PdfDocument.PrintCopyCount'/>
		public static int FPDF_VIEWERREF_GetNumCopies(FPDF_DOCUMENT document)
		{

			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { return PlatformInvoke.FPDF_VIEWERREF_GetNumCopies_x64(document); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { return PlatformInvoke.FPDF_VIEWERREF_GetNumCopies_x86(document); }
			else
				throw new PlatformNotSupportedException();

		}

		#endregion


		#region FPDF_VIEWERREF_GetPrintPageRange

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDF_VIEWERREF_GetPrintPageRange")]
			internal static extern FPDF_PAGERANGE FPDF_VIEWERREF_GetPrintPageRange_x86(FPDF_DOCUMENT document);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDF_VIEWERREF_GetPrintPageRange")]
			internal static extern FPDF_PAGERANGE FPDF_VIEWERREF_GetPrintPageRange_x64(FPDF_DOCUMENT document);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDF_VIEWERREF_GetPrintPageRange/*'/>
		public static FPDF_PAGERANGE FPDF_VIEWERREF_GetPrintPageRange(FPDF_DOCUMENT document)
		{

			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { return PlatformInvoke.FPDF_VIEWERREF_GetPrintPageRange_x64(document); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { return PlatformInvoke.FPDF_VIEWERREF_GetPrintPageRange_x86(document); }
			else
				throw new PlatformNotSupportedException();

		}

		#endregion


		#region FPDF_VIEWERREF_GetPrintPageRangeCount

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDF_VIEWERREF_GetPrintPageRangeCount")]
			internal static extern uint FPDF_VIEWERREF_GetPrintPageRangeCount_x86(FPDF_PAGERANGE pagerange);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDF_VIEWERREF_GetPrintPageRangeCount")]
			internal static extern uint FPDF_VIEWERREF_GetPrintPageRangeCount_x64(FPDF_PAGERANGE pagerange);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDF_VIEWERREF_GetPrintPageRangeCount/*'/>
		public static uint FPDF_VIEWERREF_GetPrintPageRangeCount(FPDF_PAGERANGE pagerange)
		{

			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { return PlatformInvoke.FPDF_VIEWERREF_GetPrintPageRangeCount_x64(pagerange); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { return PlatformInvoke.FPDF_VIEWERREF_GetPrintPageRangeCount_x86(pagerange); }
			else
				throw new PlatformNotSupportedException();

		}

		#endregion


		#region FPDF_VIEWERREF_GetPrintPageRangeElement

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDF_VIEWERREF_GetPrintPageRangeElement")]
			internal static extern int FPDF_VIEWERREF_GetPrintPageRangeElement_x86(FPDF_PAGERANGE pagerange, uint index);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDF_VIEWERREF_GetPrintPageRangeElement")]
			internal static extern int FPDF_VIEWERREF_GetPrintPageRangeElement_x64(FPDF_PAGERANGE pagerange, uint index);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDF_VIEWERREF_GetPrintPageRangeElement/*'/>
		public static int FPDF_VIEWERREF_GetPrintPageRangeElement(FPDF_PAGERANGE pagerange, uint index)
		{

			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { return PlatformInvoke.FPDF_VIEWERREF_GetPrintPageRangeElement_x64(pagerange, index); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { return PlatformInvoke.FPDF_VIEWERREF_GetPrintPageRangeElement_x86(pagerange, index); }
			else
				throw new PlatformNotSupportedException();

		}

		#endregion


		#region FPDF_VIEWERREF_GetDuplex

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDF_VIEWERREF_GetDuplex")]
			internal static extern DuplexTypes FPDF_VIEWERREF_GetDuplex_x86(FPDF_DOCUMENT document);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDF_VIEWERREF_GetDuplex")]
			internal static extern DuplexTypes FPDF_VIEWERREF_GetDuplex_x64(FPDF_DOCUMENT document);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDF_VIEWERREF_GetDuplex/*'/>
		/// <seealso cref='PdfDocument.DuplexType'/>
		public static DuplexTypes FPDF_VIEWERREF_GetDuplex(FPDF_DOCUMENT document)
		{

			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { return PlatformInvoke.FPDF_VIEWERREF_GetDuplex_x64(document); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { return PlatformInvoke.FPDF_VIEWERREF_GetDuplex_x86(document); }
			else
				throw new PlatformNotSupportedException();

		}

		#endregion


		#region FPDF_VIEWERREF_GetName

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDF_VIEWERREF_GetName")]
			internal static extern ulong FPDF_VIEWERREF_GetName_x86(FPDF_DOCUMENT document, [MarshalAs(UnmanagedType.LPStr)] string key, ref byte buffer, ulong length);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDF_VIEWERREF_GetName")]
			internal static extern ulong FPDF_VIEWERREF_GetName_x64(FPDF_DOCUMENT document, [MarshalAs(UnmanagedType.LPStr)] string key, ref byte buffer, ulong length);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDF_VIEWERREF_GetName/*'/>
		public static ulong FPDF_VIEWERREF_GetName(FPDF_DOCUMENT document, [MarshalAs(UnmanagedType.LPStr)] string key, ref byte buffer, ulong length)
		{

			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { return PlatformInvoke.FPDF_VIEWERREF_GetName_x64(document, key, ref buffer, length); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { return PlatformInvoke.FPDF_VIEWERREF_GetName_x86(document, key, ref buffer, length); }
			else
				throw new PlatformNotSupportedException();

		}

		#endregion


		#region FPDF_CountNamedDests

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDF_CountNamedDests")]
			internal static extern int FPDF_CountNamedDests_x86(FPDF_DOCUMENT document);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDF_CountNamedDests")]
			internal static extern int FPDF_CountNamedDests_x64(FPDF_DOCUMENT document);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDF_CountNamedDests/*'/>
		/// <seealso cref='PdfDestinationCollection.Count'/>
		/// <seealso cref='PdfDocument.Destinations'/>
		public static int FPDF_CountNamedDests(FPDF_DOCUMENT document)
		{

			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { return PlatformInvoke.FPDF_CountNamedDests_x64(document); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { return PlatformInvoke.FPDF_CountNamedDests_x86(document); }
			else
				throw new PlatformNotSupportedException();

		}

		#endregion


		#region FPDF_GetNamedDestByName

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDF_GetNamedDestByName")]
			internal static extern FPDF_DEST FPDF_GetNamedDestByName_x86(FPDF_DOCUMENT document, [MarshalAs(UnmanagedType.LPStr)] string name);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDF_GetNamedDestByName")]
			internal static extern FPDF_DEST FPDF_GetNamedDestByName_x64(FPDF_DOCUMENT document, [MarshalAs(UnmanagedType.LPStr)] string name);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDF_GetNamedDestByName/*'/>
		/// <seealso cref='T:PdfDestinationCollection[string]'/>
		/// <seealso cref='PdfDocument.Destinations'/>
		public static FPDF_DEST FPDF_GetNamedDestByName(FPDF_DOCUMENT document, [MarshalAs(UnmanagedType.LPStr)] string name)
		{

			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { return PlatformInvoke.FPDF_GetNamedDestByName_x64(document, name); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { return PlatformInvoke.FPDF_GetNamedDestByName_x86(document, name); }
			else
				throw new PlatformNotSupportedException();

		}

		#endregion


		#region FPDF_GetNamedDest

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDF_GetNamedDest")]
			internal static extern FPDF_DEST FPDF_GetNamedDest_x86(FPDF_DOCUMENT document, int index, IntPtr buffer, out int buflen);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDF_GetNamedDest")]
			internal static extern FPDF_DEST FPDF_GetNamedDest_x64(FPDF_DOCUMENT document, int index, IntPtr buffer, out int buflen);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDF_GetNamedDest/*'/>
		/// <seealso cref='PDFium.FPDF_GetNamedDest(FPDF_DOCUMENT, int)'/>
		private static FPDF_DEST FPDF_GetNamedDest(FPDF_DOCUMENT document, int index, IntPtr buffer, out int buflen)
		{

			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { return PlatformInvoke.FPDF_GetNamedDest_x64(document, index, buffer, out buflen); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { return PlatformInvoke.FPDF_GetNamedDest_x86(document, index, buffer, out buflen); }
			else
				throw new PlatformNotSupportedException();

		}

		#endregion


		#region FPDF_GetNamedDest

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDF_GetNamedDest")]
			internal static extern FPDF_DEST FPDF_GetNamedDest_x86(FPDF_DOCUMENT document, int index, ref byte buffer, ref int buflen);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDF_GetNamedDest")]
			internal static extern FPDF_DEST FPDF_GetNamedDest_x64(FPDF_DOCUMENT document, int index, ref byte buffer, ref int buflen);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDF_GetNamedDest/*'/>
		/// <seealso cref='PDFium.FPDF_GetNamedDest(FPDF_DOCUMENT, int)'/>
		private static FPDF_DEST FPDF_GetNamedDest(FPDF_DOCUMENT document, int index, ref byte buffer, ref int buflen)
		{

			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { return PlatformInvoke.FPDF_GetNamedDest_x64(document, index, ref buffer, ref buflen); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { return PlatformInvoke.FPDF_GetNamedDest_x86(document, index, ref buffer, ref buflen); }
			else
				throw new PlatformNotSupportedException();

		}

		#endregion


		#region FPDF_GetXFAPacketCount

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDF_GetXFAPacketCount")]
			internal static extern int FPDF_GetXFAPacketCount_x86(FPDF_DOCUMENT document);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDF_GetXFAPacketCount")]
			internal static extern int FPDF_GetXFAPacketCount_x64(FPDF_DOCUMENT document);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDF_GetXFAPacketCount/*'/>
		public static int FPDF_GetXFAPacketCount(FPDF_DOCUMENT document)
		{

			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { return PlatformInvoke.FPDF_GetXFAPacketCount_x64(document); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { return PlatformInvoke.FPDF_GetXFAPacketCount_x86(document); }
			else
				throw new PlatformNotSupportedException();

		}

		#endregion


		#region FPDF_GetXFAPacketName

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDF_GetXFAPacketName")]
			internal static extern ulong FPDF_GetXFAPacketName_x86(FPDF_DOCUMENT document, int index, ref byte buffer, ulong buflen);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDF_GetXFAPacketName")]
			internal static extern ulong FPDF_GetXFAPacketName_x64(FPDF_DOCUMENT document, int index, ref byte buffer, ulong buflen);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDF_GetXFAPacketName/*'/>
		public static ulong FPDF_GetXFAPacketName(FPDF_DOCUMENT document, int index, ref byte buffer, ulong buflen)
		{

			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { return PlatformInvoke.FPDF_GetXFAPacketName_x64(document, index, ref buffer, buflen); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { return PlatformInvoke.FPDF_GetXFAPacketName_x86(document, index, ref buffer, buflen); }
			else
				throw new PlatformNotSupportedException();

		}

		#endregion


		#region FPDF_GetXFAPacketContent

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDF_GetXFAPacketContent")]
			internal static extern bool FPDF_GetXFAPacketContent_x86(FPDF_DOCUMENT document, int index, ref byte buffer, ulong buflen, out ulong out_buflen);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDF_GetXFAPacketContent")]
			internal static extern bool FPDF_GetXFAPacketContent_x64(FPDF_DOCUMENT document, int index, ref byte buffer, ulong buflen, out ulong out_buflen);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDF_GetXFAPacketContent/*'/>
		public static bool FPDF_GetXFAPacketContent(FPDF_DOCUMENT document, int index, ref byte buffer, ulong buflen, out ulong out_buflen)
		{

			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { return PlatformInvoke.FPDF_GetXFAPacketContent_x64(document, index, ref buffer, buflen, out out_buflen); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { return PlatformInvoke.FPDF_GetXFAPacketContent_x86(document, index, ref buffer, buflen, out out_buflen); }
			else
				throw new PlatformNotSupportedException();

		}

		#endregion


		#region FPDF_GetArrayBufferAllocatorSharedInstance

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDF_GetArrayBufferAllocatorSharedInstance")]
			internal static extern IntPtr FPDF_GetArrayBufferAllocatorSharedInstance_x86();

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDF_GetArrayBufferAllocatorSharedInstance")]
			internal static extern IntPtr FPDF_GetArrayBufferAllocatorSharedInstance_x64();
		}

		/// <include file='PDFium.xml' path='Documentation/FPDF_GetArrayBufferAllocatorSharedInstance/*'/>
		public static IntPtr FPDF_GetArrayBufferAllocatorSharedInstance()
		{

			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { return PlatformInvoke.FPDF_GetArrayBufferAllocatorSharedInstance_x64(); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { return PlatformInvoke.FPDF_GetArrayBufferAllocatorSharedInstance_x86(); }
			else
				throw new PlatformNotSupportedException();

		}

		#endregion


		#region FPDF_BStr_Init

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDF_BStr_Init")]
			internal static extern FPDF_RESULT FPDF_BStr_Init_x86(ref FPDF_BSTR bstr);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDF_BStr_Init")]
			internal static extern FPDF_RESULT FPDF_BStr_Init_x64(ref FPDF_BSTR bstr);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDF_BStr_Init/*'/>
		public static FPDF_RESULT FPDF_BStr_Init(ref FPDF_BSTR bstr)
		{

			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { return PlatformInvoke.FPDF_BStr_Init_x64(ref bstr); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { return PlatformInvoke.FPDF_BStr_Init_x86(ref bstr); }
			else
				throw new PlatformNotSupportedException();

		}

		#endregion


		#region FPDF_BStr_Set

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDF_BStr_Set")]
			internal static extern FPDF_RESULT FPDF_BStr_Set_x86(ref FPDF_BSTR bstr, ref char cstr, int length);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDF_BStr_Set")]
			internal static extern FPDF_RESULT FPDF_BStr_Set_x64(ref FPDF_BSTR bstr, ref char cstr, int length);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDF_BStr_Set/*'/>
		public static FPDF_RESULT FPDF_BStr_Set(ref FPDF_BSTR bstr, ref char cstr, int length)
		{

			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { return PlatformInvoke.FPDF_BStr_Set_x64(ref bstr, ref cstr, length); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { return PlatformInvoke.FPDF_BStr_Set_x86(ref bstr, ref cstr, length); }
			else
				throw new PlatformNotSupportedException();

		}

		#endregion


		#region FPDF_BStr_Clear

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDF_BStr_Clear")]
			internal static extern FPDF_RESULT FPDF_BStr_Clear_x86(ref FPDF_BSTR bstr);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDF_BStr_Clear")]
			internal static extern FPDF_RESULT FPDF_BStr_Clear_x64(ref FPDF_BSTR bstr);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDF_BStr_Clear/*'/>
		public static FPDF_RESULT FPDF_BStr_Clear(ref FPDF_BSTR bstr)
		{

			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { return PlatformInvoke.FPDF_BStr_Clear_x64(ref bstr); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { return PlatformInvoke.FPDF_BStr_Clear_x86(ref bstr); }
			else
				throw new PlatformNotSupportedException();

		}

		#endregion


		#region FPDFBookmark_GetFirstChild

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFBookmark_GetFirstChild")]
			internal static extern FPDF_BOOKMARK FPDFBookmark_GetFirstChild_x86(FPDF_DOCUMENT document, FPDF_BOOKMARK bookmark);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFBookmark_GetFirstChild")]
			internal static extern FPDF_BOOKMARK FPDFBookmark_GetFirstChild_x64(FPDF_DOCUMENT document, FPDF_BOOKMARK bookmark);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDFBookmark_GetFirstChild/*'/>
		/// <seealso cref='PdfDocument.Bookmarks'/>
		/// <seealso cref='PdfBookmark.Children'/>
		public static FPDF_BOOKMARK FPDFBookmark_GetFirstChild(FPDF_DOCUMENT document, FPDF_BOOKMARK bookmark)
		{

			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { return PlatformInvoke.FPDFBookmark_GetFirstChild_x64(document, bookmark); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { return PlatformInvoke.FPDFBookmark_GetFirstChild_x86(document, bookmark); }
			else
				throw new PlatformNotSupportedException();

		}

		#endregion


		#region FPDFBookmark_GetNextSibling

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFBookmark_GetNextSibling")]
			internal static extern FPDF_BOOKMARK FPDFBookmark_GetNextSibling_x86(FPDF_DOCUMENT document, FPDF_BOOKMARK bookmark);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFBookmark_GetNextSibling")]
			internal static extern FPDF_BOOKMARK FPDFBookmark_GetNextSibling_x64(FPDF_DOCUMENT document, FPDF_BOOKMARK bookmark);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDFBookmark_GetNextSibling/*'/>
		/// <seealso cref='PdfDocument.Bookmarks'/>
		/// <seealso cref='PdfBookmark.Children'/>
		public static FPDF_BOOKMARK FPDFBookmark_GetNextSibling(FPDF_DOCUMENT document, FPDF_BOOKMARK bookmark)
		{

			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { return PlatformInvoke.FPDFBookmark_GetNextSibling_x64(document, bookmark); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { return PlatformInvoke.FPDFBookmark_GetNextSibling_x86(document, bookmark); }
			else
				throw new PlatformNotSupportedException();

		}

		#endregion


		#region FPDFBookmark_GetTitle

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFBookmark_GetTitle")]
			internal static extern ulong FPDFBookmark_GetTitle_x86(FPDF_BOOKMARK bookmark, ref byte buffer, ulong buflen);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFBookmark_GetTitle")]
			internal static extern ulong FPDFBookmark_GetTitle_x64(FPDF_BOOKMARK bookmark, ref byte buffer, ulong buflen);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDFBookmark_GetTitle/*'/>
		/// <seealso cref='PDFium.FPDFBookmark_GetTitle(FPDF_BOOKMARK)'/>
		private static ulong FPDFBookmark_GetTitle(FPDF_BOOKMARK bookmark, ref byte buffer, ulong buflen)
		{

			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { return PlatformInvoke.FPDFBookmark_GetTitle_x64(bookmark, ref buffer, buflen); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { return PlatformInvoke.FPDFBookmark_GetTitle_x86(bookmark, ref buffer, buflen); }
			else
				throw new PlatformNotSupportedException();

		}

		#endregion


		#region FPDFBookmark_GetCount

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFBookmark_GetCount")]
			internal static extern int FPDFBookmark_GetCount_x86(FPDF_BOOKMARK bookmark);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFBookmark_GetCount")]
			internal static extern int FPDFBookmark_GetCount_x64(FPDF_BOOKMARK bookmark);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDFBookmark_GetCount/*'/>
		public static int FPDFBookmark_GetCount(FPDF_BOOKMARK bookmark)
		{

			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { return PlatformInvoke.FPDFBookmark_GetCount_x64(bookmark); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { return PlatformInvoke.FPDFBookmark_GetCount_x86(bookmark); }
			else
				throw new PlatformNotSupportedException();

		}

		#endregion


		#region FPDFBookmark_Find

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFBookmark_Find")]
			internal static extern FPDF_BOOKMARK FPDFBookmark_Find_x86(FPDF_DOCUMENT document, [MarshalAs(UnmanagedType.LPWStr)] string title);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFBookmark_Find")]
			internal static extern FPDF_BOOKMARK FPDFBookmark_Find_x64(FPDF_DOCUMENT document, [MarshalAs(UnmanagedType.LPWStr)] string title);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDFBookmark_Find/*'/>
		/// <seealso cref='PdfDocument.FindBookmark(string)'/>
		public static FPDF_BOOKMARK FPDFBookmark_Find(FPDF_DOCUMENT document, [MarshalAs(UnmanagedType.LPWStr)] string title)
		{

			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { return PlatformInvoke.FPDFBookmark_Find_x64(document, title); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { return PlatformInvoke.FPDFBookmark_Find_x86(document, title); }
			else
				throw new PlatformNotSupportedException();

		}

		#endregion


		#region FPDFBookmark_GetDest

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFBookmark_GetDest")]
			internal static extern FPDF_DEST FPDFBookmark_GetDest_x86(FPDF_DOCUMENT document, FPDF_BOOKMARK bookmark);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFBookmark_GetDest")]
			internal static extern FPDF_DEST FPDFBookmark_GetDest_x64(FPDF_DOCUMENT document, FPDF_BOOKMARK bookmark);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDFBookmark_GetDest/*'/>
		/// <seealso cref='PdfBookmark.Destination'/>
		public static FPDF_DEST FPDFBookmark_GetDest(FPDF_DOCUMENT document, FPDF_BOOKMARK bookmark)
		{

			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { return PlatformInvoke.FPDFBookmark_GetDest_x64(document, bookmark); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { return PlatformInvoke.FPDFBookmark_GetDest_x86(document, bookmark); }
			else
				throw new PlatformNotSupportedException();

		}

		#endregion


		#region FPDFBookmark_GetAction

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFBookmark_GetAction")]
			internal static extern FPDF_ACTION FPDFBookmark_GetAction_x86(FPDF_BOOKMARK bookmark);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFBookmark_GetAction")]
			internal static extern FPDF_ACTION FPDFBookmark_GetAction_x64(FPDF_BOOKMARK bookmark);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDFBookmark_GetAction/*'/>
		/// <seealso cref='PdfBookmark.Action'/>
		public static FPDF_ACTION FPDFBookmark_GetAction(FPDF_BOOKMARK bookmark)
		{

			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { return PlatformInvoke.FPDFBookmark_GetAction_x64(bookmark); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { return PlatformInvoke.FPDFBookmark_GetAction_x86(bookmark); }
			else
				throw new PlatformNotSupportedException();

		}

		#endregion


		#region FPDFAction_GetType

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFAction_GetType")]
			internal static extern ActionTypes FPDFAction_GetType_x86(FPDF_ACTION action);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFAction_GetType")]
			internal static extern ActionTypes FPDFAction_GetType_x64(FPDF_ACTION action);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDFAction_GetType/*'/>
		/// <seealso cref='PdfAction.Type'/>
		public static ActionTypes FPDFAction_GetType(FPDF_ACTION action)
		{

			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { return PlatformInvoke.FPDFAction_GetType_x64(action); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { return PlatformInvoke.FPDFAction_GetType_x86(action); }
			else
				throw new PlatformNotSupportedException();

		}

		#endregion


		#region FPDFAction_GetDest

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFAction_GetDest")]
			internal static extern FPDF_DEST FPDFAction_GetDest_x86(FPDF_DOCUMENT document, FPDF_ACTION action);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFAction_GetDest")]
			internal static extern FPDF_DEST FPDFAction_GetDest_x64(FPDF_DOCUMENT document, FPDF_ACTION action);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDFAction_GetDest/*'/>
		/// <seealso cref='PdfAction.Destination'/>
		public static FPDF_DEST FPDFAction_GetDest(FPDF_DOCUMENT document, FPDF_ACTION action)
		{

			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { return PlatformInvoke.FPDFAction_GetDest_x64(document, action); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { return PlatformInvoke.FPDFAction_GetDest_x86(document, action); }
			else
				throw new PlatformNotSupportedException();

		}

		#endregion


		#region FPDFAction_GetFilePath

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFAction_GetFilePath")]
			internal static extern uint FPDFAction_GetFilePath_x86(FPDF_ACTION action, ref byte buffer, uint buflen);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFAction_GetFilePath")]
			internal static extern uint FPDFAction_GetFilePath_x64(FPDF_ACTION action, ref byte buffer, uint buflen);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDFAction_GetFilePath/*'/>
		/// <seealso cref='PDFium.FPDFAction_GetFilePath(FPDF_ACTION)'/>
		private static uint FPDFAction_GetFilePath(FPDF_ACTION action, ref byte buffer, uint buflen)
		{

			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { return PlatformInvoke.FPDFAction_GetFilePath_x64(action, ref buffer, buflen); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { return PlatformInvoke.FPDFAction_GetFilePath_x86(action, ref buffer, buflen); }
			else
				throw new PlatformNotSupportedException();

		}

		#endregion


		#region FPDFAction_GetURIPath

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFAction_GetURIPath")]
			internal static extern uint FPDFAction_GetURIPath_x86(FPDF_DOCUMENT document, FPDF_ACTION action, ref byte buffer, uint buflen);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFAction_GetURIPath")]
			internal static extern uint FPDFAction_GetURIPath_x64(FPDF_DOCUMENT document, FPDF_ACTION action, ref byte buffer, uint buflen);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDFAction_GetURIPath/*'/>
		/// <seealso cref='PDFium.FPDFAction_GetURIPath(FPDF_DOCUMENT, FPDF_ACTION)'/>
		private static uint FPDFAction_GetURIPath(FPDF_DOCUMENT document, FPDF_ACTION action, ref byte buffer, uint buflen)
		{

			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { return PlatformInvoke.FPDFAction_GetURIPath_x64(document, action, ref buffer, buflen); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { return PlatformInvoke.FPDFAction_GetURIPath_x86(document, action, ref buffer, buflen); }
			else
				throw new PlatformNotSupportedException();

		}

		#endregion


		#region FPDFDest_GetDestPageIndex

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFDest_GetDestPageIndex")]
			internal static extern int FPDFDest_GetDestPageIndex_x86(FPDF_DOCUMENT document, FPDF_DEST dest);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFDest_GetDestPageIndex")]
			internal static extern int FPDFDest_GetDestPageIndex_x64(FPDF_DOCUMENT document, FPDF_DEST dest);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDFDest_GetDestPageIndex/*'/>
		/// <seealso cref='PdfDestination.PageIndex'/>
		/// <seealso cref='PdfDocument.Destinations'/>
		public static int FPDFDest_GetDestPageIndex(FPDF_DOCUMENT document, FPDF_DEST dest)
		{

			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { return PlatformInvoke.FPDFDest_GetDestPageIndex_x64(document, dest); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { return PlatformInvoke.FPDFDest_GetDestPageIndex_x86(document, dest); }
			else
				throw new PlatformNotSupportedException();

		}

		#endregion


		#region FPDFDest_GetView

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFDest_GetView")]
			internal static extern ZoomModes FPDFDest_GetView_x86(FPDF_DEST dest, out uint pNumParams, float pParams);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFDest_GetView")]
			internal static extern ZoomModes FPDFDest_GetView_x64(FPDF_DEST dest, out uint pNumParams, float pParams);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDFDest_GetView/*'/>
		public static ZoomModes FPDFDest_GetView(FPDF_DEST dest, out uint pNumParams, float pParams)
		{

			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { return PlatformInvoke.FPDFDest_GetView_x64(dest, out pNumParams, pParams); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { return PlatformInvoke.FPDFDest_GetView_x86(dest, out pNumParams, pParams); }
			else
				throw new PlatformNotSupportedException();

		}

		#endregion


		#region FPDFDest_GetLocationInPage

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFDest_GetLocationInPage")]
			internal static extern bool FPDFDest_GetLocationInPage_x86(FPDF_DEST dest, out bool hasXCoord, out bool hasYCoord, out bool hasZoom, out float x, out float y, out float zoom);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFDest_GetLocationInPage")]
			internal static extern bool FPDFDest_GetLocationInPage_x64(FPDF_DEST dest, out bool hasXCoord, out bool hasYCoord, out bool hasZoom, out float x, out float y, out float zoom);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDFDest_GetLocationInPage/*'/>
		/// <seealso cref='PdfDestination.LocationInPage'/>
		/// <seealso cref='PdfDocument.Destinations'/>
		public static bool FPDFDest_GetLocationInPage(FPDF_DEST dest, out bool hasXCoord, out bool hasYCoord, out bool hasZoom, out float x, out float y, out float zoom)
		{

			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { return PlatformInvoke.FPDFDest_GetLocationInPage_x64(dest, out hasXCoord, out hasYCoord, out hasZoom, out x, out y, out zoom); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { return PlatformInvoke.FPDFDest_GetLocationInPage_x86(dest, out hasXCoord, out hasYCoord, out hasZoom, out x, out y, out zoom); }
			else
				throw new PlatformNotSupportedException();

		}

		#endregion


		#region FPDFLink_GetLinkAtPoint

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFLink_GetLinkAtPoint")]
			internal static extern FPDF_LINK FPDFLink_GetLinkAtPoint_x86(FPDF_PAGE page, double x, double y);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFLink_GetLinkAtPoint")]
			internal static extern FPDF_LINK FPDFLink_GetLinkAtPoint_x64(FPDF_PAGE page, double x, double y);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDFLink_GetLinkAtPoint/*'/>
		public static FPDF_LINK FPDFLink_GetLinkAtPoint(FPDF_PAGE page, double x, double y)
		{

			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { return PlatformInvoke.FPDFLink_GetLinkAtPoint_x64(page, x, y); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { return PlatformInvoke.FPDFLink_GetLinkAtPoint_x86(page, x, y); }
			else
				throw new PlatformNotSupportedException();

		}

		#endregion


		#region FPDFLink_GetLinkZOrderAtPoint

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFLink_GetLinkZOrderAtPoint")]
			internal static extern int FPDFLink_GetLinkZOrderAtPoint_x86(FPDF_PAGE page, double x, double y);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFLink_GetLinkZOrderAtPoint")]
			internal static extern int FPDFLink_GetLinkZOrderAtPoint_x64(FPDF_PAGE page, double x, double y);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDFLink_GetLinkZOrderAtPoint/*'/>
		public static int FPDFLink_GetLinkZOrderAtPoint(FPDF_PAGE page, double x, double y)
		{

			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { return PlatformInvoke.FPDFLink_GetLinkZOrderAtPoint_x64(page, x, y); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { return PlatformInvoke.FPDFLink_GetLinkZOrderAtPoint_x86(page, x, y); }
			else
				throw new PlatformNotSupportedException();

		}

		#endregion


		#region FPDFLink_GetDest

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFLink_GetDest")]
			internal static extern FPDF_DEST FPDFLink_GetDest_x86(FPDF_DOCUMENT document, FPDF_LINK link);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFLink_GetDest")]
			internal static extern FPDF_DEST FPDFLink_GetDest_x64(FPDF_DOCUMENT document, FPDF_LINK link);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDFLink_GetDest/*'/>
		public static FPDF_DEST FPDFLink_GetDest(FPDF_DOCUMENT document, FPDF_LINK link)
		{

			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { return PlatformInvoke.FPDFLink_GetDest_x64(document, link); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { return PlatformInvoke.FPDFLink_GetDest_x86(document, link); }
			else
				throw new PlatformNotSupportedException();

		}

		#endregion


		#region FPDFLink_GetAction

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFLink_GetAction")]
			internal static extern FPDF_ACTION FPDFLink_GetAction_x86(FPDF_LINK link);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFLink_GetAction")]
			internal static extern FPDF_ACTION FPDFLink_GetAction_x64(FPDF_LINK link);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDFLink_GetAction/*'/>
		public static FPDF_ACTION FPDFLink_GetAction(FPDF_LINK link)
		{

			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { return PlatformInvoke.FPDFLink_GetAction_x64(link); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { return PlatformInvoke.FPDFLink_GetAction_x86(link); }
			else
				throw new PlatformNotSupportedException();

		}

		#endregion


		#region FPDFLink_Enumerate

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFLink_Enumerate")]
			internal static extern bool FPDFLink_Enumerate_x86(FPDF_PAGE page, ref int startPos, out FPDF_LINK linkAnnot);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFLink_Enumerate")]
			internal static extern bool FPDFLink_Enumerate_x64(FPDF_PAGE page, ref int startPos, out FPDF_LINK linkAnnot);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDFLink_Enumerate/*'/>
		private static bool FPDFLink_Enumerate(FPDF_PAGE page, ref int startPos, out FPDF_LINK linkAnnot)
		{

			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { return PlatformInvoke.FPDFLink_Enumerate_x64(page, ref startPos, out linkAnnot); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { return PlatformInvoke.FPDFLink_Enumerate_x86(page, ref startPos, out linkAnnot); }
			else
				throw new PlatformNotSupportedException();

		}

		#endregion


		#region FPDFLink_GetAnnot

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFLink_GetAnnot")]
			internal static extern FPDF_ANNOTATION FPDFLink_GetAnnot_x86(FPDF_PAGE page, FPDF_LINK linkAnnot);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFLink_GetAnnot")]
			internal static extern FPDF_ANNOTATION FPDFLink_GetAnnot_x64(FPDF_PAGE page, FPDF_LINK linkAnnot);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDFLink_GetAnnot/*'/>
		public static FPDF_ANNOTATION FPDFLink_GetAnnot(FPDF_PAGE page, FPDF_LINK linkAnnot)
		{

			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { return PlatformInvoke.FPDFLink_GetAnnot_x64(page, linkAnnot); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { return PlatformInvoke.FPDFLink_GetAnnot_x86(page, linkAnnot); }
			else
				throw new PlatformNotSupportedException();

		}

		#endregion


		#region FPDFLink_GetAnnotRect

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFLink_GetAnnotRect")]
			internal static extern bool FPDFLink_GetAnnotRect_x86(FPDF_LINK linkAnnot, out FS_RECTF rect);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFLink_GetAnnotRect")]
			internal static extern bool FPDFLink_GetAnnotRect_x64(FPDF_LINK linkAnnot, out FS_RECTF rect);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDFLink_GetAnnotRect/*'/>
		public static bool FPDFLink_GetAnnotRect(FPDF_LINK linkAnnot, out FS_RECTF rect)
		{

			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { return PlatformInvoke.FPDFLink_GetAnnotRect_x64(linkAnnot, out rect); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { return PlatformInvoke.FPDFLink_GetAnnotRect_x86(linkAnnot, out rect); }
			else
				throw new PlatformNotSupportedException();

		}

		#endregion


		#region FPDFLink_CountQuadPoints

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFLink_CountQuadPoints")]
			internal static extern int FPDFLink_CountQuadPoints_x86(FPDF_LINK linkAnnot);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFLink_CountQuadPoints")]
			internal static extern int FPDFLink_CountQuadPoints_x64(FPDF_LINK linkAnnot);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDFLink_CountQuadPoints/*'/>
		public static int FPDFLink_CountQuadPoints(FPDF_LINK linkAnnot)
		{

			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { return PlatformInvoke.FPDFLink_CountQuadPoints_x64(linkAnnot); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { return PlatformInvoke.FPDFLink_CountQuadPoints_x86(linkAnnot); }
			else
				throw new PlatformNotSupportedException();

		}

		#endregion


		#region FPDFLink_GetQuadPoints

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFLink_GetQuadPoints")]
			internal static extern bool FPDFLink_GetQuadPoints_x86(FPDF_LINK linkAnnot, int quadIndex, out FS_QUADPOINTSF quadPoints);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFLink_GetQuadPoints")]
			internal static extern bool FPDFLink_GetQuadPoints_x64(FPDF_LINK linkAnnot, int quadIndex, out FS_QUADPOINTSF quadPoints);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDFLink_GetQuadPoints/*'/>
		public static bool FPDFLink_GetQuadPoints(FPDF_LINK linkAnnot, int quadIndex, out FS_QUADPOINTSF quadPoints)
		{

			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { return PlatformInvoke.FPDFLink_GetQuadPoints_x64(linkAnnot, quadIndex, out quadPoints); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { return PlatformInvoke.FPDFLink_GetQuadPoints_x86(linkAnnot, quadIndex, out quadPoints); }
			else
				throw new PlatformNotSupportedException();

		}

		#endregion


		#region FPDF_GetPageAAction

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDF_GetPageAAction")]
			internal static extern FPDF_ACTION FPDF_GetPageAAction_x86(FPDF_PAGE page, int aa_type);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDF_GetPageAAction")]
			internal static extern FPDF_ACTION FPDF_GetPageAAction_x64(FPDF_PAGE page, int aa_type);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDF_GetPageAAction/*'/>
		public static FPDF_ACTION FPDF_GetPageAAction(FPDF_PAGE page, int aa_type)
		{

			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { return PlatformInvoke.FPDF_GetPageAAction_x64(page, aa_type); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { return PlatformInvoke.FPDF_GetPageAAction_x86(page, aa_type); }
			else
				throw new PlatformNotSupportedException();

		}

		#endregion


		#region FPDF_GetFileIdentifier

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDF_GetFileIdentifier")]
			internal static extern ulong FPDF_GetFileIdentifier_x86(FPDF_DOCUMENT document, FPDF_FILEIDTYPE id_type, ref byte buffer, ulong buflen);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDF_GetFileIdentifier")]
			internal static extern ulong FPDF_GetFileIdentifier_x64(FPDF_DOCUMENT document, FPDF_FILEIDTYPE id_type, ref byte buffer, ulong buflen);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDF_GetFileIdentifier/*'/>
		public static ulong FPDF_GetFileIdentifier(FPDF_DOCUMENT document, FPDF_FILEIDTYPE id_type, ref byte buffer, ulong buflen)
		{

			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { return PlatformInvoke.FPDF_GetFileIdentifier_x64(document, id_type, ref buffer, buflen); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { return PlatformInvoke.FPDF_GetFileIdentifier_x86(document, id_type, ref buffer, buflen); }
			else
				throw new PlatformNotSupportedException();

		}

		#endregion


		#region FPDF_GetMetaText

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDF_GetMetaText")]
			internal static extern uint FPDF_GetMetaText_x86(FPDF_DOCUMENT document, [MarshalAs(UnmanagedType.LPStr)] string tag, ref byte buffer, uint buflen);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDF_GetMetaText")]
			internal static extern uint FPDF_GetMetaText_x64(FPDF_DOCUMENT document, [MarshalAs(UnmanagedType.LPStr)] string tag, ref byte buffer, uint buflen);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDF_GetMetaText/*'/>
		/// <seealso cref='PDFium.FPDF_GetMetaText(FPDF_DOCUMENT, string)'/>
		/// <seealso cref='PDFium.FPDF_GetMetaText(FPDF_DOCUMENT, MetadataTags)'/>
		public static uint FPDF_GetMetaText(FPDF_DOCUMENT document, [MarshalAs(UnmanagedType.LPStr)] string tag, ref byte buffer, uint buflen)
		{

			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { return PlatformInvoke.FPDF_GetMetaText_x64(document, tag, ref buffer, buflen); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { return PlatformInvoke.FPDF_GetMetaText_x86(document, tag, ref buffer, buflen); }
			else
				throw new PlatformNotSupportedException();

		}

		#endregion


		#region FPDF_GetPageLabel

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDF_GetPageLabel")]
			internal static extern uint FPDF_GetPageLabel_x86(FPDF_DOCUMENT document, int page_index, ref byte buffer, uint buflen);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDF_GetPageLabel")]
			internal static extern uint FPDF_GetPageLabel_x64(FPDF_DOCUMENT document, int page_index, ref byte buffer, uint buflen);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDF_GetPageLabel/*'/>
		/// <seealso cref='PDFium.FPDF_GetPageLabel(FPDF_DOCUMENT, int)'/>
		public static uint FPDF_GetPageLabel(FPDF_DOCUMENT document, int page_index, ref byte buffer, uint buflen)
		{

			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { return PlatformInvoke.FPDF_GetPageLabel_x64(document, page_index, ref buffer, buflen); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { return PlatformInvoke.FPDF_GetPageLabel_x86(document, page_index, ref buffer, buflen); }
			else
				throw new PlatformNotSupportedException();

		}

		#endregion


		#region FPDF_CreateNewDocument

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDF_CreateNewDocument")]
			internal static extern FPDF_DOCUMENT FPDF_CreateNewDocument_x86();

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDF_CreateNewDocument")]
			internal static extern FPDF_DOCUMENT FPDF_CreateNewDocument_x64();
		}

		/// <include file='PDFium.xml' path='Documentation/FPDF_CreateNewDocument/*'/>
		/// <seealso cref='PdfDocument.PdfDocument'/>
		public static FPDF_DOCUMENT FPDF_CreateNewDocument()
		{

			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { return PlatformInvoke.FPDF_CreateNewDocument_x64(); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { return PlatformInvoke.FPDF_CreateNewDocument_x86(); }
			else
				throw new PlatformNotSupportedException();

		}

		#endregion


		#region FPDFPage_New

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFPage_New")]
			internal static extern FPDF_PAGE FPDFPage_New_x86(FPDF_DOCUMENT document, int page_index, double width, double height);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFPage_New")]
			internal static extern FPDF_PAGE FPDFPage_New_x64(FPDF_DOCUMENT document, int page_index, double width, double height);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDFPage_New/*'/>
		/// <seealso cref='PdfPageCollection.Add(double, double)'/>
		/// <seealso cref='PdfPageCollection.Insert(int, double, double)'/>
		/// <seealso cref='PdfDocument.Pages'/>
		public static FPDF_PAGE FPDFPage_New(FPDF_DOCUMENT document, int page_index, double width, double height)
		{

			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { return PlatformInvoke.FPDFPage_New_x64(document, page_index, width, height); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { return PlatformInvoke.FPDFPage_New_x86(document, page_index, width, height); }
			else
				throw new PlatformNotSupportedException();

		}

		#endregion


		#region FPDFPage_Delete

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFPage_Delete")]
			internal static extern void FPDFPage_Delete_x86(FPDF_DOCUMENT document, int page_index);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFPage_Delete")]
			internal static extern void FPDFPage_Delete_x64(FPDF_DOCUMENT document, int page_index);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDFPage_Delete/*'/>
		/// <seealso cref='PdfPageCollection.RemoveAt(int)'/>
		/// <seealso cref='PdfDocument.Pages'/>
		public static void FPDFPage_Delete(FPDF_DOCUMENT document, int page_index)
		{

			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { PlatformInvoke.FPDFPage_Delete_x64(document, page_index); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { PlatformInvoke.FPDFPage_Delete_x86(document, page_index); }
			else
				throw new PlatformNotSupportedException();

		}

		#endregion


		#region FPDF_MovePages

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDF_MovePages")]
			internal static extern bool FPDF_MovePages_x86(FPDF_DOCUMENT document, ref int page_indices, ulong page_indices_len, int dest_page_index);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDF_MovePages")]
			internal static extern bool FPDF_MovePages_x64(FPDF_DOCUMENT document, ref int page_indices, ulong page_indices_len, int dest_page_index);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDF_MovePages/*'/>
		public static bool FPDF_MovePages(FPDF_DOCUMENT document, ref int page_indices, ulong page_indices_len, int dest_page_index)
		{

			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { return PlatformInvoke.FPDF_MovePages_x64(document, ref page_indices, page_indices_len, dest_page_index); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { return PlatformInvoke.FPDF_MovePages_x86(document, ref page_indices, page_indices_len, dest_page_index); }
			else
				throw new PlatformNotSupportedException();

		}

		#endregion


		#region FPDFPage_GetRotation

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFPage_GetRotation")]
			internal static extern PageOrientations FPDFPage_GetRotation_x86(FPDF_PAGE page);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFPage_GetRotation")]
			internal static extern PageOrientations FPDFPage_GetRotation_x64(FPDF_PAGE page);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDFPage_GetRotation/*'/>
		/// <seealso cref='PdfPage.Orientation'/>
		public static PageOrientations FPDFPage_GetRotation(FPDF_PAGE page)
		{

			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { return PlatformInvoke.FPDFPage_GetRotation_x64(page); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { return PlatformInvoke.FPDFPage_GetRotation_x86(page); }
			else
				throw new PlatformNotSupportedException();

		}

		#endregion


		#region FPDFPage_SetRotation

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFPage_SetRotation")]
			internal static extern void FPDFPage_SetRotation_x86(FPDF_PAGE page, PageOrientations rotation);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFPage_SetRotation")]
			internal static extern void FPDFPage_SetRotation_x64(FPDF_PAGE page, PageOrientations rotation);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDFPage_SetRotation/*'/>
		/// <seealso cref='PdfPage.Orientation'/>
		public static void FPDFPage_SetRotation(FPDF_PAGE page, PageOrientations rotation)
		{

			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { PlatformInvoke.FPDFPage_SetRotation_x64(page, rotation); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { PlatformInvoke.FPDFPage_SetRotation_x86(page, rotation); }
			else
				throw new PlatformNotSupportedException();

		}

		#endregion


		#region FPDFPage_InsertObject

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFPage_InsertObject")]
			internal static extern void FPDFPage_InsertObject_x86(FPDF_PAGE page, FPDF_PAGEOBJECT page_obj);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFPage_InsertObject")]
			internal static extern void FPDFPage_InsertObject_x64(FPDF_PAGE page, FPDF_PAGEOBJECT page_obj);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDFPage_InsertObject/*'/>
		private static void FPDFPage_InsertObject(FPDF_PAGE page, FPDF_PAGEOBJECT page_obj)
		{

			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { PlatformInvoke.FPDFPage_InsertObject_x64(page, page_obj); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { PlatformInvoke.FPDFPage_InsertObject_x86(page, page_obj); }
			else
				throw new PlatformNotSupportedException();

		}

		#endregion


		#region FPDFPage_RemoveObject

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFPage_RemoveObject")]
			internal static extern bool FPDFPage_RemoveObject_x86(FPDF_PAGE page, FPDF_PAGEOBJECT page_obj);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFPage_RemoveObject")]
			internal static extern bool FPDFPage_RemoveObject_x64(FPDF_PAGE page, FPDF_PAGEOBJECT page_obj);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDFPage_RemoveObject/*'/>
		public static bool FPDFPage_RemoveObject(FPDF_PAGE page, FPDF_PAGEOBJECT page_obj)
		{

			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { return PlatformInvoke.FPDFPage_RemoveObject_x64(page, page_obj); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { return PlatformInvoke.FPDFPage_RemoveObject_x86(page, page_obj); }
			else
				throw new PlatformNotSupportedException();

		}

		#endregion


		#region FPDFPage_CountObjects

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFPage_CountObjects")]
			internal static extern int FPDFPage_CountObjects_x86(FPDF_PAGE page);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFPage_CountObjects")]
			internal static extern int FPDFPage_CountObjects_x64(FPDF_PAGE page);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDFPage_CountObjects/*'/>
		public static int FPDFPage_CountObjects(FPDF_PAGE page)
		{

			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { return PlatformInvoke.FPDFPage_CountObjects_x64(page); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { return PlatformInvoke.FPDFPage_CountObjects_x86(page); }
			else
				throw new PlatformNotSupportedException();

		}

		#endregion


		#region FPDFPage_GetObject

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFPage_GetObject")]
			internal static extern FPDF_PAGEOBJECT FPDFPage_GetObject_x86(FPDF_PAGE page, int index);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFPage_GetObject")]
			internal static extern FPDF_PAGEOBJECT FPDFPage_GetObject_x64(FPDF_PAGE page, int index);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDFPage_GetObject/*'/>
		public static FPDF_PAGEOBJECT FPDFPage_GetObject(FPDF_PAGE page, int index)
		{

			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { return PlatformInvoke.FPDFPage_GetObject_x64(page, index); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { return PlatformInvoke.FPDFPage_GetObject_x86(page, index); }
			else
				throw new PlatformNotSupportedException();

		}

		#endregion


		#region FPDFPage_HasTransparency

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFPage_HasTransparency")]
			internal static extern bool FPDFPage_HasTransparency_x86(FPDF_PAGE page);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFPage_HasTransparency")]
			internal static extern bool FPDFPage_HasTransparency_x64(FPDF_PAGE page);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDFPage_HasTransparency/*'/>
		public static bool FPDFPage_HasTransparency(FPDF_PAGE page)
		{

			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { return PlatformInvoke.FPDFPage_HasTransparency_x64(page); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { return PlatformInvoke.FPDFPage_HasTransparency_x86(page); }
			else
				throw new PlatformNotSupportedException();

		}

		#endregion


		#region FPDFPage_GenerateContent

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFPage_GenerateContent")]
			internal static extern bool FPDFPage_GenerateContent_x86(FPDF_PAGE page);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFPage_GenerateContent")]
			internal static extern bool FPDFPage_GenerateContent_x64(FPDF_PAGE page);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDFPage_GenerateContent/*'/>
		public static bool FPDFPage_GenerateContent(FPDF_PAGE page)
		{

			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { return PlatformInvoke.FPDFPage_GenerateContent_x64(page); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { return PlatformInvoke.FPDFPage_GenerateContent_x86(page); }
			else
				throw new PlatformNotSupportedException();

		}

		#endregion


		#region FPDFPageObj_Destroy

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFPageObj_Destroy")]
			internal static extern void FPDFPageObj_Destroy_x86(FPDF_PAGEOBJECT page_obj);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFPageObj_Destroy")]
			internal static extern void FPDFPageObj_Destroy_x64(FPDF_PAGEOBJECT page_obj);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDFPageObj_Destroy/*'/>
		public static void FPDFPageObj_Destroy(FPDF_PAGEOBJECT page_obj)
		{

			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { PlatformInvoke.FPDFPageObj_Destroy_x64(page_obj); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { PlatformInvoke.FPDFPageObj_Destroy_x86(page_obj); }
			else
				throw new PlatformNotSupportedException();

		}

		#endregion


		#region FPDFPageObj_HasTransparency

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFPageObj_HasTransparency")]
			internal static extern bool FPDFPageObj_HasTransparency_x86(FPDF_PAGEOBJECT pageObject);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFPageObj_HasTransparency")]
			internal static extern bool FPDFPageObj_HasTransparency_x64(FPDF_PAGEOBJECT pageObject);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDFPageObj_HasTransparency/*'/>
		public static bool FPDFPageObj_HasTransparency(FPDF_PAGEOBJECT pageObject)
		{

			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { return PlatformInvoke.FPDFPageObj_HasTransparency_x64(pageObject); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { return PlatformInvoke.FPDFPageObj_HasTransparency_x86(pageObject); }
			else
				throw new PlatformNotSupportedException();

		}

		#endregion


		#region FPDFPageObj_GetType

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFPageObj_GetType")]
			internal static extern PageObjTypes FPDFPageObj_GetType_x86(FPDF_PAGEOBJECT page_object);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFPageObj_GetType")]
			internal static extern PageObjTypes FPDFPageObj_GetType_x64(FPDF_PAGEOBJECT page_object);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDFPageObj_GetType/*'/>
		public static PageObjTypes FPDFPageObj_GetType(FPDF_PAGEOBJECT page_object)
		{

			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { return PlatformInvoke.FPDFPageObj_GetType_x64(page_object); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { return PlatformInvoke.FPDFPageObj_GetType_x86(page_object); }
			else
				throw new PlatformNotSupportedException();

		}

		#endregion


		#region FPDFPageObj_Transform

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFPageObj_Transform")]
			internal static extern void FPDFPageObj_Transform_x86(FPDF_PAGEOBJECT page_object, double a, double b, double c, double d, double e, double f);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFPageObj_Transform")]
			internal static extern void FPDFPageObj_Transform_x64(FPDF_PAGEOBJECT page_object, double a, double b, double c, double d, double e, double f);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDFPageObj_Transform/*'/>
		public static void FPDFPageObj_Transform(FPDF_PAGEOBJECT page_object, double a, double b, double c, double d, double e, double f)
		{

			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { PlatformInvoke.FPDFPageObj_Transform_x64(page_object, a, b, c, d, e, f); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { PlatformInvoke.FPDFPageObj_Transform_x86(page_object, a, b, c, d, e, f); }
			else
				throw new PlatformNotSupportedException();

		}

		#endregion


		#region FPDFPageObj_GetMatrix

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFPageObj_GetMatrix")]
			internal static extern bool FPDFPageObj_GetMatrix_x86(FPDF_PAGEOBJECT page_object, FS_MATRIX matrix);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFPageObj_GetMatrix")]
			internal static extern bool FPDFPageObj_GetMatrix_x64(FPDF_PAGEOBJECT page_object, FS_MATRIX matrix);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDFPageObj_GetMatrix/*'/>
		public static bool FPDFPageObj_GetMatrix(FPDF_PAGEOBJECT page_object, FS_MATRIX matrix)
		{

			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { return PlatformInvoke.FPDFPageObj_GetMatrix_x64(page_object, matrix); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { return PlatformInvoke.FPDFPageObj_GetMatrix_x86(page_object, matrix); }
			else
				throw new PlatformNotSupportedException();

		}

		#endregion


		#region FPDFPageObj_SetMatrix

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFPageObj_SetMatrix")]
			internal static extern bool FPDFPageObj_SetMatrix_x86(FPDF_PAGEOBJECT path, [MarshalAs(UnmanagedType.LPStruct)] FS_MATRIX matrix);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFPageObj_SetMatrix")]
			internal static extern bool FPDFPageObj_SetMatrix_x64(FPDF_PAGEOBJECT path, [MarshalAs(UnmanagedType.LPStruct)] FS_MATRIX matrix);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDFPageObj_SetMatrix/*'/>
		public static bool FPDFPageObj_SetMatrix(FPDF_PAGEOBJECT path, [MarshalAs(UnmanagedType.LPStruct)] FS_MATRIX matrix)
		{

			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { return PlatformInvoke.FPDFPageObj_SetMatrix_x64(path, matrix); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { return PlatformInvoke.FPDFPageObj_SetMatrix_x86(path, matrix); }
			else
				throw new PlatformNotSupportedException();

		}

		#endregion


		#region FPDFPage_TransformAnnots

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFPage_TransformAnnots")]
			internal static extern void FPDFPage_TransformAnnots_x86(FPDF_PAGE page, double a, double b, double c, double d, double e, double f);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFPage_TransformAnnots")]
			internal static extern void FPDFPage_TransformAnnots_x64(FPDF_PAGE page, double a, double b, double c, double d, double e, double f);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDFPage_TransformAnnots/*'/>
		public static void FPDFPage_TransformAnnots(FPDF_PAGE page, double a, double b, double c, double d, double e, double f)
		{

			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { PlatformInvoke.FPDFPage_TransformAnnots_x64(page, a, b, c, d, e, f); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { PlatformInvoke.FPDFPage_TransformAnnots_x86(page, a, b, c, d, e, f); }
			else
				throw new PlatformNotSupportedException();

		}

		#endregion


		#region FPDFPageObj_NewImageObj

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFPageObj_NewImageObj")]
			internal static extern FPDF_PAGEOBJECT FPDFPageObj_NewImageObj_x86(FPDF_DOCUMENT document);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFPageObj_NewImageObj")]
			internal static extern FPDF_PAGEOBJECT FPDFPageObj_NewImageObj_x64(FPDF_DOCUMENT document);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDFPageObj_NewImageObj/*'/>
		public static FPDF_PAGEOBJECT FPDFPageObj_NewImageObj(FPDF_DOCUMENT document)
		{

			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { return PlatformInvoke.FPDFPageObj_NewImageObj_x64(document); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { return PlatformInvoke.FPDFPageObj_NewImageObj_x86(document); }
			else
				throw new PlatformNotSupportedException();

		}

		#endregion


		#region FPDFPageObj_CountMarks

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFPageObj_CountMarks")]
			internal static extern int FPDFPageObj_CountMarks_x86(FPDF_PAGEOBJECT page_object);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFPageObj_CountMarks")]
			internal static extern int FPDFPageObj_CountMarks_x64(FPDF_PAGEOBJECT page_object);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDFPageObj_CountMarks/*'/>
		public static int FPDFPageObj_CountMarks(FPDF_PAGEOBJECT page_object)
		{

			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { return PlatformInvoke.FPDFPageObj_CountMarks_x64(page_object); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { return PlatformInvoke.FPDFPageObj_CountMarks_x86(page_object); }
			else
				throw new PlatformNotSupportedException();

		}

		#endregion


		#region FPDFPageObj_GetMark

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFPageObj_GetMark")]
			internal static extern FPDF_PAGEOBJECTMARK FPDFPageObj_GetMark_x86(FPDF_PAGEOBJECT page_object, ulong index);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFPageObj_GetMark")]
			internal static extern FPDF_PAGEOBJECTMARK FPDFPageObj_GetMark_x64(FPDF_PAGEOBJECT page_object, ulong index);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDFPageObj_GetMark/*'/>
		public static FPDF_PAGEOBJECTMARK FPDFPageObj_GetMark(FPDF_PAGEOBJECT page_object, ulong index)
		{

			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { return PlatformInvoke.FPDFPageObj_GetMark_x64(page_object, index); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { return PlatformInvoke.FPDFPageObj_GetMark_x86(page_object, index); }
			else
				throw new PlatformNotSupportedException();

		}

		#endregion


		#region FPDFPageObj_AddMark

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFPageObj_AddMark")]
			internal static extern FPDF_PAGEOBJECTMARK FPDFPageObj_AddMark_x86(FPDF_PAGEOBJECT page_object, [MarshalAs(UnmanagedType.LPStr)] string name);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFPageObj_AddMark")]
			internal static extern FPDF_PAGEOBJECTMARK FPDFPageObj_AddMark_x64(FPDF_PAGEOBJECT page_object, [MarshalAs(UnmanagedType.LPStr)] string name);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDFPageObj_AddMark/*'/>
		public static FPDF_PAGEOBJECTMARK FPDFPageObj_AddMark(FPDF_PAGEOBJECT page_object, [MarshalAs(UnmanagedType.LPStr)] string name)
		{

			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { return PlatformInvoke.FPDFPageObj_AddMark_x64(page_object, name); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { return PlatformInvoke.FPDFPageObj_AddMark_x86(page_object, name); }
			else
				throw new PlatformNotSupportedException();

		}

		#endregion


		#region FPDFPageObj_RemoveMark

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFPageObj_RemoveMark")]
			internal static extern bool FPDFPageObj_RemoveMark_x86(FPDF_PAGEOBJECT page_object, FPDF_PAGEOBJECTMARK mark);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFPageObj_RemoveMark")]
			internal static extern bool FPDFPageObj_RemoveMark_x64(FPDF_PAGEOBJECT page_object, FPDF_PAGEOBJECTMARK mark);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDFPageObj_RemoveMark/*'/>
		public static bool FPDFPageObj_RemoveMark(FPDF_PAGEOBJECT page_object, FPDF_PAGEOBJECTMARK mark)
		{

			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { return PlatformInvoke.FPDFPageObj_RemoveMark_x64(page_object, mark); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { return PlatformInvoke.FPDFPageObj_RemoveMark_x86(page_object, mark); }
			else
				throw new PlatformNotSupportedException();

		}

		#endregion


		#region FPDFPageObjMark_GetName

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFPageObjMark_GetName")]
			internal static extern bool FPDFPageObjMark_GetName_x86(FPDF_PAGEOBJECTMARK mark, ref byte buffer, ulong buflen, out ulong out_buflen);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFPageObjMark_GetName")]
			internal static extern bool FPDFPageObjMark_GetName_x64(FPDF_PAGEOBJECTMARK mark, ref byte buffer, ulong buflen, out ulong out_buflen);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDFPageObjMark_GetName/*'/>
		public static bool FPDFPageObjMark_GetName(FPDF_PAGEOBJECTMARK mark, ref byte buffer, ulong buflen, out ulong out_buflen)
		{

			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { return PlatformInvoke.FPDFPageObjMark_GetName_x64(mark, ref buffer, buflen, out out_buflen); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { return PlatformInvoke.FPDFPageObjMark_GetName_x86(mark, ref buffer, buflen, out out_buflen); }
			else
				throw new PlatformNotSupportedException();

		}

		#endregion


		#region FPDFPageObjMark_CountParams

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFPageObjMark_CountParams")]
			internal static extern int FPDFPageObjMark_CountParams_x86(FPDF_PAGEOBJECTMARK mark);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFPageObjMark_CountParams")]
			internal static extern int FPDFPageObjMark_CountParams_x64(FPDF_PAGEOBJECTMARK mark);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDFPageObjMark_CountParams/*'/>
		public static int FPDFPageObjMark_CountParams(FPDF_PAGEOBJECTMARK mark)
		{

			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { return PlatformInvoke.FPDFPageObjMark_CountParams_x64(mark); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { return PlatformInvoke.FPDFPageObjMark_CountParams_x86(mark); }
			else
				throw new PlatformNotSupportedException();

		}

		#endregion


		#region FPDFPageObjMark_GetParamKey

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFPageObjMark_GetParamKey")]
			internal static extern bool FPDFPageObjMark_GetParamKey_x86(FPDF_PAGEOBJECTMARK mark, ulong index, ref byte buffer, ulong buflen, out ulong out_buflen);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFPageObjMark_GetParamKey")]
			internal static extern bool FPDFPageObjMark_GetParamKey_x64(FPDF_PAGEOBJECTMARK mark, ulong index, ref byte buffer, ulong buflen, out ulong out_buflen);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDFPageObjMark_GetParamKey/*'/>
		public static bool FPDFPageObjMark_GetParamKey(FPDF_PAGEOBJECTMARK mark, ulong index, ref byte buffer, ulong buflen, out ulong out_buflen)
		{

			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { return PlatformInvoke.FPDFPageObjMark_GetParamKey_x64(mark, index, ref buffer, buflen, out out_buflen); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { return PlatformInvoke.FPDFPageObjMark_GetParamKey_x86(mark, index, ref buffer, buflen, out out_buflen); }
			else
				throw new PlatformNotSupportedException();

		}

		#endregion


		#region FPDFPageObjMark_GetParamValueType

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFPageObjMark_GetParamValueType")]
			internal static extern ObjectTypes FPDFPageObjMark_GetParamValueType_x86(FPDF_PAGEOBJECTMARK mark, [MarshalAs(UnmanagedType.LPStr)] string key);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFPageObjMark_GetParamValueType")]
			internal static extern ObjectTypes FPDFPageObjMark_GetParamValueType_x64(FPDF_PAGEOBJECTMARK mark, [MarshalAs(UnmanagedType.LPStr)] string key);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDFPageObjMark_GetParamValueType/*'/>
		public static ObjectTypes FPDFPageObjMark_GetParamValueType(FPDF_PAGEOBJECTMARK mark, [MarshalAs(UnmanagedType.LPStr)] string key)
		{

			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { return PlatformInvoke.FPDFPageObjMark_GetParamValueType_x64(mark, key); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { return PlatformInvoke.FPDFPageObjMark_GetParamValueType_x86(mark, key); }
			else
				throw new PlatformNotSupportedException();

		}

		#endregion


		#region FPDFPageObjMark_GetParamIntValue

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFPageObjMark_GetParamIntValue")]
			internal static extern bool FPDFPageObjMark_GetParamIntValue_x86(FPDF_PAGEOBJECTMARK mark, [MarshalAs(UnmanagedType.LPStr)] string key, out int out_value);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFPageObjMark_GetParamIntValue")]
			internal static extern bool FPDFPageObjMark_GetParamIntValue_x64(FPDF_PAGEOBJECTMARK mark, [MarshalAs(UnmanagedType.LPStr)] string key, out int out_value);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDFPageObjMark_GetParamIntValue/*'/>
		public static bool FPDFPageObjMark_GetParamIntValue(FPDF_PAGEOBJECTMARK mark, [MarshalAs(UnmanagedType.LPStr)] string key, out int out_value)
		{

			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { return PlatformInvoke.FPDFPageObjMark_GetParamIntValue_x64(mark, key, out out_value); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { return PlatformInvoke.FPDFPageObjMark_GetParamIntValue_x86(mark, key, out out_value); }
			else
				throw new PlatformNotSupportedException();

		}

		#endregion


		#region FPDFPageObjMark_GetParamStringValue

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFPageObjMark_GetParamStringValue")]
			internal static extern bool FPDFPageObjMark_GetParamStringValue_x86(FPDF_PAGEOBJECTMARK mark, [MarshalAs(UnmanagedType.LPStr)] string key, ref byte buffer, ulong buflen, out ulong out_buflen);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFPageObjMark_GetParamStringValue")]
			internal static extern bool FPDFPageObjMark_GetParamStringValue_x64(FPDF_PAGEOBJECTMARK mark, [MarshalAs(UnmanagedType.LPStr)] string key, ref byte buffer, ulong buflen, out ulong out_buflen);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDFPageObjMark_GetParamStringValue/*'/>
		public static bool FPDFPageObjMark_GetParamStringValue(FPDF_PAGEOBJECTMARK mark, [MarshalAs(UnmanagedType.LPStr)] string key, ref byte buffer, ulong buflen, out ulong out_buflen)
		{

			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { return PlatformInvoke.FPDFPageObjMark_GetParamStringValue_x64(mark, key, ref buffer, buflen, out out_buflen); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { return PlatformInvoke.FPDFPageObjMark_GetParamStringValue_x86(mark, key, ref buffer, buflen, out out_buflen); }
			else
				throw new PlatformNotSupportedException();

		}

		#endregion


		#region FPDFPageObjMark_GetParamBlobValue

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFPageObjMark_GetParamBlobValue")]
			internal static extern bool FPDFPageObjMark_GetParamBlobValue_x86(FPDF_PAGEOBJECTMARK mark, [MarshalAs(UnmanagedType.LPStr)] string key, ref byte buffer, ulong buflen, out ulong out_buflen);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFPageObjMark_GetParamBlobValue")]
			internal static extern bool FPDFPageObjMark_GetParamBlobValue_x64(FPDF_PAGEOBJECTMARK mark, [MarshalAs(UnmanagedType.LPStr)] string key, ref byte buffer, ulong buflen, out ulong out_buflen);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDFPageObjMark_GetParamBlobValue/*'/>
		public static bool FPDFPageObjMark_GetParamBlobValue(FPDF_PAGEOBJECTMARK mark, [MarshalAs(UnmanagedType.LPStr)] string key, ref byte buffer, ulong buflen, out ulong out_buflen)
		{

			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { return PlatformInvoke.FPDFPageObjMark_GetParamBlobValue_x64(mark, key, ref buffer, buflen, out out_buflen); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { return PlatformInvoke.FPDFPageObjMark_GetParamBlobValue_x86(mark, key, ref buffer, buflen, out out_buflen); }
			else
				throw new PlatformNotSupportedException();

		}

		#endregion


		#region FPDFPageObjMark_SetIntParam

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFPageObjMark_SetIntParam")]
			internal static extern bool FPDFPageObjMark_SetIntParam_x86(FPDF_DOCUMENT document, FPDF_PAGEOBJECT page_object, FPDF_PAGEOBJECTMARK mark, [MarshalAs(UnmanagedType.LPStr)] string key, int value);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFPageObjMark_SetIntParam")]
			internal static extern bool FPDFPageObjMark_SetIntParam_x64(FPDF_DOCUMENT document, FPDF_PAGEOBJECT page_object, FPDF_PAGEOBJECTMARK mark, [MarshalAs(UnmanagedType.LPStr)] string key, int value);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDFPageObjMark_SetIntParam/*'/>
		public static bool FPDFPageObjMark_SetIntParam(FPDF_DOCUMENT document, FPDF_PAGEOBJECT page_object, FPDF_PAGEOBJECTMARK mark, [MarshalAs(UnmanagedType.LPStr)] string key, int value)
		{

			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { return PlatformInvoke.FPDFPageObjMark_SetIntParam_x64(document, page_object, mark, key, value); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { return PlatformInvoke.FPDFPageObjMark_SetIntParam_x86(document, page_object, mark, key, value); }
			else
				throw new PlatformNotSupportedException();

		}

		#endregion


		#region FPDFPageObjMark_SetStringParam

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFPageObjMark_SetStringParam")]
			internal static extern bool FPDFPageObjMark_SetStringParam_x86(FPDF_DOCUMENT document, FPDF_PAGEOBJECT page_object, FPDF_PAGEOBJECTMARK mark, [MarshalAs(UnmanagedType.LPStr)] string key, [MarshalAs(UnmanagedType.LPStr)] string value);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFPageObjMark_SetStringParam")]
			internal static extern bool FPDFPageObjMark_SetStringParam_x64(FPDF_DOCUMENT document, FPDF_PAGEOBJECT page_object, FPDF_PAGEOBJECTMARK mark, [MarshalAs(UnmanagedType.LPStr)] string key, [MarshalAs(UnmanagedType.LPStr)] string value);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDFPageObjMark_SetStringParam/*'/>
		public static bool FPDFPageObjMark_SetStringParam(FPDF_DOCUMENT document, FPDF_PAGEOBJECT page_object, FPDF_PAGEOBJECTMARK mark, [MarshalAs(UnmanagedType.LPStr)] string key, [MarshalAs(UnmanagedType.LPStr)] string value)
		{

			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { return PlatformInvoke.FPDFPageObjMark_SetStringParam_x64(document, page_object, mark, key, value); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { return PlatformInvoke.FPDFPageObjMark_SetStringParam_x86(document, page_object, mark, key, value); }
			else
				throw new PlatformNotSupportedException();

		}

		#endregion


		#region FPDFPageObjMark_SetBlobParam

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFPageObjMark_SetBlobParam")]
			internal static extern bool FPDFPageObjMark_SetBlobParam_x86(FPDF_DOCUMENT document, FPDF_PAGEOBJECT page_object, FPDF_PAGEOBJECTMARK mark, [MarshalAs(UnmanagedType.LPStr)] string key, ref byte value, ulong value_len);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFPageObjMark_SetBlobParam")]
			internal static extern bool FPDFPageObjMark_SetBlobParam_x64(FPDF_DOCUMENT document, FPDF_PAGEOBJECT page_object, FPDF_PAGEOBJECTMARK mark, [MarshalAs(UnmanagedType.LPStr)] string key, ref byte value, ulong value_len);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDFPageObjMark_SetBlobParam/*'/>
		public static bool FPDFPageObjMark_SetBlobParam(FPDF_DOCUMENT document, FPDF_PAGEOBJECT page_object, FPDF_PAGEOBJECTMARK mark, [MarshalAs(UnmanagedType.LPStr)] string key, ref byte value, ulong value_len)
		{

			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { return PlatformInvoke.FPDFPageObjMark_SetBlobParam_x64(document, page_object, mark, key, ref value, value_len); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { return PlatformInvoke.FPDFPageObjMark_SetBlobParam_x86(document, page_object, mark, key, ref value, value_len); }
			else
				throw new PlatformNotSupportedException();

		}

		#endregion


		#region FPDFPageObjMark_RemoveParam

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFPageObjMark_RemoveParam")]
			internal static extern bool FPDFPageObjMark_RemoveParam_x86(FPDF_PAGEOBJECT page_object, FPDF_PAGEOBJECTMARK mark, [MarshalAs(UnmanagedType.LPStr)] string key);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFPageObjMark_RemoveParam")]
			internal static extern bool FPDFPageObjMark_RemoveParam_x64(FPDF_PAGEOBJECT page_object, FPDF_PAGEOBJECTMARK mark, [MarshalAs(UnmanagedType.LPStr)] string key);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDFPageObjMark_RemoveParam/*'/>
		public static bool FPDFPageObjMark_RemoveParam(FPDF_PAGEOBJECT page_object, FPDF_PAGEOBJECTMARK mark, [MarshalAs(UnmanagedType.LPStr)] string key)
		{

			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { return PlatformInvoke.FPDFPageObjMark_RemoveParam_x64(page_object, mark, key); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { return PlatformInvoke.FPDFPageObjMark_RemoveParam_x86(page_object, mark, key); }
			else
				throw new PlatformNotSupportedException();

		}

		#endregion


		#region FPDFImageObj_LoadJpegFile

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFImageObj_LoadJpegFile")]
			internal static extern bool FPDFImageObj_LoadJpegFile_x86(ref FPDF_PAGE pages, int nCount, FPDF_PAGEOBJECT image_object, FPDF_FILEREAD fileRead);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFImageObj_LoadJpegFile")]
			internal static extern bool FPDFImageObj_LoadJpegFile_x64(ref FPDF_PAGE pages, int nCount, FPDF_PAGEOBJECT image_object, FPDF_FILEREAD fileRead);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDFImageObj_LoadJpegFile/*'/>
		private static bool FPDFImageObj_LoadJpegFile(ref FPDF_PAGE pages, int nCount, FPDF_PAGEOBJECT image_object, FPDF_FILEREAD fileRead)
		{

			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { return PlatformInvoke.FPDFImageObj_LoadJpegFile_x64(ref pages, nCount, image_object, fileRead); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { return PlatformInvoke.FPDFImageObj_LoadJpegFile_x86(ref pages, nCount, image_object, fileRead); }
			else
				throw new PlatformNotSupportedException();

		}

		#endregion


		#region FPDFImageObj_LoadJpegFileInline

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFImageObj_LoadJpegFileInline")]
			internal static extern bool FPDFImageObj_LoadJpegFileInline_x86(ref FPDF_PAGE pages, int nCount, FPDF_PAGEOBJECT image_object, FPDF_FILEREAD fileRead);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFImageObj_LoadJpegFileInline")]
			internal static extern bool FPDFImageObj_LoadJpegFileInline_x64(ref FPDF_PAGE pages, int nCount, FPDF_PAGEOBJECT image_object, FPDF_FILEREAD fileRead);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDFImageObj_LoadJpegFileInline/*'/>
		private static bool FPDFImageObj_LoadJpegFileInline(ref FPDF_PAGE pages, int nCount, FPDF_PAGEOBJECT image_object, FPDF_FILEREAD fileRead)
		{

			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { return PlatformInvoke.FPDFImageObj_LoadJpegFileInline_x64(ref pages, nCount, image_object, fileRead); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { return PlatformInvoke.FPDFImageObj_LoadJpegFileInline_x86(ref pages, nCount, image_object, fileRead); }
			else
				throw new PlatformNotSupportedException();

		}

		#endregion


		#region FPDFImageObj_SetMatrix

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFImageObj_SetMatrix")]
			internal static extern bool FPDFImageObj_SetMatrix_x86(FPDF_PAGEOBJECT image_object, double a, double b, double c, double d, double e, double f);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFImageObj_SetMatrix")]
			internal static extern bool FPDFImageObj_SetMatrix_x64(FPDF_PAGEOBJECT image_object, double a, double b, double c, double d, double e, double f);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDFImageObj_SetMatrix/*'/>
		public static bool FPDFImageObj_SetMatrix(FPDF_PAGEOBJECT image_object, double a, double b, double c, double d, double e, double f)
		{

			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { return PlatformInvoke.FPDFImageObj_SetMatrix_x64(image_object, a, b, c, d, e, f); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { return PlatformInvoke.FPDFImageObj_SetMatrix_x86(image_object, a, b, c, d, e, f); }
			else
				throw new PlatformNotSupportedException();

		}

		#endregion


		#region FPDFImageObj_SetBitmap

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFImageObj_SetBitmap")]
			internal static extern bool FPDFImageObj_SetBitmap_x86(ref FPDF_PAGE pages, int count, FPDF_PAGEOBJECT image_object, FPDF_BITMAP bitmap);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFImageObj_SetBitmap")]
			internal static extern bool FPDFImageObj_SetBitmap_x64(ref FPDF_PAGE pages, int count, FPDF_PAGEOBJECT image_object, FPDF_BITMAP bitmap);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDFImageObj_SetBitmap/*'/>
		public static bool FPDFImageObj_SetBitmap(ref FPDF_PAGE pages, int count, FPDF_PAGEOBJECT image_object, FPDF_BITMAP bitmap)
		{

			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { return PlatformInvoke.FPDFImageObj_SetBitmap_x64(ref pages, count, image_object, bitmap); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { return PlatformInvoke.FPDFImageObj_SetBitmap_x86(ref pages, count, image_object, bitmap); }
			else
				throw new PlatformNotSupportedException();

		}

		#endregion


		#region FPDFImageObj_GetBitmap

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFImageObj_GetBitmap")]
			internal static extern FPDF_BITMAP FPDFImageObj_GetBitmap_x86(FPDF_PAGEOBJECT image_object);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFImageObj_GetBitmap")]
			internal static extern FPDF_BITMAP FPDFImageObj_GetBitmap_x64(FPDF_PAGEOBJECT image_object);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDFImageObj_GetBitmap/*'/>
		public static FPDF_BITMAP FPDFImageObj_GetBitmap(FPDF_PAGEOBJECT image_object)
		{

			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { return PlatformInvoke.FPDFImageObj_GetBitmap_x64(image_object); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { return PlatformInvoke.FPDFImageObj_GetBitmap_x86(image_object); }
			else
				throw new PlatformNotSupportedException();

		}

		#endregion


		#region FPDFImageObj_GetRenderedBitmap

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFImageObj_GetRenderedBitmap")]
			internal static extern FPDF_BITMAP FPDFImageObj_GetRenderedBitmap_x86(FPDF_DOCUMENT document, FPDF_PAGE page, FPDF_PAGEOBJECT image_object);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFImageObj_GetRenderedBitmap")]
			internal static extern FPDF_BITMAP FPDFImageObj_GetRenderedBitmap_x64(FPDF_DOCUMENT document, FPDF_PAGE page, FPDF_PAGEOBJECT image_object);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDFImageObj_GetRenderedBitmap/*'/>
		public static FPDF_BITMAP FPDFImageObj_GetRenderedBitmap(FPDF_DOCUMENT document, FPDF_PAGE page, FPDF_PAGEOBJECT image_object)
		{

			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { return PlatformInvoke.FPDFImageObj_GetRenderedBitmap_x64(document, page, image_object); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { return PlatformInvoke.FPDFImageObj_GetRenderedBitmap_x86(document, page, image_object); }
			else
				throw new PlatformNotSupportedException();

		}

		#endregion


		#region FPDFImageObj_GetImageDataDecoded

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFImageObj_GetImageDataDecoded")]
			internal static extern ulong FPDFImageObj_GetImageDataDecoded_x86(FPDF_PAGEOBJECT image_object, ref byte buffer, ulong buflen);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFImageObj_GetImageDataDecoded")]
			internal static extern ulong FPDFImageObj_GetImageDataDecoded_x64(FPDF_PAGEOBJECT image_object, ref byte buffer, ulong buflen);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDFImageObj_GetImageDataDecoded/*'/>
		public static ulong FPDFImageObj_GetImageDataDecoded(FPDF_PAGEOBJECT image_object, ref byte buffer, ulong buflen)
		{

			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { return PlatformInvoke.FPDFImageObj_GetImageDataDecoded_x64(image_object, ref buffer, buflen); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { return PlatformInvoke.FPDFImageObj_GetImageDataDecoded_x86(image_object, ref buffer, buflen); }
			else
				throw new PlatformNotSupportedException();

		}

		#endregion


		#region FPDFImageObj_GetImageDataRaw

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFImageObj_GetImageDataRaw")]
			internal static extern ulong FPDFImageObj_GetImageDataRaw_x86(FPDF_PAGEOBJECT image_object, ref byte buffer, ulong buflen);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFImageObj_GetImageDataRaw")]
			internal static extern ulong FPDFImageObj_GetImageDataRaw_x64(FPDF_PAGEOBJECT image_object, ref byte buffer, ulong buflen);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDFImageObj_GetImageDataRaw/*'/>
		public static ulong FPDFImageObj_GetImageDataRaw(FPDF_PAGEOBJECT image_object, ref byte buffer, ulong buflen)
		{

			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { return PlatformInvoke.FPDFImageObj_GetImageDataRaw_x64(image_object, ref buffer, buflen); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { return PlatformInvoke.FPDFImageObj_GetImageDataRaw_x86(image_object, ref buffer, buflen); }
			else
				throw new PlatformNotSupportedException();

		}

		#endregion


		#region FPDFImageObj_GetImageFilterCount

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFImageObj_GetImageFilterCount")]
			internal static extern int FPDFImageObj_GetImageFilterCount_x86(FPDF_PAGEOBJECT image_object);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFImageObj_GetImageFilterCount")]
			internal static extern int FPDFImageObj_GetImageFilterCount_x64(FPDF_PAGEOBJECT image_object);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDFImageObj_GetImageFilterCount/*'/>
		public static int FPDFImageObj_GetImageFilterCount(FPDF_PAGEOBJECT image_object)
		{

			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { return PlatformInvoke.FPDFImageObj_GetImageFilterCount_x64(image_object); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { return PlatformInvoke.FPDFImageObj_GetImageFilterCount_x86(image_object); }
			else
				throw new PlatformNotSupportedException();

		}

		#endregion


		#region FPDFImageObj_GetImageFilter

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFImageObj_GetImageFilter")]
			internal static extern ulong FPDFImageObj_GetImageFilter_x86(FPDF_PAGEOBJECT image_object, int index, ref byte buffer, ulong buflen);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFImageObj_GetImageFilter")]
			internal static extern ulong FPDFImageObj_GetImageFilter_x64(FPDF_PAGEOBJECT image_object, int index, ref byte buffer, ulong buflen);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDFImageObj_GetImageFilter/*'/>
		public static ulong FPDFImageObj_GetImageFilter(FPDF_PAGEOBJECT image_object, int index, ref byte buffer, ulong buflen)
		{

			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { return PlatformInvoke.FPDFImageObj_GetImageFilter_x64(image_object, index, ref buffer, buflen); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { return PlatformInvoke.FPDFImageObj_GetImageFilter_x86(image_object, index, ref buffer, buflen); }
			else
				throw new PlatformNotSupportedException();

		}

		#endregion


		#region FPDFImageObj_GetImageMetadata

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFImageObj_GetImageMetadata")]
			internal static extern bool FPDFImageObj_GetImageMetadata_x86(FPDF_PAGEOBJECT image_object, FPDF_PAGE page, out FPDF_IMAGEOBJ_METADATA metadata);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFImageObj_GetImageMetadata")]
			internal static extern bool FPDFImageObj_GetImageMetadata_x64(FPDF_PAGEOBJECT image_object, FPDF_PAGE page, out FPDF_IMAGEOBJ_METADATA metadata);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDFImageObj_GetImageMetadata/*'/>
		public static bool FPDFImageObj_GetImageMetadata(FPDF_PAGEOBJECT image_object, FPDF_PAGE page, out FPDF_IMAGEOBJ_METADATA metadata)
		{

			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { return PlatformInvoke.FPDFImageObj_GetImageMetadata_x64(image_object, page, out metadata); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { return PlatformInvoke.FPDFImageObj_GetImageMetadata_x86(image_object, page, out metadata); }
			else
				throw new PlatformNotSupportedException();

		}

		#endregion


		#region FPDFImageObj_GetImagePixelSize

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFImageObj_GetImagePixelSize")]
			internal static extern bool FPDFImageObj_GetImagePixelSize_x86(FPDF_PAGEOBJECT image_object, out uint width, out uint height);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFImageObj_GetImagePixelSize")]
			internal static extern bool FPDFImageObj_GetImagePixelSize_x64(FPDF_PAGEOBJECT image_object, out uint width, out uint height);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDFImageObj_GetImagePixelSize/*'/>
		public static bool FPDFImageObj_GetImagePixelSize(FPDF_PAGEOBJECT image_object, out uint width, out uint height)
		{

			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { return PlatformInvoke.FPDFImageObj_GetImagePixelSize_x64(image_object, out width, out height); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { return PlatformInvoke.FPDFImageObj_GetImagePixelSize_x86(image_object, out width, out height); }
			else
				throw new PlatformNotSupportedException();

		}

		#endregion


		#region FPDFPageObj_CreateNewPath

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFPageObj_CreateNewPath")]
			internal static extern FPDF_PAGEOBJECT FPDFPageObj_CreateNewPath_x86(float x, float y);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFPageObj_CreateNewPath")]
			internal static extern FPDF_PAGEOBJECT FPDFPageObj_CreateNewPath_x64(float x, float y);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDFPageObj_CreateNewPath/*'/>
		public static FPDF_PAGEOBJECT FPDFPageObj_CreateNewPath(float x, float y)
		{

			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { return PlatformInvoke.FPDFPageObj_CreateNewPath_x64(x, y); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { return PlatformInvoke.FPDFPageObj_CreateNewPath_x86(x, y); }
			else
				throw new PlatformNotSupportedException();

		}

		#endregion


		#region FPDFPageObj_CreateNewRect

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFPageObj_CreateNewRect")]
			internal static extern FPDF_PAGEOBJECT FPDFPageObj_CreateNewRect_x86(float x, float y, float w, float h);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFPageObj_CreateNewRect")]
			internal static extern FPDF_PAGEOBJECT FPDFPageObj_CreateNewRect_x64(float x, float y, float w, float h);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDFPageObj_CreateNewRect/*'/>
		public static FPDF_PAGEOBJECT FPDFPageObj_CreateNewRect(float x, float y, float w, float h)
		{

			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { return PlatformInvoke.FPDFPageObj_CreateNewRect_x64(x, y, w, h); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { return PlatformInvoke.FPDFPageObj_CreateNewRect_x86(x, y, w, h); }
			else
				throw new PlatformNotSupportedException();

		}

		#endregion


		#region FPDFPageObj_GetBounds

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFPageObj_GetBounds")]
			internal static extern bool FPDFPageObj_GetBounds_x86(FPDF_PAGEOBJECT page_object, out float left, out float bottom, out float right, out float top);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFPageObj_GetBounds")]
			internal static extern bool FPDFPageObj_GetBounds_x64(FPDF_PAGEOBJECT page_object, out float left, out float bottom, out float right, out float top);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDFPageObj_GetBounds/*'/>
		public static bool FPDFPageObj_GetBounds(FPDF_PAGEOBJECT page_object, out float left, out float bottom, out float right, out float top)
		{

			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { return PlatformInvoke.FPDFPageObj_GetBounds_x64(page_object, out left, out bottom, out right, out top); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { return PlatformInvoke.FPDFPageObj_GetBounds_x86(page_object, out left, out bottom, out right, out top); }
			else
				throw new PlatformNotSupportedException();

		}

		#endregion


		#region FPDFPageObj_GetRotatedBounds

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFPageObj_GetRotatedBounds")]
			internal static extern bool FPDFPageObj_GetRotatedBounds_x86(FPDF_PAGEOBJECT page_object, FS_QUADPOINTSF quad_points);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFPageObj_GetRotatedBounds")]
			internal static extern bool FPDFPageObj_GetRotatedBounds_x64(FPDF_PAGEOBJECT page_object, FS_QUADPOINTSF quad_points);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDFPageObj_GetRotatedBounds/*'/>
		public static bool FPDFPageObj_GetRotatedBounds(FPDF_PAGEOBJECT page_object, FS_QUADPOINTSF quad_points)
		{

			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { return PlatformInvoke.FPDFPageObj_GetRotatedBounds_x64(page_object, quad_points); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { return PlatformInvoke.FPDFPageObj_GetRotatedBounds_x86(page_object, quad_points); }
			else
				throw new PlatformNotSupportedException();

		}

		#endregion


		#region FPDFPageObj_SetBlendMode

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFPageObj_SetBlendMode")]
			internal static extern void FPDFPageObj_SetBlendMode_x86(FPDF_PAGEOBJECT page_object, [MarshalAs(UnmanagedType.LPStr)] string blend_mode);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFPageObj_SetBlendMode")]
			internal static extern void FPDFPageObj_SetBlendMode_x64(FPDF_PAGEOBJECT page_object, [MarshalAs(UnmanagedType.LPStr)] string blend_mode);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDFPageObj_SetBlendMode/*'/>
		public static void FPDFPageObj_SetBlendMode(FPDF_PAGEOBJECT page_object, [MarshalAs(UnmanagedType.LPStr)] string blend_mode)
		{

			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { PlatformInvoke.FPDFPageObj_SetBlendMode_x64(page_object, blend_mode); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { PlatformInvoke.FPDFPageObj_SetBlendMode_x86(page_object, blend_mode); }
			else
				throw new PlatformNotSupportedException();

		}

		#endregion


		#region FPDFPageObj_SetStrokeColor

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFPageObj_SetStrokeColor")]
			internal static extern bool FPDFPageObj_SetStrokeColor_x86(FPDF_PAGEOBJECT page_object, uint R, uint G, uint B, uint A);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFPageObj_SetStrokeColor")]
			internal static extern bool FPDFPageObj_SetStrokeColor_x64(FPDF_PAGEOBJECT page_object, uint R, uint G, uint B, uint A);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDFPageObj_SetStrokeColor/*'/>
		public static bool FPDFPageObj_SetStrokeColor(FPDF_PAGEOBJECT page_object, uint R, uint G, uint B, uint A)
		{

			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { return PlatformInvoke.FPDFPageObj_SetStrokeColor_x64(page_object, R, G, B, A); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { return PlatformInvoke.FPDFPageObj_SetStrokeColor_x86(page_object, R, G, B, A); }
			else
				throw new PlatformNotSupportedException();

		}

		#endregion


		#region FPDFPageObj_GetStrokeColor

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFPageObj_GetStrokeColor")]
			internal static extern bool FPDFPageObj_GetStrokeColor_x86(FPDF_PAGEOBJECT page_object, out uint R, out uint G, out uint B, out uint A);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFPageObj_GetStrokeColor")]
			internal static extern bool FPDFPageObj_GetStrokeColor_x64(FPDF_PAGEOBJECT page_object, out uint R, out uint G, out uint B, out uint A);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDFPageObj_GetStrokeColor/*'/>
		public static bool FPDFPageObj_GetStrokeColor(FPDF_PAGEOBJECT page_object, out uint R, out uint G, out uint B, out uint A)
		{

			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { return PlatformInvoke.FPDFPageObj_GetStrokeColor_x64(page_object, out R, out G, out B, out A); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { return PlatformInvoke.FPDFPageObj_GetStrokeColor_x86(page_object, out R, out G, out B, out A); }
			else
				throw new PlatformNotSupportedException();

		}

		#endregion


		#region FPDFPageObj_SetStrokeWidth

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFPageObj_SetStrokeWidth")]
			internal static extern bool FPDFPageObj_SetStrokeWidth_x86(FPDF_PAGEOBJECT page_object, float width);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFPageObj_SetStrokeWidth")]
			internal static extern bool FPDFPageObj_SetStrokeWidth_x64(FPDF_PAGEOBJECT page_object, float width);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDFPageObj_SetStrokeWidth/*'/>
		public static bool FPDFPageObj_SetStrokeWidth(FPDF_PAGEOBJECT page_object, float width)
		{

			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { return PlatformInvoke.FPDFPageObj_SetStrokeWidth_x64(page_object, width); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { return PlatformInvoke.FPDFPageObj_SetStrokeWidth_x86(page_object, width); }
			else
				throw new PlatformNotSupportedException();

		}

		#endregion


		#region FPDFPageObj_GetStrokeWidth

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFPageObj_GetStrokeWidth")]
			internal static extern bool FPDFPageObj_GetStrokeWidth_x86(FPDF_PAGEOBJECT page_object, out float width);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFPageObj_GetStrokeWidth")]
			internal static extern bool FPDFPageObj_GetStrokeWidth_x64(FPDF_PAGEOBJECT page_object, out float width);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDFPageObj_GetStrokeWidth/*'/>
		public static bool FPDFPageObj_GetStrokeWidth(FPDF_PAGEOBJECT page_object, out float width)
		{

			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { return PlatformInvoke.FPDFPageObj_GetStrokeWidth_x64(page_object, out width); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { return PlatformInvoke.FPDFPageObj_GetStrokeWidth_x86(page_object, out width); }
			else
				throw new PlatformNotSupportedException();

		}

		#endregion


		#region FPDFPageObj_GetLineJoin

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFPageObj_GetLineJoin")]
			internal static extern int FPDFPageObj_GetLineJoin_x86(FPDF_PAGEOBJECT page_object);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFPageObj_GetLineJoin")]
			internal static extern int FPDFPageObj_GetLineJoin_x64(FPDF_PAGEOBJECT page_object);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDFPageObj_GetLineJoin/*'/>
		public static int FPDFPageObj_GetLineJoin(FPDF_PAGEOBJECT page_object)
		{

			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { return PlatformInvoke.FPDFPageObj_GetLineJoin_x64(page_object); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { return PlatformInvoke.FPDFPageObj_GetLineJoin_x86(page_object); }
			else
				throw new PlatformNotSupportedException();

		}

		#endregion


		#region FPDFPageObj_SetLineJoin

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFPageObj_SetLineJoin")]
			internal static extern bool FPDFPageObj_SetLineJoin_x86(FPDF_PAGEOBJECT page_object, int line_join);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFPageObj_SetLineJoin")]
			internal static extern bool FPDFPageObj_SetLineJoin_x64(FPDF_PAGEOBJECT page_object, int line_join);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDFPageObj_SetLineJoin/*'/>
		public static bool FPDFPageObj_SetLineJoin(FPDF_PAGEOBJECT page_object, int line_join)
		{

			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { return PlatformInvoke.FPDFPageObj_SetLineJoin_x64(page_object, line_join); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { return PlatformInvoke.FPDFPageObj_SetLineJoin_x86(page_object, line_join); }
			else
				throw new PlatformNotSupportedException();

		}

		#endregion


		#region FPDFPageObj_GetLineCap

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFPageObj_GetLineCap")]
			internal static extern int FPDFPageObj_GetLineCap_x86(FPDF_PAGEOBJECT page_object);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFPageObj_GetLineCap")]
			internal static extern int FPDFPageObj_GetLineCap_x64(FPDF_PAGEOBJECT page_object);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDFPageObj_GetLineCap/*'/>
		public static int FPDFPageObj_GetLineCap(FPDF_PAGEOBJECT page_object)
		{

			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { return PlatformInvoke.FPDFPageObj_GetLineCap_x64(page_object); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { return PlatformInvoke.FPDFPageObj_GetLineCap_x86(page_object); }
			else
				throw new PlatformNotSupportedException();

		}

		#endregion


		#region FPDFPageObj_SetLineCap

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFPageObj_SetLineCap")]
			internal static extern bool FPDFPageObj_SetLineCap_x86(FPDF_PAGEOBJECT page_object, int line_cap);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFPageObj_SetLineCap")]
			internal static extern bool FPDFPageObj_SetLineCap_x64(FPDF_PAGEOBJECT page_object, int line_cap);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDFPageObj_SetLineCap/*'/>
		public static bool FPDFPageObj_SetLineCap(FPDF_PAGEOBJECT page_object, int line_cap)
		{

			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { return PlatformInvoke.FPDFPageObj_SetLineCap_x64(page_object, line_cap); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { return PlatformInvoke.FPDFPageObj_SetLineCap_x86(page_object, line_cap); }
			else
				throw new PlatformNotSupportedException();

		}

		#endregion


		#region FPDFPageObj_SetFillColor

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFPageObj_SetFillColor")]
			internal static extern bool FPDFPageObj_SetFillColor_x86(FPDF_PAGEOBJECT page_object, uint R, uint G, uint B, uint A);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFPageObj_SetFillColor")]
			internal static extern bool FPDFPageObj_SetFillColor_x64(FPDF_PAGEOBJECT page_object, uint R, uint G, uint B, uint A);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDFPageObj_SetFillColor/*'/>
		public static bool FPDFPageObj_SetFillColor(FPDF_PAGEOBJECT page_object, uint R, uint G, uint B, uint A)
		{

			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { return PlatformInvoke.FPDFPageObj_SetFillColor_x64(page_object, R, G, B, A); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { return PlatformInvoke.FPDFPageObj_SetFillColor_x86(page_object, R, G, B, A); }
			else
				throw new PlatformNotSupportedException();

		}

		#endregion


		#region FPDFPageObj_GetFillColor

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFPageObj_GetFillColor")]
			internal static extern bool FPDFPageObj_GetFillColor_x86(FPDF_PAGEOBJECT page_object, out uint R, out uint G, out uint B, out uint A);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFPageObj_GetFillColor")]
			internal static extern bool FPDFPageObj_GetFillColor_x64(FPDF_PAGEOBJECT page_object, out uint R, out uint G, out uint B, out uint A);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDFPageObj_GetFillColor/*'/>
		public static bool FPDFPageObj_GetFillColor(FPDF_PAGEOBJECT page_object, out uint R, out uint G, out uint B, out uint A)
		{

			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { return PlatformInvoke.FPDFPageObj_GetFillColor_x64(page_object, out R, out G, out B, out A); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { return PlatformInvoke.FPDFPageObj_GetFillColor_x86(page_object, out R, out G, out B, out A); }
			else
				throw new PlatformNotSupportedException();

		}

		#endregion


		#region FPDFPageObj_GetDashPhase

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFPageObj_GetDashPhase")]
			internal static extern bool FPDFPageObj_GetDashPhase_x86(FPDF_PAGEOBJECT page_object, out float phase);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFPageObj_GetDashPhase")]
			internal static extern bool FPDFPageObj_GetDashPhase_x64(FPDF_PAGEOBJECT page_object, out float phase);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDFPageObj_GetDashPhase/*'/>
		public static bool FPDFPageObj_GetDashPhase(FPDF_PAGEOBJECT page_object, out float phase)
		{

			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { return PlatformInvoke.FPDFPageObj_GetDashPhase_x64(page_object, out phase); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { return PlatformInvoke.FPDFPageObj_GetDashPhase_x86(page_object, out phase); }
			else
				throw new PlatformNotSupportedException();

		}

		#endregion


		#region FPDFPageObj_SetDashPhase

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFPageObj_SetDashPhase")]
			internal static extern bool FPDFPageObj_SetDashPhase_x86(FPDF_PAGEOBJECT page_object, float phase);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFPageObj_SetDashPhase")]
			internal static extern bool FPDFPageObj_SetDashPhase_x64(FPDF_PAGEOBJECT page_object, float phase);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDFPageObj_SetDashPhase/*'/>
		public static bool FPDFPageObj_SetDashPhase(FPDF_PAGEOBJECT page_object, float phase)
		{

			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { return PlatformInvoke.FPDFPageObj_SetDashPhase_x64(page_object, phase); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { return PlatformInvoke.FPDFPageObj_SetDashPhase_x86(page_object, phase); }
			else
				throw new PlatformNotSupportedException();

		}

		#endregion


		#region FPDFPageObj_GetDashCount

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFPageObj_GetDashCount")]
			internal static extern int FPDFPageObj_GetDashCount_x86(FPDF_PAGEOBJECT page_object);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFPageObj_GetDashCount")]
			internal static extern int FPDFPageObj_GetDashCount_x64(FPDF_PAGEOBJECT page_object);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDFPageObj_GetDashCount/*'/>
		public static int FPDFPageObj_GetDashCount(FPDF_PAGEOBJECT page_object)
		{

			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { return PlatformInvoke.FPDFPageObj_GetDashCount_x64(page_object); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { return PlatformInvoke.FPDFPageObj_GetDashCount_x86(page_object); }
			else
				throw new PlatformNotSupportedException();

		}

		#endregion


		#region FPDFPageObj_GetDashArray

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFPageObj_GetDashArray")]
			internal static extern bool FPDFPageObj_GetDashArray_x86(FPDF_PAGEOBJECT page_object, out float dash_array, uint dash_count);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFPageObj_GetDashArray")]
			internal static extern bool FPDFPageObj_GetDashArray_x64(FPDF_PAGEOBJECT page_object, out float dash_array, uint dash_count);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDFPageObj_GetDashArray/*'/>
		public static bool FPDFPageObj_GetDashArray(FPDF_PAGEOBJECT page_object, out float dash_array, uint dash_count)
		{

			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { return PlatformInvoke.FPDFPageObj_GetDashArray_x64(page_object, out dash_array, dash_count); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { return PlatformInvoke.FPDFPageObj_GetDashArray_x86(page_object, out dash_array, dash_count); }
			else
				throw new PlatformNotSupportedException();

		}

		#endregion


		#region FPDFPageObj_SetDashArray

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFPageObj_SetDashArray")]
			internal static extern bool FPDFPageObj_SetDashArray_x86(FPDF_PAGEOBJECT page_object, ref float dash_array, uint dash_count, float phase);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFPageObj_SetDashArray")]
			internal static extern bool FPDFPageObj_SetDashArray_x64(FPDF_PAGEOBJECT page_object, ref float dash_array, uint dash_count, float phase);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDFPageObj_SetDashArray/*'/>
		public static bool FPDFPageObj_SetDashArray(FPDF_PAGEOBJECT page_object, ref float dash_array, uint dash_count, float phase)
		{

			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { return PlatformInvoke.FPDFPageObj_SetDashArray_x64(page_object, ref dash_array, dash_count, phase); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { return PlatformInvoke.FPDFPageObj_SetDashArray_x86(page_object, ref dash_array, dash_count, phase); }
			else
				throw new PlatformNotSupportedException();

		}

		#endregion


		#region FPDFPath_CountSegments

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFPath_CountSegments")]
			internal static extern int FPDFPath_CountSegments_x86(FPDF_PAGEOBJECT path);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFPath_CountSegments")]
			internal static extern int FPDFPath_CountSegments_x64(FPDF_PAGEOBJECT path);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDFPath_CountSegments/*'/>
		public static int FPDFPath_CountSegments(FPDF_PAGEOBJECT path)
		{

			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { return PlatformInvoke.FPDFPath_CountSegments_x64(path); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { return PlatformInvoke.FPDFPath_CountSegments_x86(path); }
			else
				throw new PlatformNotSupportedException();

		}

		#endregion


		#region FPDFPath_GetPathSegment

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFPath_GetPathSegment")]
			internal static extern FPDF_PATHSEGMENT FPDFPath_GetPathSegment_x86(FPDF_PAGEOBJECT path, int index);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFPath_GetPathSegment")]
			internal static extern FPDF_PATHSEGMENT FPDFPath_GetPathSegment_x64(FPDF_PAGEOBJECT path, int index);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDFPath_GetPathSegment/*'/>
		public static FPDF_PATHSEGMENT FPDFPath_GetPathSegment(FPDF_PAGEOBJECT path, int index)
		{

			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { return PlatformInvoke.FPDFPath_GetPathSegment_x64(path, index); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { return PlatformInvoke.FPDFPath_GetPathSegment_x86(path, index); }
			else
				throw new PlatformNotSupportedException();

		}

		#endregion


		#region FPDFPathSegment_GetPoint

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFPathSegment_GetPoint")]
			internal static extern bool FPDFPathSegment_GetPoint_x86(FPDF_PATHSEGMENT segment, out float x, out float y);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFPathSegment_GetPoint")]
			internal static extern bool FPDFPathSegment_GetPoint_x64(FPDF_PATHSEGMENT segment, out float x, out float y);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDFPathSegment_GetPoint/*'/>
		public static bool FPDFPathSegment_GetPoint(FPDF_PATHSEGMENT segment, out float x, out float y)
		{

			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { return PlatformInvoke.FPDFPathSegment_GetPoint_x64(segment, out x, out y); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { return PlatformInvoke.FPDFPathSegment_GetPoint_x86(segment, out x, out y); }
			else
				throw new PlatformNotSupportedException();

		}

		#endregion


		#region FPDFPathSegment_GetType

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFPathSegment_GetType")]
			internal static extern int FPDFPathSegment_GetType_x86(FPDF_PATHSEGMENT segment);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFPathSegment_GetType")]
			internal static extern int FPDFPathSegment_GetType_x64(FPDF_PATHSEGMENT segment);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDFPathSegment_GetType/*'/>
		public static int FPDFPathSegment_GetType(FPDF_PATHSEGMENT segment)
		{

			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { return PlatformInvoke.FPDFPathSegment_GetType_x64(segment); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { return PlatformInvoke.FPDFPathSegment_GetType_x86(segment); }
			else
				throw new PlatformNotSupportedException();

		}

		#endregion


		#region FPDFPathSegment_GetClose

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFPathSegment_GetClose")]
			internal static extern bool FPDFPathSegment_GetClose_x86(FPDF_PATHSEGMENT segment);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFPathSegment_GetClose")]
			internal static extern bool FPDFPathSegment_GetClose_x64(FPDF_PATHSEGMENT segment);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDFPathSegment_GetClose/*'/>
		public static bool FPDFPathSegment_GetClose(FPDF_PATHSEGMENT segment)
		{

			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { return PlatformInvoke.FPDFPathSegment_GetClose_x64(segment); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { return PlatformInvoke.FPDFPathSegment_GetClose_x86(segment); }
			else
				throw new PlatformNotSupportedException();

		}

		#endregion


		#region FPDFPath_MoveTo

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFPath_MoveTo")]
			internal static extern bool FPDFPath_MoveTo_x86(FPDF_PAGEOBJECT path, float x, float y);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFPath_MoveTo")]
			internal static extern bool FPDFPath_MoveTo_x64(FPDF_PAGEOBJECT path, float x, float y);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDFPath_MoveTo/*'/>
		public static bool FPDFPath_MoveTo(FPDF_PAGEOBJECT path, float x, float y)
		{

			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { return PlatformInvoke.FPDFPath_MoveTo_x64(path, x, y); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { return PlatformInvoke.FPDFPath_MoveTo_x86(path, x, y); }
			else
				throw new PlatformNotSupportedException();

		}

		#endregion


		#region FPDFPath_LineTo

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFPath_LineTo")]
			internal static extern bool FPDFPath_LineTo_x86(FPDF_PAGEOBJECT path, float x, float y);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFPath_LineTo")]
			internal static extern bool FPDFPath_LineTo_x64(FPDF_PAGEOBJECT path, float x, float y);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDFPath_LineTo/*'/>
		public static bool FPDFPath_LineTo(FPDF_PAGEOBJECT path, float x, float y)
		{

			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { return PlatformInvoke.FPDFPath_LineTo_x64(path, x, y); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { return PlatformInvoke.FPDFPath_LineTo_x86(path, x, y); }
			else
				throw new PlatformNotSupportedException();

		}

		#endregion


		#region FPDFPath_BezierTo

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFPath_BezierTo")]
			internal static extern bool FPDFPath_BezierTo_x86(FPDF_PAGEOBJECT path, float x1, float y1, float x2, float y2, float x3, float y3);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFPath_BezierTo")]
			internal static extern bool FPDFPath_BezierTo_x64(FPDF_PAGEOBJECT path, float x1, float y1, float x2, float y2, float x3, float y3);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDFPath_BezierTo/*'/>
		public static bool FPDFPath_BezierTo(FPDF_PAGEOBJECT path, float x1, float y1, float x2, float y2, float x3, float y3)
		{

			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { return PlatformInvoke.FPDFPath_BezierTo_x64(path, x1, y1, x2, y2, x3, y3); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { return PlatformInvoke.FPDFPath_BezierTo_x86(path, x1, y1, x2, y2, x3, y3); }
			else
				throw new PlatformNotSupportedException();

		}

		#endregion


		#region FPDFPath_Close

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFPath_Close")]
			internal static extern bool FPDFPath_Close_x86(FPDF_PAGEOBJECT path);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFPath_Close")]
			internal static extern bool FPDFPath_Close_x64(FPDF_PAGEOBJECT path);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDFPath_Close/*'/>
		public static bool FPDFPath_Close(FPDF_PAGEOBJECT path)
		{

			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { return PlatformInvoke.FPDFPath_Close_x64(path); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { return PlatformInvoke.FPDFPath_Close_x86(path); }
			else
				throw new PlatformNotSupportedException();

		}

		#endregion


		#region FPDFPath_SetDrawMode

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFPath_SetDrawMode")]
			internal static extern bool FPDFPath_SetDrawMode_x86(FPDF_PAGEOBJECT path, PathFillModes fillmode, bool stroke);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFPath_SetDrawMode")]
			internal static extern bool FPDFPath_SetDrawMode_x64(FPDF_PAGEOBJECT path, PathFillModes fillmode, bool stroke);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDFPath_SetDrawMode/*'/>
		public static bool FPDFPath_SetDrawMode(FPDF_PAGEOBJECT path, PathFillModes fillmode, bool stroke)
		{

			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { return PlatformInvoke.FPDFPath_SetDrawMode_x64(path, fillmode, stroke); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { return PlatformInvoke.FPDFPath_SetDrawMode_x86(path, fillmode, stroke); }
			else
				throw new PlatformNotSupportedException();

		}

		#endregion


		#region FPDFPath_GetDrawMode

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFPath_GetDrawMode")]
			internal static extern bool FPDFPath_GetDrawMode_x86(FPDF_PAGEOBJECT path, out PathFillModes fillmode, out bool stroke);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFPath_GetDrawMode")]
			internal static extern bool FPDFPath_GetDrawMode_x64(FPDF_PAGEOBJECT path, out PathFillModes fillmode, out bool stroke);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDFPath_GetDrawMode/*'/>
		public static bool FPDFPath_GetDrawMode(FPDF_PAGEOBJECT path, out PathFillModes fillmode, out bool stroke)
		{

			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { return PlatformInvoke.FPDFPath_GetDrawMode_x64(path, out fillmode, out stroke); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { return PlatformInvoke.FPDFPath_GetDrawMode_x86(path, out fillmode, out stroke); }
			else
				throw new PlatformNotSupportedException();

		}

		#endregion


		#region FPDFPageObj_NewTextObj

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFPageObj_NewTextObj")]
			internal static extern FPDF_PAGEOBJECT FPDFPageObj_NewTextObj_x86(FPDF_DOCUMENT document, [MarshalAs(UnmanagedType.LPStr)] string font, float font_size);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFPageObj_NewTextObj")]
			internal static extern FPDF_PAGEOBJECT FPDFPageObj_NewTextObj_x64(FPDF_DOCUMENT document, [MarshalAs(UnmanagedType.LPStr)] string font, float font_size);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDFPageObj_NewTextObj/*'/>
		public static FPDF_PAGEOBJECT FPDFPageObj_NewTextObj(FPDF_DOCUMENT document, [MarshalAs(UnmanagedType.LPStr)] string font, float font_size)
		{

			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { return PlatformInvoke.FPDFPageObj_NewTextObj_x64(document, font, font_size); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { return PlatformInvoke.FPDFPageObj_NewTextObj_x86(document, font, font_size); }
			else
				throw new PlatformNotSupportedException();

		}

		#endregion


		#region FPDFText_SetText

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFText_SetText")]
			internal static extern bool FPDFText_SetText_x86(FPDF_PAGEOBJECT text_object, [MarshalAs(UnmanagedType.LPWStr)] string text);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFText_SetText")]
			internal static extern bool FPDFText_SetText_x64(FPDF_PAGEOBJECT text_object, [MarshalAs(UnmanagedType.LPWStr)] string text);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDFText_SetText/*'/>
		public static bool FPDFText_SetText(FPDF_PAGEOBJECT text_object, [MarshalAs(UnmanagedType.LPWStr)] string text)
		{

			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { return PlatformInvoke.FPDFText_SetText_x64(text_object, text); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { return PlatformInvoke.FPDFText_SetText_x86(text_object, text); }
			else
				throw new PlatformNotSupportedException();

		}

		#endregion


		#region FPDFText_SetCharcodes

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFText_SetCharcodes")]
			internal static extern bool FPDFText_SetCharcodes_x86(FPDF_PAGEOBJECT text_object, ref uint charcodes, uint count);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFText_SetCharcodes")]
			internal static extern bool FPDFText_SetCharcodes_x64(FPDF_PAGEOBJECT text_object, ref uint charcodes, uint count);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDFText_SetCharcodes/*'/>
		public static bool FPDFText_SetCharcodes(FPDF_PAGEOBJECT text_object, ref uint charcodes, uint count)
		{

			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { return PlatformInvoke.FPDFText_SetCharcodes_x64(text_object, ref charcodes, count); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { return PlatformInvoke.FPDFText_SetCharcodes_x86(text_object, ref charcodes, count); }
			else
				throw new PlatformNotSupportedException();

		}

		#endregion


		#region FPDFText_LoadFont

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFText_LoadFont")]
			internal static extern FPDF_FONT FPDFText_LoadFont_x86(FPDF_DOCUMENT document, ref byte data, uint size, FontTypes font_type, bool cid);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFText_LoadFont")]
			internal static extern FPDF_FONT FPDFText_LoadFont_x64(FPDF_DOCUMENT document, ref byte data, uint size, FontTypes font_type, bool cid);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDFText_LoadFont/*'/>
		private static FPDF_FONT FPDFText_LoadFont(FPDF_DOCUMENT document, ref byte data, uint size, FontTypes font_type, bool cid)
		{

			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { return PlatformInvoke.FPDFText_LoadFont_x64(document, ref data, size, font_type, cid); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { return PlatformInvoke.FPDFText_LoadFont_x86(document, ref data, size, font_type, cid); }
			else
				throw new PlatformNotSupportedException();

		}

		#endregion


		#region FPDFText_LoadStandardFont

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFText_LoadStandardFont")]
			internal static extern FPDF_FONT FPDFText_LoadStandardFont_x86(FPDF_DOCUMENT document, [MarshalAs(UnmanagedType.LPStr)] string font);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFText_LoadStandardFont")]
			internal static extern FPDF_FONT FPDFText_LoadStandardFont_x64(FPDF_DOCUMENT document, [MarshalAs(UnmanagedType.LPStr)] string font);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDFText_LoadStandardFont/*'/>
		public static FPDF_FONT FPDFText_LoadStandardFont(FPDF_DOCUMENT document, [MarshalAs(UnmanagedType.LPStr)] string font)
		{

			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { return PlatformInvoke.FPDFText_LoadStandardFont_x64(document, font); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { return PlatformInvoke.FPDFText_LoadStandardFont_x86(document, font); }
			else
				throw new PlatformNotSupportedException();

		}

		#endregion


		#region FPDFTextObj_GetFontSize

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFTextObj_GetFontSize")]
			internal static extern bool FPDFTextObj_GetFontSize_x86(FPDF_PAGEOBJECT text, out float size);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFTextObj_GetFontSize")]
			internal static extern bool FPDFTextObj_GetFontSize_x64(FPDF_PAGEOBJECT text, out float size);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDFTextObj_GetFontSize/*'/>
		public static bool FPDFTextObj_GetFontSize(FPDF_PAGEOBJECT text, out float size)
		{

			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { return PlatformInvoke.FPDFTextObj_GetFontSize_x64(text, out size); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { return PlatformInvoke.FPDFTextObj_GetFontSize_x86(text, out size); }
			else
				throw new PlatformNotSupportedException();

		}

		#endregion


		#region FPDFFont_Close

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFFont_Close")]
			internal static extern void FPDFFont_Close_x86(FPDF_FONT font);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFFont_Close")]
			internal static extern void FPDFFont_Close_x64(FPDF_FONT font);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDFFont_Close/*'/>
		public static void FPDFFont_Close(FPDF_FONT font)
		{

			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { PlatformInvoke.FPDFFont_Close_x64(font); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { PlatformInvoke.FPDFFont_Close_x86(font); }
			else
				throw new PlatformNotSupportedException();

		}

		#endregion


		#region FPDFPageObj_CreateTextObj

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFPageObj_CreateTextObj")]
			internal static extern FPDF_PAGEOBJECT FPDFPageObj_CreateTextObj_x86(FPDF_DOCUMENT document, FPDF_FONT font, float font_size);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFPageObj_CreateTextObj")]
			internal static extern FPDF_PAGEOBJECT FPDFPageObj_CreateTextObj_x64(FPDF_DOCUMENT document, FPDF_FONT font, float font_size);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDFPageObj_CreateTextObj/*'/>
		public static FPDF_PAGEOBJECT FPDFPageObj_CreateTextObj(FPDF_DOCUMENT document, FPDF_FONT font, float font_size)
		{

			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { return PlatformInvoke.FPDFPageObj_CreateTextObj_x64(document, font, font_size); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { return PlatformInvoke.FPDFPageObj_CreateTextObj_x86(document, font, font_size); }
			else
				throw new PlatformNotSupportedException();

		}

		#endregion


		#region FPDFTextObj_GetTextRenderMode

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFTextObj_GetTextRenderMode")]
			internal static extern FPDF_TEXT_RENDERMODE FPDFTextObj_GetTextRenderMode_x86(FPDF_PAGEOBJECT text);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFTextObj_GetTextRenderMode")]
			internal static extern FPDF_TEXT_RENDERMODE FPDFTextObj_GetTextRenderMode_x64(FPDF_PAGEOBJECT text);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDFTextObj_GetTextRenderMode/*'/>
		public static FPDF_TEXT_RENDERMODE FPDFTextObj_GetTextRenderMode(FPDF_PAGEOBJECT text)
		{

			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { return PlatformInvoke.FPDFTextObj_GetTextRenderMode_x64(text); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { return PlatformInvoke.FPDFTextObj_GetTextRenderMode_x86(text); }
			else
				throw new PlatformNotSupportedException();

		}

		#endregion


		#region FPDFTextObj_SetTextRenderMode

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFTextObj_SetTextRenderMode")]
			internal static extern bool FPDFTextObj_SetTextRenderMode_x86(FPDF_PAGEOBJECT text, FPDF_TEXT_RENDERMODE render_mode);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFTextObj_SetTextRenderMode")]
			internal static extern bool FPDFTextObj_SetTextRenderMode_x64(FPDF_PAGEOBJECT text, FPDF_TEXT_RENDERMODE render_mode);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDFTextObj_SetTextRenderMode/*'/>
		public static bool FPDFTextObj_SetTextRenderMode(FPDF_PAGEOBJECT text, FPDF_TEXT_RENDERMODE render_mode)
		{

			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { return PlatformInvoke.FPDFTextObj_SetTextRenderMode_x64(text, render_mode); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { return PlatformInvoke.FPDFTextObj_SetTextRenderMode_x86(text, render_mode); }
			else
				throw new PlatformNotSupportedException();

		}

		#endregion


		#region FPDFTextObj_GetText

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFTextObj_GetText")]
			internal static extern ulong FPDFTextObj_GetText_x86(FPDF_PAGEOBJECT text_object, FPDF_TEXTPAGE text_page, out FPDF_WCHAR buffer, ulong length);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFTextObj_GetText")]
			internal static extern ulong FPDFTextObj_GetText_x64(FPDF_PAGEOBJECT text_object, FPDF_TEXTPAGE text_page, out FPDF_WCHAR buffer, ulong length);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDFTextObj_GetText/*'/>
		public static ulong FPDFTextObj_GetText(FPDF_PAGEOBJECT text_object, FPDF_TEXTPAGE text_page, out FPDF_WCHAR buffer, ulong length)
		{

			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { return PlatformInvoke.FPDFTextObj_GetText_x64(text_object, text_page, out buffer, length); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { return PlatformInvoke.FPDFTextObj_GetText_x86(text_object, text_page, out buffer, length); }
			else
				throw new PlatformNotSupportedException();

		}

		#endregion


		#region FPDFTextObj_GetRenderedBitmap

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFTextObj_GetRenderedBitmap")]
			internal static extern FPDF_BITMAP FPDFTextObj_GetRenderedBitmap_x86(FPDF_DOCUMENT document, FPDF_PAGE page, FPDF_PAGEOBJECT text_object, float scale);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFTextObj_GetRenderedBitmap")]
			internal static extern FPDF_BITMAP FPDFTextObj_GetRenderedBitmap_x64(FPDF_DOCUMENT document, FPDF_PAGE page, FPDF_PAGEOBJECT text_object, float scale);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDFTextObj_GetRenderedBitmap/*'/>
		public static FPDF_BITMAP FPDFTextObj_GetRenderedBitmap(FPDF_DOCUMENT document, FPDF_PAGE page, FPDF_PAGEOBJECT text_object, float scale)
		{

			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { return PlatformInvoke.FPDFTextObj_GetRenderedBitmap_x64(document, page, text_object, scale); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { return PlatformInvoke.FPDFTextObj_GetRenderedBitmap_x86(document, page, text_object, scale); }
			else
				throw new PlatformNotSupportedException();

		}

		#endregion


		#region FPDFTextObj_GetFont

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFTextObj_GetFont")]
			internal static extern FPDF_FONT FPDFTextObj_GetFont_x86(FPDF_PAGEOBJECT text);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFTextObj_GetFont")]
			internal static extern FPDF_FONT FPDFTextObj_GetFont_x64(FPDF_PAGEOBJECT text);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDFTextObj_GetFont/*'/>
		public static FPDF_FONT FPDFTextObj_GetFont(FPDF_PAGEOBJECT text)
		{

			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { return PlatformInvoke.FPDFTextObj_GetFont_x64(text); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { return PlatformInvoke.FPDFTextObj_GetFont_x86(text); }
			else
				throw new PlatformNotSupportedException();

		}

		#endregion


		#region FPDFFont_GetFontName

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFFont_GetFontName")]
			internal static extern ulong FPDFFont_GetFontName_x86(FPDF_FONT font, ref byte buffer, ulong length);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFFont_GetFontName")]
			internal static extern ulong FPDFFont_GetFontName_x64(FPDF_FONT font, ref byte buffer, ulong length);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDFFont_GetFontName/*'/>
		public static ulong FPDFFont_GetFontName(FPDF_FONT font, ref byte buffer, ulong length)
		{

			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { return PlatformInvoke.FPDFFont_GetFontName_x64(font, ref buffer, length); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { return PlatformInvoke.FPDFFont_GetFontName_x86(font, ref buffer, length); }
			else
				throw new PlatformNotSupportedException();

		}

		#endregion


		#region FPDFFont_GetFontData

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFFont_GetFontData")]
			internal static extern bool FPDFFont_GetFontData_x86(FPDF_FONT font, ref byte buffer, uint buflen, out uint out_buflen);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFFont_GetFontData")]
			internal static extern bool FPDFFont_GetFontData_x64(FPDF_FONT font, ref byte buffer, uint buflen, out uint out_buflen);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDFFont_GetFontData/*'/>
		public static bool FPDFFont_GetFontData(FPDF_FONT font, ref byte buffer, uint buflen, out uint out_buflen)
		{

			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { return PlatformInvoke.FPDFFont_GetFontData_x64(font, ref buffer, buflen, out out_buflen); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { return PlatformInvoke.FPDFFont_GetFontData_x86(font, ref buffer, buflen, out out_buflen); }
			else
				throw new PlatformNotSupportedException();

		}

		#endregion


		#region FPDFFont_GetIsEmbedded

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFFont_GetIsEmbedded")]
			internal static extern int FPDFFont_GetIsEmbedded_x86(FPDF_FONT font);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFFont_GetIsEmbedded")]
			internal static extern int FPDFFont_GetIsEmbedded_x64(FPDF_FONT font);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDFFont_GetIsEmbedded/*'/>
		public static int FPDFFont_GetIsEmbedded(FPDF_FONT font)
		{

			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { return PlatformInvoke.FPDFFont_GetIsEmbedded_x64(font); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { return PlatformInvoke.FPDFFont_GetIsEmbedded_x86(font); }
			else
				throw new PlatformNotSupportedException();

		}

		#endregion


		#region FPDFFont_GetFlags

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFFont_GetFlags")]
			internal static extern int FPDFFont_GetFlags_x86(FPDF_FONT font);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFFont_GetFlags")]
			internal static extern int FPDFFont_GetFlags_x64(FPDF_FONT font);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDFFont_GetFlags/*'/>
		public static int FPDFFont_GetFlags(FPDF_FONT font)
		{

			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { return PlatformInvoke.FPDFFont_GetFlags_x64(font); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { return PlatformInvoke.FPDFFont_GetFlags_x86(font); }
			else
				throw new PlatformNotSupportedException();

		}

		#endregion


		#region FPDFFont_GetWeight

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFFont_GetWeight")]
			internal static extern int FPDFFont_GetWeight_x86(FPDF_FONT font);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFFont_GetWeight")]
			internal static extern int FPDFFont_GetWeight_x64(FPDF_FONT font);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDFFont_GetWeight/*'/>
		public static int FPDFFont_GetWeight(FPDF_FONT font)
		{

			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { return PlatformInvoke.FPDFFont_GetWeight_x64(font); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { return PlatformInvoke.FPDFFont_GetWeight_x86(font); }
			else
				throw new PlatformNotSupportedException();

		}

		#endregion


		#region FPDFFont_GetItalicAngle

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFFont_GetItalicAngle")]
			internal static extern bool FPDFFont_GetItalicAngle_x86(FPDF_FONT font, out int angle);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFFont_GetItalicAngle")]
			internal static extern bool FPDFFont_GetItalicAngle_x64(FPDF_FONT font, out int angle);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDFFont_GetItalicAngle/*'/>
		public static bool FPDFFont_GetItalicAngle(FPDF_FONT font, out int angle)
		{

			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { return PlatformInvoke.FPDFFont_GetItalicAngle_x64(font, out angle); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { return PlatformInvoke.FPDFFont_GetItalicAngle_x86(font, out angle); }
			else
				throw new PlatformNotSupportedException();

		}

		#endregion


		#region FPDFFont_GetAscent

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFFont_GetAscent")]
			internal static extern bool FPDFFont_GetAscent_x86(FPDF_FONT font, float font_size, out float ascent);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFFont_GetAscent")]
			internal static extern bool FPDFFont_GetAscent_x64(FPDF_FONT font, float font_size, out float ascent);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDFFont_GetAscent/*'/>
		public static bool FPDFFont_GetAscent(FPDF_FONT font, float font_size, out float ascent)
		{

			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { return PlatformInvoke.FPDFFont_GetAscent_x64(font, font_size, out ascent); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { return PlatformInvoke.FPDFFont_GetAscent_x86(font, font_size, out ascent); }
			else
				throw new PlatformNotSupportedException();

		}

		#endregion


		#region FPDFFont_GetDescent

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFFont_GetDescent")]
			internal static extern bool FPDFFont_GetDescent_x86(FPDF_FONT font, float font_size, out float descent);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFFont_GetDescent")]
			internal static extern bool FPDFFont_GetDescent_x64(FPDF_FONT font, float font_size, out float descent);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDFFont_GetDescent/*'/>
		public static bool FPDFFont_GetDescent(FPDF_FONT font, float font_size, out float descent)
		{

			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { return PlatformInvoke.FPDFFont_GetDescent_x64(font, font_size, out descent); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { return PlatformInvoke.FPDFFont_GetDescent_x86(font, font_size, out descent); }
			else
				throw new PlatformNotSupportedException();

		}

		#endregion


		#region FPDFFont_GetGlyphWidth

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFFont_GetGlyphWidth")]
			internal static extern bool FPDFFont_GetGlyphWidth_x86(FPDF_FONT font, uint glyph, float font_size, out float width);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFFont_GetGlyphWidth")]
			internal static extern bool FPDFFont_GetGlyphWidth_x64(FPDF_FONT font, uint glyph, float font_size, out float width);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDFFont_GetGlyphWidth/*'/>
		public static bool FPDFFont_GetGlyphWidth(FPDF_FONT font, uint glyph, float font_size, out float width)
		{

			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { return PlatformInvoke.FPDFFont_GetGlyphWidth_x64(font, glyph, font_size, out width); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { return PlatformInvoke.FPDFFont_GetGlyphWidth_x86(font, glyph, font_size, out width); }
			else
				throw new PlatformNotSupportedException();

		}

		#endregion


		#region FPDFFont_GetGlyphPath

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFFont_GetGlyphPath")]
			internal static extern FPDF_GLYPHPATH FPDFFont_GetGlyphPath_x86(FPDF_FONT font, uint glyph, float font_size);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFFont_GetGlyphPath")]
			internal static extern FPDF_GLYPHPATH FPDFFont_GetGlyphPath_x64(FPDF_FONT font, uint glyph, float font_size);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDFFont_GetGlyphPath/*'/>
		public static FPDF_GLYPHPATH FPDFFont_GetGlyphPath(FPDF_FONT font, uint glyph, float font_size)
		{

			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { return PlatformInvoke.FPDFFont_GetGlyphPath_x64(font, glyph, font_size); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { return PlatformInvoke.FPDFFont_GetGlyphPath_x86(font, glyph, font_size); }
			else
				throw new PlatformNotSupportedException();

		}

		#endregion


		#region FPDFGlyphPath_CountGlyphSegments

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFGlyphPath_CountGlyphSegments")]
			internal static extern int FPDFGlyphPath_CountGlyphSegments_x86(FPDF_GLYPHPATH glyphpath);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFGlyphPath_CountGlyphSegments")]
			internal static extern int FPDFGlyphPath_CountGlyphSegments_x64(FPDF_GLYPHPATH glyphpath);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDFGlyphPath_CountGlyphSegments/*'/>
		public static int FPDFGlyphPath_CountGlyphSegments(FPDF_GLYPHPATH glyphpath)
		{

			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { return PlatformInvoke.FPDFGlyphPath_CountGlyphSegments_x64(glyphpath); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { return PlatformInvoke.FPDFGlyphPath_CountGlyphSegments_x86(glyphpath); }
			else
				throw new PlatformNotSupportedException();

		}

		#endregion


		#region FPDFGlyphPath_GetGlyphPathSegment

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFGlyphPath_GetGlyphPathSegment")]
			internal static extern FPDF_PATHSEGMENT FPDFGlyphPath_GetGlyphPathSegment_x86(FPDF_GLYPHPATH glyphpath, int index);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFGlyphPath_GetGlyphPathSegment")]
			internal static extern FPDF_PATHSEGMENT FPDFGlyphPath_GetGlyphPathSegment_x64(FPDF_GLYPHPATH glyphpath, int index);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDFGlyphPath_GetGlyphPathSegment/*'/>
		public static FPDF_PATHSEGMENT FPDFGlyphPath_GetGlyphPathSegment(FPDF_GLYPHPATH glyphpath, int index)
		{

			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { return PlatformInvoke.FPDFGlyphPath_GetGlyphPathSegment_x64(glyphpath, index); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { return PlatformInvoke.FPDFGlyphPath_GetGlyphPathSegment_x86(glyphpath, index); }
			else
				throw new PlatformNotSupportedException();

		}

		#endregion


		#region FPDFFormObj_CountObjects

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFFormObj_CountObjects")]
			internal static extern int FPDFFormObj_CountObjects_x86(FPDF_PAGEOBJECT form_object);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFFormObj_CountObjects")]
			internal static extern int FPDFFormObj_CountObjects_x64(FPDF_PAGEOBJECT form_object);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDFFormObj_CountObjects/*'/>
		public static int FPDFFormObj_CountObjects(FPDF_PAGEOBJECT form_object)
		{

			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { return PlatformInvoke.FPDFFormObj_CountObjects_x64(form_object); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { return PlatformInvoke.FPDFFormObj_CountObjects_x86(form_object); }
			else
				throw new PlatformNotSupportedException();

		}

		#endregion


		#region FPDFFormObj_GetObject

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFFormObj_GetObject")]
			internal static extern FPDF_PAGEOBJECT FPDFFormObj_GetObject_x86(FPDF_PAGEOBJECT form_object, ulong index);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFFormObj_GetObject")]
			internal static extern FPDF_PAGEOBJECT FPDFFormObj_GetObject_x64(FPDF_PAGEOBJECT form_object, ulong index);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDFFormObj_GetObject/*'/>
		public static FPDF_PAGEOBJECT FPDFFormObj_GetObject(FPDF_PAGEOBJECT form_object, ulong index)
		{

			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { return PlatformInvoke.FPDFFormObj_GetObject_x64(form_object, index); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { return PlatformInvoke.FPDFFormObj_GetObject_x86(form_object, index); }
			else
				throw new PlatformNotSupportedException();

		}

		#endregion


		#region FSDK_SetUnSpObjProcessHandler

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FSDK_SetUnSpObjProcessHandler")]
			internal static extern bool FSDK_SetUnSpObjProcessHandler_x86(UNSUPPORT_INFO unsp_info);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FSDK_SetUnSpObjProcessHandler")]
			internal static extern bool FSDK_SetUnSpObjProcessHandler_x64(UNSUPPORT_INFO unsp_info);
		}

		/// <include file='PDFium.xml' path='Documentation/FSDK_SetUnSpObjProcessHandler/*'/>
		public static bool FSDK_SetUnSpObjProcessHandler(UNSUPPORT_INFO unsp_info)
		{

			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { return PlatformInvoke.FSDK_SetUnSpObjProcessHandler_x64(unsp_info); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { return PlatformInvoke.FSDK_SetUnSpObjProcessHandler_x86(unsp_info); }
			else
				throw new PlatformNotSupportedException();

		}

		#endregion


		#region FPDFDoc_GetPageMode

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFDoc_GetPageMode")]
			internal static extern PageModes FPDFDoc_GetPageMode_x86(FPDF_DOCUMENT document);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFDoc_GetPageMode")]
			internal static extern PageModes FPDFDoc_GetPageMode_x64(FPDF_DOCUMENT document);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDFDoc_GetPageMode/*'/>
		/// <seealso cref='PdfDocument.PageMode'/>
		public static PageModes FPDFDoc_GetPageMode(FPDF_DOCUMENT document)
		{

			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { return PlatformInvoke.FPDFDoc_GetPageMode_x64(document); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { return PlatformInvoke.FPDFDoc_GetPageMode_x86(document); }
			else
				throw new PlatformNotSupportedException();

		}

		#endregion


		#region FPDFPage_Flatten

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFPage_Flatten")]
			internal static extern FlattenResults FPDFPage_Flatten_x86(FPDF_PAGE page, FlattenFlags nFlag);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFPage_Flatten")]
			internal static extern FlattenResults FPDFPage_Flatten_x64(FPDF_PAGE page, FlattenFlags nFlag);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDFPage_Flatten/*'/>
		/// <seealso cref='PdfPage.Flatten(FlattenFlags)'/>
		public static FlattenResults FPDFPage_Flatten(FPDF_PAGE page, FlattenFlags nFlag)
		{

			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { return PlatformInvoke.FPDFPage_Flatten_x64(page, nFlag); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { return PlatformInvoke.FPDFPage_Flatten_x86(page, nFlag); }
			else
				throw new PlatformNotSupportedException();

		}

		#endregion


		#region FPDF_ImportPagesByIndex

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDF_ImportPagesByIndex")]
			internal static extern bool FPDF_ImportPagesByIndex_x86(FPDF_DOCUMENT dest_doc, FPDF_DOCUMENT src_doc, ref int page_indices, ulong length, int index);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDF_ImportPagesByIndex")]
			internal static extern bool FPDF_ImportPagesByIndex_x64(FPDF_DOCUMENT dest_doc, FPDF_DOCUMENT src_doc, ref int page_indices, ulong length, int index);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDF_ImportPagesByIndex/*'/>
		public static bool FPDF_ImportPagesByIndex(FPDF_DOCUMENT dest_doc, FPDF_DOCUMENT src_doc, ref int page_indices, ulong length, int index)
		{

			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { return PlatformInvoke.FPDF_ImportPagesByIndex_x64(dest_doc, src_doc, ref page_indices, length, index); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { return PlatformInvoke.FPDF_ImportPagesByIndex_x86(dest_doc, src_doc, ref page_indices, length, index); }
			else
				throw new PlatformNotSupportedException();

		}

		#endregion


		#region FPDF_ImportPages

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDF_ImportPages")]
			internal static extern bool FPDF_ImportPages_x86(FPDF_DOCUMENT dest_doc, FPDF_DOCUMENT src_doc, [MarshalAs(UnmanagedType.LPStr)] string pagerange, int index);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDF_ImportPages")]
			internal static extern bool FPDF_ImportPages_x64(FPDF_DOCUMENT dest_doc, FPDF_DOCUMENT src_doc, [MarshalAs(UnmanagedType.LPStr)] string pagerange, int index);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDF_ImportPages/*'/>
		/// <seealso cref='PdfPageCollection.Insert(int, PdfDocument, int[])'/>
		/// <seealso cref='PdfPageCollection.Add(PdfDocument, int[])'/>
		/// <seealso cref='PdfDocument.Pages'/>
		public static bool FPDF_ImportPages(FPDF_DOCUMENT dest_doc, FPDF_DOCUMENT src_doc, [MarshalAs(UnmanagedType.LPStr)] string pagerange, int index)
		{

			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { return PlatformInvoke.FPDF_ImportPages_x64(dest_doc, src_doc, pagerange, index); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { return PlatformInvoke.FPDF_ImportPages_x86(dest_doc, src_doc, pagerange, index); }
			else
				throw new PlatformNotSupportedException();

		}

		#endregion


		#region FPDF_ImportNPagesToOne

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDF_ImportNPagesToOne")]
			internal static extern FPDF_DOCUMENT FPDF_ImportNPagesToOne_x86(FPDF_DOCUMENT src_doc, float output_width, float output_height, uint num_pages_on_x_axis, uint num_pages_on_y_axis);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDF_ImportNPagesToOne")]
			internal static extern FPDF_DOCUMENT FPDF_ImportNPagesToOne_x64(FPDF_DOCUMENT src_doc, float output_width, float output_height, uint num_pages_on_x_axis, uint num_pages_on_y_axis);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDF_ImportNPagesToOne/*'/>
		public static FPDF_DOCUMENT FPDF_ImportNPagesToOne(FPDF_DOCUMENT src_doc, float output_width, float output_height, uint num_pages_on_x_axis, uint num_pages_on_y_axis)
		{

			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { return PlatformInvoke.FPDF_ImportNPagesToOne_x64(src_doc, output_width, output_height, num_pages_on_x_axis, num_pages_on_y_axis); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { return PlatformInvoke.FPDF_ImportNPagesToOne_x86(src_doc, output_width, output_height, num_pages_on_x_axis, num_pages_on_y_axis); }
			else
				throw new PlatformNotSupportedException();

		}

		#endregion


		#region FPDF_NewXObjectFromPage

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDF_NewXObjectFromPage")]
			internal static extern FPDF_XOBJECT FPDF_NewXObjectFromPage_x86(FPDF_DOCUMENT dest_doc, FPDF_DOCUMENT src_doc, int src_page_index);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDF_NewXObjectFromPage")]
			internal static extern FPDF_XOBJECT FPDF_NewXObjectFromPage_x64(FPDF_DOCUMENT dest_doc, FPDF_DOCUMENT src_doc, int src_page_index);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDF_NewXObjectFromPage/*'/>
		public static FPDF_XOBJECT FPDF_NewXObjectFromPage(FPDF_DOCUMENT dest_doc, FPDF_DOCUMENT src_doc, int src_page_index)
		{

			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { return PlatformInvoke.FPDF_NewXObjectFromPage_x64(dest_doc, src_doc, src_page_index); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { return PlatformInvoke.FPDF_NewXObjectFromPage_x86(dest_doc, src_doc, src_page_index); }
			else
				throw new PlatformNotSupportedException();

		}

		#endregion


		#region FPDF_CloseXObject

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDF_CloseXObject")]
			internal static extern void FPDF_CloseXObject_x86(FPDF_XOBJECT xobject);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDF_CloseXObject")]
			internal static extern void FPDF_CloseXObject_x64(FPDF_XOBJECT xobject);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDF_CloseXObject/*'/>
		public static void FPDF_CloseXObject(FPDF_XOBJECT xobject)
		{

			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { PlatformInvoke.FPDF_CloseXObject_x64(xobject); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { PlatformInvoke.FPDF_CloseXObject_x86(xobject); }
			else
				throw new PlatformNotSupportedException();

		}

		#endregion


		#region FPDF_NewFormObjectFromXObject

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDF_NewFormObjectFromXObject")]
			internal static extern FPDF_PAGEOBJECT FPDF_NewFormObjectFromXObject_x86(FPDF_XOBJECT xobject);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDF_NewFormObjectFromXObject")]
			internal static extern FPDF_PAGEOBJECT FPDF_NewFormObjectFromXObject_x64(FPDF_XOBJECT xobject);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDF_NewFormObjectFromXObject/*'/>
		public static FPDF_PAGEOBJECT FPDF_NewFormObjectFromXObject(FPDF_XOBJECT xobject)
		{

			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { return PlatformInvoke.FPDF_NewFormObjectFromXObject_x64(xobject); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { return PlatformInvoke.FPDF_NewFormObjectFromXObject_x86(xobject); }
			else
				throw new PlatformNotSupportedException();

		}

		#endregion


		#region FPDF_CopyViewerPreferences

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDF_CopyViewerPreferences")]
			internal static extern bool FPDF_CopyViewerPreferences_x86(FPDF_DOCUMENT dest_doc, FPDF_DOCUMENT src_doc);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDF_CopyViewerPreferences")]
			internal static extern bool FPDF_CopyViewerPreferences_x64(FPDF_DOCUMENT dest_doc, FPDF_DOCUMENT src_doc);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDF_CopyViewerPreferences/*'/>
		/// <seealso cref='PdfDocument.CopyViewerPreferencesFrom(PdfDocument)'/>
		public static bool FPDF_CopyViewerPreferences(FPDF_DOCUMENT dest_doc, FPDF_DOCUMENT src_doc)
		{

			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { return PlatformInvoke.FPDF_CopyViewerPreferences_x64(dest_doc, src_doc); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { return PlatformInvoke.FPDF_CopyViewerPreferences_x86(dest_doc, src_doc); }
			else
				throw new PlatformNotSupportedException();

		}

		#endregion


		#region FPDF_RenderPageBitmapWithColorScheme_Start

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDF_RenderPageBitmapWithColorScheme_Start")]
			internal static extern RenderingStatus FPDF_RenderPageBitmapWithColorScheme_Start_x86(FPDF_BITMAP bitmap, FPDF_PAGE page, int start_x, int start_y, int size_x, int size_y, PageOrientations rotate, RenderingFlags flags, ref FPDF_COLORSCHEME color_scheme, IFSDK_PAUSE pause);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDF_RenderPageBitmapWithColorScheme_Start")]
			internal static extern RenderingStatus FPDF_RenderPageBitmapWithColorScheme_Start_x64(FPDF_BITMAP bitmap, FPDF_PAGE page, int start_x, int start_y, int size_x, int size_y, PageOrientations rotate, RenderingFlags flags, ref FPDF_COLORSCHEME color_scheme, IFSDK_PAUSE pause);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDF_RenderPageBitmapWithColorScheme_Start/*'/>
		public static RenderingStatus FPDF_RenderPageBitmapWithColorScheme_Start(FPDF_BITMAP bitmap, FPDF_PAGE page, int start_x, int start_y, int size_x, int size_y, PageOrientations rotate, RenderingFlags flags, ref FPDF_COLORSCHEME color_scheme, IFSDK_PAUSE pause)
		{

			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { return PlatformInvoke.FPDF_RenderPageBitmapWithColorScheme_Start_x64(bitmap, page, start_x, start_y, size_x, size_y, rotate, flags, ref color_scheme, pause); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { return PlatformInvoke.FPDF_RenderPageBitmapWithColorScheme_Start_x86(bitmap, page, start_x, start_y, size_x, size_y, rotate, flags, ref color_scheme, pause); }
			else
				throw new PlatformNotSupportedException();

		}

		#endregion


		#region FPDF_RenderPageBitmap_Start

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDF_RenderPageBitmap_Start")]
			internal static extern RenderingStatus FPDF_RenderPageBitmap_Start_x86(FPDF_BITMAP bitmap, FPDF_PAGE page, int start_x, int start_y, int size_x, int size_y, PageOrientations rotate, RenderingFlags flags, IFSDK_PAUSE pause);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDF_RenderPageBitmap_Start")]
			internal static extern RenderingStatus FPDF_RenderPageBitmap_Start_x64(FPDF_BITMAP bitmap, FPDF_PAGE page, int start_x, int start_y, int size_x, int size_y, PageOrientations rotate, RenderingFlags flags, IFSDK_PAUSE pause);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDF_RenderPageBitmap_Start/*'/>
		public static RenderingStatus FPDF_RenderPageBitmap_Start(FPDF_BITMAP bitmap, FPDF_PAGE page, int start_x, int start_y, int size_x, int size_y, PageOrientations rotate, RenderingFlags flags, IFSDK_PAUSE pause)
		{

			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { return PlatformInvoke.FPDF_RenderPageBitmap_Start_x64(bitmap, page, start_x, start_y, size_x, size_y, rotate, flags, pause); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { return PlatformInvoke.FPDF_RenderPageBitmap_Start_x86(bitmap, page, start_x, start_y, size_x, size_y, rotate, flags, pause); }
			else
				throw new PlatformNotSupportedException();

		}

		#endregion


		#region FPDF_RenderPage_Continue

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDF_RenderPage_Continue")]
			internal static extern RenderingStatus FPDF_RenderPage_Continue_x86(FPDF_PAGE page, IFSDK_PAUSE pause);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDF_RenderPage_Continue")]
			internal static extern RenderingStatus FPDF_RenderPage_Continue_x64(FPDF_PAGE page, IFSDK_PAUSE pause);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDF_RenderPage_Continue/*'/>
		public static RenderingStatus FPDF_RenderPage_Continue(FPDF_PAGE page, IFSDK_PAUSE pause)
		{

			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { return PlatformInvoke.FPDF_RenderPage_Continue_x64(page, pause); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { return PlatformInvoke.FPDF_RenderPage_Continue_x86(page, pause); }
			else
				throw new PlatformNotSupportedException();

		}

		#endregion


		#region FPDF_RenderPage_Close

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDF_RenderPage_Close")]
			internal static extern void FPDF_RenderPage_Close_x86(FPDF_PAGE page);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDF_RenderPage_Close")]
			internal static extern void FPDF_RenderPage_Close_x64(FPDF_PAGE page);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDF_RenderPage_Close/*'/>
		public static void FPDF_RenderPage_Close(FPDF_PAGE page)
		{

			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { PlatformInvoke.FPDF_RenderPage_Close_x64(page); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { PlatformInvoke.FPDF_RenderPage_Close_x86(page); }
			else
				throw new PlatformNotSupportedException();

		}

		#endregion


		#region FPDF_SaveAsCopy

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDF_SaveAsCopy")]
			internal static extern bool FPDF_SaveAsCopy_x86(FPDF_DOCUMENT document, FPDF_FILEWRITE fileWrite, SaveFlags flags);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDF_SaveAsCopy")]
			internal static extern bool FPDF_SaveAsCopy_x64(FPDF_DOCUMENT document, FPDF_FILEWRITE fileWrite, SaveFlags flags);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDF_SaveAsCopy/*'/>
		/// <seealso cref='PDFium.FPDF_SaveAsCopy(FPDF_DOCUMENT, Stream, SaveFlags, int)'/>
		/// <seealso cref='PdfDocument.Save(Stream, SaveFlags, int)'/>
		public static bool FPDF_SaveAsCopy(FPDF_DOCUMENT document, FPDF_FILEWRITE fileWrite, SaveFlags flags)
		{

			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { return PlatformInvoke.FPDF_SaveAsCopy_x64(document, fileWrite, flags); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { return PlatformInvoke.FPDF_SaveAsCopy_x86(document, fileWrite, flags); }
			else
				throw new PlatformNotSupportedException();

		}

		#endregion


		#region FPDF_SaveWithVersion

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDF_SaveWithVersion")]
			internal static extern bool FPDF_SaveWithVersion_x86(FPDF_DOCUMENT document, FPDF_FILEWRITE fileWrite, SaveFlags flags, int fileVersion);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDF_SaveWithVersion")]
			internal static extern bool FPDF_SaveWithVersion_x64(FPDF_DOCUMENT document, FPDF_FILEWRITE fileWrite, SaveFlags flags, int fileVersion);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDF_SaveWithVersion/*'/>
		/// <seealso cref='PDFium.FPDF_SaveAsCopy(FPDF_DOCUMENT, Stream, SaveFlags, int)'/>
		/// <seealso cref='PdfDocument.Save(Stream, SaveFlags, int)'/>
		public static bool FPDF_SaveWithVersion(FPDF_DOCUMENT document, FPDF_FILEWRITE fileWrite, SaveFlags flags, int fileVersion)
		{

			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { return PlatformInvoke.FPDF_SaveWithVersion_x64(document, fileWrite, flags, fileVersion); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { return PlatformInvoke.FPDF_SaveWithVersion_x86(document, fileWrite, flags, fileVersion); }
			else
				throw new PlatformNotSupportedException();

		}

		#endregion


		#region FPDFText_GetCharIndexFromTextIndex

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFText_GetCharIndexFromTextIndex")]
			internal static extern int FPDFText_GetCharIndexFromTextIndex_x86(FPDF_TEXTPAGE text_page, int nTextIndex);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFText_GetCharIndexFromTextIndex")]
			internal static extern int FPDFText_GetCharIndexFromTextIndex_x64(FPDF_TEXTPAGE text_page, int nTextIndex);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDFText_GetCharIndexFromTextIndex/*'/>
		public static int FPDFText_GetCharIndexFromTextIndex(FPDF_TEXTPAGE text_page, int nTextIndex)
		{

			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { return PlatformInvoke.FPDFText_GetCharIndexFromTextIndex_x64(text_page, nTextIndex); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { return PlatformInvoke.FPDFText_GetCharIndexFromTextIndex_x86(text_page, nTextIndex); }
			else
				throw new PlatformNotSupportedException();

		}

		#endregion


		#region FPDFText_GetTextIndexFromCharIndex

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFText_GetTextIndexFromCharIndex")]
			internal static extern int FPDFText_GetTextIndexFromCharIndex_x86(FPDF_TEXTPAGE text_page, int nCharIndex);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFText_GetTextIndexFromCharIndex")]
			internal static extern int FPDFText_GetTextIndexFromCharIndex_x64(FPDF_TEXTPAGE text_page, int nCharIndex);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDFText_GetTextIndexFromCharIndex/*'/>
		public static int FPDFText_GetTextIndexFromCharIndex(FPDF_TEXTPAGE text_page, int nCharIndex)
		{

			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { return PlatformInvoke.FPDFText_GetTextIndexFromCharIndex_x64(text_page, nCharIndex); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { return PlatformInvoke.FPDFText_GetTextIndexFromCharIndex_x86(text_page, nCharIndex); }
			else
				throw new PlatformNotSupportedException();

		}

		#endregion


		#region FPDF_StructTree_GetForPage

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDF_StructTree_GetForPage")]
			internal static extern FPDF_STRUCTTREE FPDF_StructTree_GetForPage_x86(FPDF_PAGE page);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDF_StructTree_GetForPage")]
			internal static extern FPDF_STRUCTTREE FPDF_StructTree_GetForPage_x64(FPDF_PAGE page);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDF_StructTree_GetForPage/*'/>
		public static FPDF_STRUCTTREE FPDF_StructTree_GetForPage(FPDF_PAGE page)
		{

			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { return PlatformInvoke.FPDF_StructTree_GetForPage_x64(page); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { return PlatformInvoke.FPDF_StructTree_GetForPage_x86(page); }
			else
				throw new PlatformNotSupportedException();

		}

		#endregion


		#region FPDF_StructTree_Close

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDF_StructTree_Close")]
			internal static extern void FPDF_StructTree_Close_x86(FPDF_STRUCTTREE struct_tree);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDF_StructTree_Close")]
			internal static extern void FPDF_StructTree_Close_x64(FPDF_STRUCTTREE struct_tree);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDF_StructTree_Close/*'/>
		public static void FPDF_StructTree_Close(FPDF_STRUCTTREE struct_tree)
		{

			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { PlatformInvoke.FPDF_StructTree_Close_x64(struct_tree); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { PlatformInvoke.FPDF_StructTree_Close_x86(struct_tree); }
			else
				throw new PlatformNotSupportedException();

		}

		#endregion


		#region FPDF_StructTree_CountChildren

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDF_StructTree_CountChildren")]
			internal static extern int FPDF_StructTree_CountChildren_x86(FPDF_STRUCTTREE struct_tree);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDF_StructTree_CountChildren")]
			internal static extern int FPDF_StructTree_CountChildren_x64(FPDF_STRUCTTREE struct_tree);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDF_StructTree_CountChildren/*'/>
		public static int FPDF_StructTree_CountChildren(FPDF_STRUCTTREE struct_tree)
		{

			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { return PlatformInvoke.FPDF_StructTree_CountChildren_x64(struct_tree); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { return PlatformInvoke.FPDF_StructTree_CountChildren_x86(struct_tree); }
			else
				throw new PlatformNotSupportedException();

		}

		#endregion


		#region FPDF_StructTree_GetChildAtIndex

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDF_StructTree_GetChildAtIndex")]
			internal static extern FPDF_STRUCTELEMENT FPDF_StructTree_GetChildAtIndex_x86(FPDF_STRUCTTREE struct_tree, int index);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDF_StructTree_GetChildAtIndex")]
			internal static extern FPDF_STRUCTELEMENT FPDF_StructTree_GetChildAtIndex_x64(FPDF_STRUCTTREE struct_tree, int index);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDF_StructTree_GetChildAtIndex/*'/>
		public static FPDF_STRUCTELEMENT FPDF_StructTree_GetChildAtIndex(FPDF_STRUCTTREE struct_tree, int index)
		{

			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { return PlatformInvoke.FPDF_StructTree_GetChildAtIndex_x64(struct_tree, index); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { return PlatformInvoke.FPDF_StructTree_GetChildAtIndex_x86(struct_tree, index); }
			else
				throw new PlatformNotSupportedException();

		}

		#endregion


		#region FPDF_StructElement_GetAltText

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDF_StructElement_GetAltText")]
			internal static extern ulong FPDF_StructElement_GetAltText_x86(FPDF_STRUCTELEMENT struct_element, ref byte buffer, ulong buflen);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDF_StructElement_GetAltText")]
			internal static extern ulong FPDF_StructElement_GetAltText_x64(FPDF_STRUCTELEMENT struct_element, ref byte buffer, ulong buflen);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDF_StructElement_GetAltText/*'/>
		public static ulong FPDF_StructElement_GetAltText(FPDF_STRUCTELEMENT struct_element, ref byte buffer, ulong buflen)
		{

			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { return PlatformInvoke.FPDF_StructElement_GetAltText_x64(struct_element, ref buffer, buflen); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { return PlatformInvoke.FPDF_StructElement_GetAltText_x86(struct_element, ref buffer, buflen); }
			else
				throw new PlatformNotSupportedException();

		}

		#endregion


		#region FPDF_StructElement_GetActualText

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDF_StructElement_GetActualText")]
			internal static extern ulong FPDF_StructElement_GetActualText_x86(FPDF_STRUCTELEMENT struct_element, ref byte buffer, ulong buflen);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDF_StructElement_GetActualText")]
			internal static extern ulong FPDF_StructElement_GetActualText_x64(FPDF_STRUCTELEMENT struct_element, ref byte buffer, ulong buflen);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDF_StructElement_GetActualText/*'/>
		public static ulong FPDF_StructElement_GetActualText(FPDF_STRUCTELEMENT struct_element, ref byte buffer, ulong buflen)
		{

			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { return PlatformInvoke.FPDF_StructElement_GetActualText_x64(struct_element, ref buffer, buflen); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { return PlatformInvoke.FPDF_StructElement_GetActualText_x86(struct_element, ref buffer, buflen); }
			else
				throw new PlatformNotSupportedException();

		}

		#endregion


		#region FPDF_StructElement_GetID

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDF_StructElement_GetID")]
			internal static extern ulong FPDF_StructElement_GetID_x86(FPDF_STRUCTELEMENT struct_element, ref byte buffer, ulong buflen);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDF_StructElement_GetID")]
			internal static extern ulong FPDF_StructElement_GetID_x64(FPDF_STRUCTELEMENT struct_element, ref byte buffer, ulong buflen);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDF_StructElement_GetID/*'/>
		public static ulong FPDF_StructElement_GetID(FPDF_STRUCTELEMENT struct_element, ref byte buffer, ulong buflen)
		{

			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { return PlatformInvoke.FPDF_StructElement_GetID_x64(struct_element, ref buffer, buflen); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { return PlatformInvoke.FPDF_StructElement_GetID_x86(struct_element, ref buffer, buflen); }
			else
				throw new PlatformNotSupportedException();

		}

		#endregion


		#region FPDF_StructElement_GetLang

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDF_StructElement_GetLang")]
			internal static extern ulong FPDF_StructElement_GetLang_x86(FPDF_STRUCTELEMENT struct_element, ref byte buffer, ulong buflen);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDF_StructElement_GetLang")]
			internal static extern ulong FPDF_StructElement_GetLang_x64(FPDF_STRUCTELEMENT struct_element, ref byte buffer, ulong buflen);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDF_StructElement_GetLang/*'/>
		public static ulong FPDF_StructElement_GetLang(FPDF_STRUCTELEMENT struct_element, ref byte buffer, ulong buflen)
		{

			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { return PlatformInvoke.FPDF_StructElement_GetLang_x64(struct_element, ref buffer, buflen); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { return PlatformInvoke.FPDF_StructElement_GetLang_x86(struct_element, ref buffer, buflen); }
			else
				throw new PlatformNotSupportedException();

		}

		#endregion


		#region FPDF_StructElement_GetStringAttribute

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDF_StructElement_GetStringAttribute")]
			internal static extern ulong FPDF_StructElement_GetStringAttribute_x86(FPDF_STRUCTELEMENT struct_element, [MarshalAs(UnmanagedType.LPStr)] string attr_name, ref byte buffer, ulong buflen);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDF_StructElement_GetStringAttribute")]
			internal static extern ulong FPDF_StructElement_GetStringAttribute_x64(FPDF_STRUCTELEMENT struct_element, [MarshalAs(UnmanagedType.LPStr)] string attr_name, ref byte buffer, ulong buflen);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDF_StructElement_GetStringAttribute/*'/>
		public static ulong FPDF_StructElement_GetStringAttribute(FPDF_STRUCTELEMENT struct_element, [MarshalAs(UnmanagedType.LPStr)] string attr_name, ref byte buffer, ulong buflen)
		{

			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { return PlatformInvoke.FPDF_StructElement_GetStringAttribute_x64(struct_element, attr_name, ref buffer, buflen); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { return PlatformInvoke.FPDF_StructElement_GetStringAttribute_x86(struct_element, attr_name, ref buffer, buflen); }
			else
				throw new PlatformNotSupportedException();

		}

		#endregion


		#region FPDF_StructElement_GetMarkedContentID

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDF_StructElement_GetMarkedContentID")]
			internal static extern int FPDF_StructElement_GetMarkedContentID_x86(FPDF_STRUCTELEMENT struct_element);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDF_StructElement_GetMarkedContentID")]
			internal static extern int FPDF_StructElement_GetMarkedContentID_x64(FPDF_STRUCTELEMENT struct_element);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDF_StructElement_GetMarkedContentID/*'/>
		public static int FPDF_StructElement_GetMarkedContentID(FPDF_STRUCTELEMENT struct_element)
		{

			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { return PlatformInvoke.FPDF_StructElement_GetMarkedContentID_x64(struct_element); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { return PlatformInvoke.FPDF_StructElement_GetMarkedContentID_x86(struct_element); }
			else
				throw new PlatformNotSupportedException();

		}

		#endregion


		#region FPDF_StructElement_GetType

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDF_StructElement_GetType")]
			internal static extern ulong FPDF_StructElement_GetType_x86(FPDF_STRUCTELEMENT struct_element, ref byte buffer, ulong buflen);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDF_StructElement_GetType")]
			internal static extern ulong FPDF_StructElement_GetType_x64(FPDF_STRUCTELEMENT struct_element, ref byte buffer, ulong buflen);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDF_StructElement_GetType/*'/>
		public static ulong FPDF_StructElement_GetType(FPDF_STRUCTELEMENT struct_element, ref byte buffer, ulong buflen)
		{

			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { return PlatformInvoke.FPDF_StructElement_GetType_x64(struct_element, ref buffer, buflen); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { return PlatformInvoke.FPDF_StructElement_GetType_x86(struct_element, ref buffer, buflen); }
			else
				throw new PlatformNotSupportedException();

		}

		#endregion


		#region FPDF_StructElement_GetObjType

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDF_StructElement_GetObjType")]
			internal static extern ulong FPDF_StructElement_GetObjType_x86(FPDF_STRUCTELEMENT struct_element, ref byte buffer, ulong buflen);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDF_StructElement_GetObjType")]
			internal static extern ulong FPDF_StructElement_GetObjType_x64(FPDF_STRUCTELEMENT struct_element, ref byte buffer, ulong buflen);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDF_StructElement_GetObjType/*'/>
		public static ulong FPDF_StructElement_GetObjType(FPDF_STRUCTELEMENT struct_element, ref byte buffer, ulong buflen)
		{

			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { return PlatformInvoke.FPDF_StructElement_GetObjType_x64(struct_element, ref buffer, buflen); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { return PlatformInvoke.FPDF_StructElement_GetObjType_x86(struct_element, ref buffer, buflen); }
			else
				throw new PlatformNotSupportedException();

		}

		#endregion


		#region FPDF_StructElement_GetTitle

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDF_StructElement_GetTitle")]
			internal static extern ulong FPDF_StructElement_GetTitle_x86(FPDF_STRUCTELEMENT struct_element, ref byte buffer, ulong buflen);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDF_StructElement_GetTitle")]
			internal static extern ulong FPDF_StructElement_GetTitle_x64(FPDF_STRUCTELEMENT struct_element, ref byte buffer, ulong buflen);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDF_StructElement_GetTitle/*'/>
		public static ulong FPDF_StructElement_GetTitle(FPDF_STRUCTELEMENT struct_element, ref byte buffer, ulong buflen)
		{

			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { return PlatformInvoke.FPDF_StructElement_GetTitle_x64(struct_element, ref buffer, buflen); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { return PlatformInvoke.FPDF_StructElement_GetTitle_x86(struct_element, ref buffer, buflen); }
			else
				throw new PlatformNotSupportedException();

		}

		#endregion


		#region FPDF_StructElement_CountChildren

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDF_StructElement_CountChildren")]
			internal static extern int FPDF_StructElement_CountChildren_x86(FPDF_STRUCTELEMENT struct_element);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDF_StructElement_CountChildren")]
			internal static extern int FPDF_StructElement_CountChildren_x64(FPDF_STRUCTELEMENT struct_element);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDF_StructElement_CountChildren/*'/>
		public static int FPDF_StructElement_CountChildren(FPDF_STRUCTELEMENT struct_element)
		{

			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { return PlatformInvoke.FPDF_StructElement_CountChildren_x64(struct_element); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { return PlatformInvoke.FPDF_StructElement_CountChildren_x86(struct_element); }
			else
				throw new PlatformNotSupportedException();

		}

		#endregion


		#region FPDF_StructElement_GetChildAtIndex

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDF_StructElement_GetChildAtIndex")]
			internal static extern FPDF_STRUCTELEMENT FPDF_StructElement_GetChildAtIndex_x86(FPDF_STRUCTELEMENT struct_element, int index);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDF_StructElement_GetChildAtIndex")]
			internal static extern FPDF_STRUCTELEMENT FPDF_StructElement_GetChildAtIndex_x64(FPDF_STRUCTELEMENT struct_element, int index);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDF_StructElement_GetChildAtIndex/*'/>
		public static FPDF_STRUCTELEMENT FPDF_StructElement_GetChildAtIndex(FPDF_STRUCTELEMENT struct_element, int index)
		{

			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { return PlatformInvoke.FPDF_StructElement_GetChildAtIndex_x64(struct_element, index); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { return PlatformInvoke.FPDF_StructElement_GetChildAtIndex_x86(struct_element, index); }
			else
				throw new PlatformNotSupportedException();

		}

		#endregion


		#region FPDF_StructElement_GetChildMarkedContentID

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDF_StructElement_GetChildMarkedContentID")]
			internal static extern int FPDF_StructElement_GetChildMarkedContentID_x86(FPDF_STRUCTELEMENT struct_element, int index);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDF_StructElement_GetChildMarkedContentID")]
			internal static extern int FPDF_StructElement_GetChildMarkedContentID_x64(FPDF_STRUCTELEMENT struct_element, int index);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDF_StructElement_GetChildMarkedContentID/*'/>
		public static int FPDF_StructElement_GetChildMarkedContentID(FPDF_STRUCTELEMENT struct_element, int index)
		{

			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { return PlatformInvoke.FPDF_StructElement_GetChildMarkedContentID_x64(struct_element, index); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { return PlatformInvoke.FPDF_StructElement_GetChildMarkedContentID_x86(struct_element, index); }
			else
				throw new PlatformNotSupportedException();

		}

		#endregion


		#region FPDF_StructElement_GetParent

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDF_StructElement_GetParent")]
			internal static extern FPDF_STRUCTELEMENT FPDF_StructElement_GetParent_x86(FPDF_STRUCTELEMENT struct_element);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDF_StructElement_GetParent")]
			internal static extern FPDF_STRUCTELEMENT FPDF_StructElement_GetParent_x64(FPDF_STRUCTELEMENT struct_element);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDF_StructElement_GetParent/*'/>
		public static FPDF_STRUCTELEMENT FPDF_StructElement_GetParent(FPDF_STRUCTELEMENT struct_element)
		{

			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { return PlatformInvoke.FPDF_StructElement_GetParent_x64(struct_element); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { return PlatformInvoke.FPDF_StructElement_GetParent_x86(struct_element); }
			else
				throw new PlatformNotSupportedException();

		}

		#endregion


		#region FPDF_StructElement_GetAttributeCount

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDF_StructElement_GetAttributeCount")]
			internal static extern int FPDF_StructElement_GetAttributeCount_x86(FPDF_STRUCTELEMENT struct_element);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDF_StructElement_GetAttributeCount")]
			internal static extern int FPDF_StructElement_GetAttributeCount_x64(FPDF_STRUCTELEMENT struct_element);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDF_StructElement_GetAttributeCount/*'/>
		public static int FPDF_StructElement_GetAttributeCount(FPDF_STRUCTELEMENT struct_element)
		{

			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { return PlatformInvoke.FPDF_StructElement_GetAttributeCount_x64(struct_element); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { return PlatformInvoke.FPDF_StructElement_GetAttributeCount_x86(struct_element); }
			else
				throw new PlatformNotSupportedException();

		}

		#endregion


		#region FPDF_StructElement_GetAttributeAtIndex

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDF_StructElement_GetAttributeAtIndex")]
			internal static extern FPDF_STRUCTELEMENT_ATTR FPDF_StructElement_GetAttributeAtIndex_x86(FPDF_STRUCTELEMENT struct_element, int index);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDF_StructElement_GetAttributeAtIndex")]
			internal static extern FPDF_STRUCTELEMENT_ATTR FPDF_StructElement_GetAttributeAtIndex_x64(FPDF_STRUCTELEMENT struct_element, int index);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDF_StructElement_GetAttributeAtIndex/*'/>
		public static FPDF_STRUCTELEMENT_ATTR FPDF_StructElement_GetAttributeAtIndex(FPDF_STRUCTELEMENT struct_element, int index)
		{

			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { return PlatformInvoke.FPDF_StructElement_GetAttributeAtIndex_x64(struct_element, index); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { return PlatformInvoke.FPDF_StructElement_GetAttributeAtIndex_x86(struct_element, index); }
			else
				throw new PlatformNotSupportedException();

		}

		#endregion


		#region FPDF_StructElement_Attr_GetCount

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDF_StructElement_Attr_GetCount")]
			internal static extern int FPDF_StructElement_Attr_GetCount_x86(FPDF_STRUCTELEMENT_ATTR struct_attribute);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDF_StructElement_Attr_GetCount")]
			internal static extern int FPDF_StructElement_Attr_GetCount_x64(FPDF_STRUCTELEMENT_ATTR struct_attribute);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDF_StructElement_Attr_GetCount/*'/>
		public static int FPDF_StructElement_Attr_GetCount(FPDF_STRUCTELEMENT_ATTR struct_attribute)
		{

			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { return PlatformInvoke.FPDF_StructElement_Attr_GetCount_x64(struct_attribute); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { return PlatformInvoke.FPDF_StructElement_Attr_GetCount_x86(struct_attribute); }
			else
				throw new PlatformNotSupportedException();

		}

		#endregion


		#region FPDF_StructElement_Attr_GetName

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDF_StructElement_Attr_GetName")]
			internal static extern bool FPDF_StructElement_Attr_GetName_x86(FPDF_STRUCTELEMENT_ATTR struct_attribute, int index, ref byte buffer, ulong buflen, out ulong out_buflen);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDF_StructElement_Attr_GetName")]
			internal static extern bool FPDF_StructElement_Attr_GetName_x64(FPDF_STRUCTELEMENT_ATTR struct_attribute, int index, ref byte buffer, ulong buflen, out ulong out_buflen);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDF_StructElement_Attr_GetName/*'/>
		public static bool FPDF_StructElement_Attr_GetName(FPDF_STRUCTELEMENT_ATTR struct_attribute, int index, ref byte buffer, ulong buflen, out ulong out_buflen)
		{

			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { return PlatformInvoke.FPDF_StructElement_Attr_GetName_x64(struct_attribute, index, ref buffer, buflen, out out_buflen); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { return PlatformInvoke.FPDF_StructElement_Attr_GetName_x86(struct_attribute, index, ref buffer, buflen, out out_buflen); }
			else
				throw new PlatformNotSupportedException();

		}

		#endregion


		#region FPDF_StructElement_Attr_GetType

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDF_StructElement_Attr_GetType")]
			internal static extern FPDF_OBJECT_TYPE FPDF_StructElement_Attr_GetType_x86(FPDF_STRUCTELEMENT_ATTR struct_attribute, [MarshalAs(UnmanagedType.LPStr)] string name);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDF_StructElement_Attr_GetType")]
			internal static extern FPDF_OBJECT_TYPE FPDF_StructElement_Attr_GetType_x64(FPDF_STRUCTELEMENT_ATTR struct_attribute, [MarshalAs(UnmanagedType.LPStr)] string name);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDF_StructElement_Attr_GetType/*'/>
		public static FPDF_OBJECT_TYPE FPDF_StructElement_Attr_GetType(FPDF_STRUCTELEMENT_ATTR struct_attribute, [MarshalAs(UnmanagedType.LPStr)] string name)
		{

			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { return PlatformInvoke.FPDF_StructElement_Attr_GetType_x64(struct_attribute, name); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { return PlatformInvoke.FPDF_StructElement_Attr_GetType_x86(struct_attribute, name); }
			else
				throw new PlatformNotSupportedException();

		}

		#endregion


		#region FPDF_StructElement_Attr_GetBooleanValue

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDF_StructElement_Attr_GetBooleanValue")]
			internal static extern bool FPDF_StructElement_Attr_GetBooleanValue_x86(FPDF_STRUCTELEMENT_ATTR struct_attribute, [MarshalAs(UnmanagedType.LPStr)] string name, out bool out_value);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDF_StructElement_Attr_GetBooleanValue")]
			internal static extern bool FPDF_StructElement_Attr_GetBooleanValue_x64(FPDF_STRUCTELEMENT_ATTR struct_attribute, [MarshalAs(UnmanagedType.LPStr)] string name, out bool out_value);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDF_StructElement_Attr_GetBooleanValue/*'/>
		public static bool FPDF_StructElement_Attr_GetBooleanValue(FPDF_STRUCTELEMENT_ATTR struct_attribute, [MarshalAs(UnmanagedType.LPStr)] string name, out bool out_value)
		{

			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { return PlatformInvoke.FPDF_StructElement_Attr_GetBooleanValue_x64(struct_attribute, name, out out_value); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { return PlatformInvoke.FPDF_StructElement_Attr_GetBooleanValue_x86(struct_attribute, name, out out_value); }
			else
				throw new PlatformNotSupportedException();

		}

		#endregion


		#region FPDF_StructElement_Attr_GetNumberValue

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDF_StructElement_Attr_GetNumberValue")]
			internal static extern bool FPDF_StructElement_Attr_GetNumberValue_x86(FPDF_STRUCTELEMENT_ATTR struct_attribute, [MarshalAs(UnmanagedType.LPStr)] string name, out float out_value);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDF_StructElement_Attr_GetNumberValue")]
			internal static extern bool FPDF_StructElement_Attr_GetNumberValue_x64(FPDF_STRUCTELEMENT_ATTR struct_attribute, [MarshalAs(UnmanagedType.LPStr)] string name, out float out_value);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDF_StructElement_Attr_GetNumberValue/*'/>
		public static bool FPDF_StructElement_Attr_GetNumberValue(FPDF_STRUCTELEMENT_ATTR struct_attribute, [MarshalAs(UnmanagedType.LPStr)] string name, out float out_value)
		{

			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { return PlatformInvoke.FPDF_StructElement_Attr_GetNumberValue_x64(struct_attribute, name, out out_value); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { return PlatformInvoke.FPDF_StructElement_Attr_GetNumberValue_x86(struct_attribute, name, out out_value); }
			else
				throw new PlatformNotSupportedException();

		}

		#endregion


		#region FPDF_StructElement_Attr_GetStringValue

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDF_StructElement_Attr_GetStringValue")]
			internal static extern bool FPDF_StructElement_Attr_GetStringValue_x86(FPDF_STRUCTELEMENT_ATTR struct_attribute, [MarshalAs(UnmanagedType.LPStr)] string name, ref byte buffer, ulong buflen, out ulong out_buflen);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDF_StructElement_Attr_GetStringValue")]
			internal static extern bool FPDF_StructElement_Attr_GetStringValue_x64(FPDF_STRUCTELEMENT_ATTR struct_attribute, [MarshalAs(UnmanagedType.LPStr)] string name, ref byte buffer, ulong buflen, out ulong out_buflen);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDF_StructElement_Attr_GetStringValue/*'/>
		public static bool FPDF_StructElement_Attr_GetStringValue(FPDF_STRUCTELEMENT_ATTR struct_attribute, [MarshalAs(UnmanagedType.LPStr)] string name, ref byte buffer, ulong buflen, out ulong out_buflen)
		{

			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { return PlatformInvoke.FPDF_StructElement_Attr_GetStringValue_x64(struct_attribute, name, ref buffer, buflen, out out_buflen); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { return PlatformInvoke.FPDF_StructElement_Attr_GetStringValue_x86(struct_attribute, name, ref buffer, buflen, out out_buflen); }
			else
				throw new PlatformNotSupportedException();

		}

		#endregion


		#region FPDF_StructElement_Attr_GetBlobValue

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDF_StructElement_Attr_GetBlobValue")]
			internal static extern bool FPDF_StructElement_Attr_GetBlobValue_x86(FPDF_STRUCTELEMENT_ATTR struct_attribute, [MarshalAs(UnmanagedType.LPStr)] string name, ref byte buffer, ulong buflen, out ulong out_buflen);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDF_StructElement_Attr_GetBlobValue")]
			internal static extern bool FPDF_StructElement_Attr_GetBlobValue_x64(FPDF_STRUCTELEMENT_ATTR struct_attribute, [MarshalAs(UnmanagedType.LPStr)] string name, ref byte buffer, ulong buflen, out ulong out_buflen);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDF_StructElement_Attr_GetBlobValue/*'/>
		public static bool FPDF_StructElement_Attr_GetBlobValue(FPDF_STRUCTELEMENT_ATTR struct_attribute, [MarshalAs(UnmanagedType.LPStr)] string name, ref byte buffer, ulong buflen, out ulong out_buflen)
		{

			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { return PlatformInvoke.FPDF_StructElement_Attr_GetBlobValue_x64(struct_attribute, name, ref buffer, buflen, out out_buflen); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { return PlatformInvoke.FPDF_StructElement_Attr_GetBlobValue_x86(struct_attribute, name, ref buffer, buflen, out out_buflen); }
			else
				throw new PlatformNotSupportedException();

		}

		#endregion


		#region FPDF_StructElement_GetMarkedContentIdCount

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDF_StructElement_GetMarkedContentIdCount")]
			internal static extern int FPDF_StructElement_GetMarkedContentIdCount_x86(FPDF_STRUCTELEMENT struct_element);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDF_StructElement_GetMarkedContentIdCount")]
			internal static extern int FPDF_StructElement_GetMarkedContentIdCount_x64(FPDF_STRUCTELEMENT struct_element);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDF_StructElement_GetMarkedContentIdCount/*'/>
		public static int FPDF_StructElement_GetMarkedContentIdCount(FPDF_STRUCTELEMENT struct_element)
		{

			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { return PlatformInvoke.FPDF_StructElement_GetMarkedContentIdCount_x64(struct_element); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { return PlatformInvoke.FPDF_StructElement_GetMarkedContentIdCount_x86(struct_element); }
			else
				throw new PlatformNotSupportedException();

		}

		#endregion


		#region FPDF_StructElement_GetMarkedContentIdAtIndex

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDF_StructElement_GetMarkedContentIdAtIndex")]
			internal static extern int FPDF_StructElement_GetMarkedContentIdAtIndex_x86(FPDF_STRUCTELEMENT struct_element, int index);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDF_StructElement_GetMarkedContentIdAtIndex")]
			internal static extern int FPDF_StructElement_GetMarkedContentIdAtIndex_x64(FPDF_STRUCTELEMENT struct_element, int index);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDF_StructElement_GetMarkedContentIdAtIndex/*'/>
		public static int FPDF_StructElement_GetMarkedContentIdAtIndex(FPDF_STRUCTELEMENT struct_element, int index)
		{

			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { return PlatformInvoke.FPDF_StructElement_GetMarkedContentIdAtIndex_x64(struct_element, index); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { return PlatformInvoke.FPDF_StructElement_GetMarkedContentIdAtIndex_x86(struct_element, index); }
			else
				throw new PlatformNotSupportedException();

		}

		#endregion


		#region FPDFText_LoadPage

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFText_LoadPage")]
			internal static extern FPDF_TEXTPAGE FPDFText_LoadPage_x86(FPDF_PAGE page);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFText_LoadPage")]
			internal static extern FPDF_TEXTPAGE FPDFText_LoadPage_x64(FPDF_PAGE page);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDFText_LoadPage/*'/>
		public static FPDF_TEXTPAGE FPDFText_LoadPage(FPDF_PAGE page)
		{

			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { return PlatformInvoke.FPDFText_LoadPage_x64(page); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { return PlatformInvoke.FPDFText_LoadPage_x86(page); }
			else
				throw new PlatformNotSupportedException();

		}

		#endregion


		#region FPDFText_ClosePage

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFText_ClosePage")]
			internal static extern void FPDFText_ClosePage_x86(FPDF_TEXTPAGE text_page);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFText_ClosePage")]
			internal static extern void FPDFText_ClosePage_x64(FPDF_TEXTPAGE text_page);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDFText_ClosePage/*'/>
		public static void FPDFText_ClosePage(FPDF_TEXTPAGE text_page)
		{

			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { PlatformInvoke.FPDFText_ClosePage_x64(text_page); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { PlatformInvoke.FPDFText_ClosePage_x86(text_page); }
			else
				throw new PlatformNotSupportedException();

		}

		#endregion


		#region FPDFText_CountChars

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFText_CountChars")]
			internal static extern int FPDFText_CountChars_x86(FPDF_TEXTPAGE text_page);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFText_CountChars")]
			internal static extern int FPDFText_CountChars_x64(FPDF_TEXTPAGE text_page);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDFText_CountChars/*'/>
		public static int FPDFText_CountChars(FPDF_TEXTPAGE text_page)
		{

			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { return PlatformInvoke.FPDFText_CountChars_x64(text_page); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { return PlatformInvoke.FPDFText_CountChars_x86(text_page); }
			else
				throw new PlatformNotSupportedException();

		}

		#endregion


		#region FPDFText_GetUnicode

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFText_GetUnicode")]
			[return: MarshalAs(UnmanagedType.U4)]
			internal static extern char FPDFText_GetUnicode_x86(FPDF_TEXTPAGE text_page, int index);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFText_GetUnicode")]
			[return: MarshalAs(UnmanagedType.U4)]
			internal static extern char FPDFText_GetUnicode_x64(FPDF_TEXTPAGE text_page, int index);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDFText_GetUnicode/*'/>
		public static char FPDFText_GetUnicode(FPDF_TEXTPAGE text_page, int index)
		{

			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { return PlatformInvoke.FPDFText_GetUnicode_x64(text_page, index); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { return PlatformInvoke.FPDFText_GetUnicode_x86(text_page, index); }
			else
				throw new PlatformNotSupportedException();

		}

		#endregion


		#region FPDFText_IsGenerated

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFText_IsGenerated")]
			internal static extern int FPDFText_IsGenerated_x86(FPDF_TEXTPAGE text_page, int index);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFText_IsGenerated")]
			internal static extern int FPDFText_IsGenerated_x64(FPDF_TEXTPAGE text_page, int index);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDFText_IsGenerated/*'/>
		public static int FPDFText_IsGenerated(FPDF_TEXTPAGE text_page, int index)
		{

			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { return PlatformInvoke.FPDFText_IsGenerated_x64(text_page, index); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { return PlatformInvoke.FPDFText_IsGenerated_x86(text_page, index); }
			else
				throw new PlatformNotSupportedException();

		}

		#endregion


		#region FPDFText_IsHyphen

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFText_IsHyphen")]
			internal static extern int FPDFText_IsHyphen_x86(FPDF_TEXTPAGE text_page, int index);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFText_IsHyphen")]
			internal static extern int FPDFText_IsHyphen_x64(FPDF_TEXTPAGE text_page, int index);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDFText_IsHyphen/*'/>
		public static int FPDFText_IsHyphen(FPDF_TEXTPAGE text_page, int index)
		{

			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { return PlatformInvoke.FPDFText_IsHyphen_x64(text_page, index); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { return PlatformInvoke.FPDFText_IsHyphen_x86(text_page, index); }
			else
				throw new PlatformNotSupportedException();

		}

		#endregion


		#region FPDFText_HasUnicodeMapError

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFText_HasUnicodeMapError")]
			internal static extern int FPDFText_HasUnicodeMapError_x86(FPDF_TEXTPAGE text_page, int index);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFText_HasUnicodeMapError")]
			internal static extern int FPDFText_HasUnicodeMapError_x64(FPDF_TEXTPAGE text_page, int index);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDFText_HasUnicodeMapError/*'/>
		public static int FPDFText_HasUnicodeMapError(FPDF_TEXTPAGE text_page, int index)
		{

			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { return PlatformInvoke.FPDFText_HasUnicodeMapError_x64(text_page, index); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { return PlatformInvoke.FPDFText_HasUnicodeMapError_x86(text_page, index); }
			else
				throw new PlatformNotSupportedException();

		}

		#endregion


		#region FPDFText_GetFontSize

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFText_GetFontSize")]
			internal static extern double FPDFText_GetFontSize_x86(FPDF_TEXTPAGE text_page, int index);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFText_GetFontSize")]
			internal static extern double FPDFText_GetFontSize_x64(FPDF_TEXTPAGE text_page, int index);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDFText_GetFontSize/*'/>
		public static double FPDFText_GetFontSize(FPDF_TEXTPAGE text_page, int index)
		{

			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { return PlatformInvoke.FPDFText_GetFontSize_x64(text_page, index); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { return PlatformInvoke.FPDFText_GetFontSize_x86(text_page, index); }
			else
				throw new PlatformNotSupportedException();

		}

		#endregion


		#region FPDFText_GetFontInfo

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFText_GetFontInfo")]
			internal static extern ulong FPDFText_GetFontInfo_x86(FPDF_TEXTPAGE text_page, int index, ref byte buffer, ulong buflen, out int flags);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFText_GetFontInfo")]
			internal static extern ulong FPDFText_GetFontInfo_x64(FPDF_TEXTPAGE text_page, int index, ref byte buffer, ulong buflen, out int flags);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDFText_GetFontInfo/*'/>
		public static ulong FPDFText_GetFontInfo(FPDF_TEXTPAGE text_page, int index, ref byte buffer, ulong buflen, out int flags)
		{

			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { return PlatformInvoke.FPDFText_GetFontInfo_x64(text_page, index, ref buffer, buflen, out flags); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { return PlatformInvoke.FPDFText_GetFontInfo_x86(text_page, index, ref buffer, buflen, out flags); }
			else
				throw new PlatformNotSupportedException();

		}

		#endregion


		#region FPDFText_GetFontWeight

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFText_GetFontWeight")]
			internal static extern int FPDFText_GetFontWeight_x86(FPDF_TEXTPAGE text_page, int index);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFText_GetFontWeight")]
			internal static extern int FPDFText_GetFontWeight_x64(FPDF_TEXTPAGE text_page, int index);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDFText_GetFontWeight/*'/>
		public static int FPDFText_GetFontWeight(FPDF_TEXTPAGE text_page, int index)
		{

			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { return PlatformInvoke.FPDFText_GetFontWeight_x64(text_page, index); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { return PlatformInvoke.FPDFText_GetFontWeight_x86(text_page, index); }
			else
				throw new PlatformNotSupportedException();

		}

		#endregion


		#region FPDFText_GetTextRenderMode

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFText_GetTextRenderMode")]
			internal static extern FPDF_TEXT_RENDERMODE FPDFText_GetTextRenderMode_x86(FPDF_TEXTPAGE text_page, int index);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFText_GetTextRenderMode")]
			internal static extern FPDF_TEXT_RENDERMODE FPDFText_GetTextRenderMode_x64(FPDF_TEXTPAGE text_page, int index);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDFText_GetTextRenderMode/*'/>
		public static FPDF_TEXT_RENDERMODE FPDFText_GetTextRenderMode(FPDF_TEXTPAGE text_page, int index)
		{

			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { return PlatformInvoke.FPDFText_GetTextRenderMode_x64(text_page, index); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { return PlatformInvoke.FPDFText_GetTextRenderMode_x86(text_page, index); }
			else
				throw new PlatformNotSupportedException();

		}

		#endregion


		#region FPDFText_GetFillColor

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFText_GetFillColor")]
			internal static extern bool FPDFText_GetFillColor_x86(FPDF_TEXTPAGE text_page, int index, out uint R, out uint G, out uint B, out uint A);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFText_GetFillColor")]
			internal static extern bool FPDFText_GetFillColor_x64(FPDF_TEXTPAGE text_page, int index, out uint R, out uint G, out uint B, out uint A);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDFText_GetFillColor/*'/>
		public static bool FPDFText_GetFillColor(FPDF_TEXTPAGE text_page, int index, out uint R, out uint G, out uint B, out uint A)
		{

			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { return PlatformInvoke.FPDFText_GetFillColor_x64(text_page, index, out R, out G, out B, out A); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { return PlatformInvoke.FPDFText_GetFillColor_x86(text_page, index, out R, out G, out B, out A); }
			else
				throw new PlatformNotSupportedException();

		}

		#endregion


		#region FPDFText_GetStrokeColor

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFText_GetStrokeColor")]
			internal static extern bool FPDFText_GetStrokeColor_x86(FPDF_TEXTPAGE text_page, int index, out uint R, out uint G, out uint B, out uint A);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFText_GetStrokeColor")]
			internal static extern bool FPDFText_GetStrokeColor_x64(FPDF_TEXTPAGE text_page, int index, out uint R, out uint G, out uint B, out uint A);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDFText_GetStrokeColor/*'/>
		public static bool FPDFText_GetStrokeColor(FPDF_TEXTPAGE text_page, int index, out uint R, out uint G, out uint B, out uint A)
		{

			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { return PlatformInvoke.FPDFText_GetStrokeColor_x64(text_page, index, out R, out G, out B, out A); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { return PlatformInvoke.FPDFText_GetStrokeColor_x86(text_page, index, out R, out G, out B, out A); }
			else
				throw new PlatformNotSupportedException();

		}

		#endregion


		#region FPDFText_GetCharAngle

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFText_GetCharAngle")]
			internal static extern float FPDFText_GetCharAngle_x86(FPDF_TEXTPAGE text_page, int index);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFText_GetCharAngle")]
			internal static extern float FPDFText_GetCharAngle_x64(FPDF_TEXTPAGE text_page, int index);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDFText_GetCharAngle/*'/>
		public static float FPDFText_GetCharAngle(FPDF_TEXTPAGE text_page, int index)
		{

			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { return PlatformInvoke.FPDFText_GetCharAngle_x64(text_page, index); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { return PlatformInvoke.FPDFText_GetCharAngle_x86(text_page, index); }
			else
				throw new PlatformNotSupportedException();

		}

		#endregion


		#region FPDFText_GetCharBox

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFText_GetCharBox")]
			internal static extern bool FPDFText_GetCharBox_x86(FPDF_TEXTPAGE text_page, int index, out double left, out double right, out double bottom, out double top);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFText_GetCharBox")]
			internal static extern bool FPDFText_GetCharBox_x64(FPDF_TEXTPAGE text_page, int index, out double left, out double right, out double bottom, out double top);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDFText_GetCharBox/*'/>
		public static bool FPDFText_GetCharBox(FPDF_TEXTPAGE text_page, int index, out double left, out double right, out double bottom, out double top)
		{

			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { return PlatformInvoke.FPDFText_GetCharBox_x64(text_page, index, out left, out right, out bottom, out top); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { return PlatformInvoke.FPDFText_GetCharBox_x86(text_page, index, out left, out right, out bottom, out top); }
			else
				throw new PlatformNotSupportedException();

		}

		#endregion


		#region FPDFText_GetLooseCharBox

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFText_GetLooseCharBox")]
			internal static extern bool FPDFText_GetLooseCharBox_x86(FPDF_TEXTPAGE text_page, int index, FS_RECTF rect);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFText_GetLooseCharBox")]
			internal static extern bool FPDFText_GetLooseCharBox_x64(FPDF_TEXTPAGE text_page, int index, FS_RECTF rect);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDFText_GetLooseCharBox/*'/>
		public static bool FPDFText_GetLooseCharBox(FPDF_TEXTPAGE text_page, int index, FS_RECTF rect)
		{

			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { return PlatformInvoke.FPDFText_GetLooseCharBox_x64(text_page, index, rect); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { return PlatformInvoke.FPDFText_GetLooseCharBox_x86(text_page, index, rect); }
			else
				throw new PlatformNotSupportedException();

		}

		#endregion


		#region FPDFText_GetMatrix

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFText_GetMatrix")]
			internal static extern bool FPDFText_GetMatrix_x86(FPDF_TEXTPAGE text_page, int index, FS_MATRIX matrix);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFText_GetMatrix")]
			internal static extern bool FPDFText_GetMatrix_x64(FPDF_TEXTPAGE text_page, int index, FS_MATRIX matrix);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDFText_GetMatrix/*'/>
		public static bool FPDFText_GetMatrix(FPDF_TEXTPAGE text_page, int index, FS_MATRIX matrix)
		{

			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { return PlatformInvoke.FPDFText_GetMatrix_x64(text_page, index, matrix); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { return PlatformInvoke.FPDFText_GetMatrix_x86(text_page, index, matrix); }
			else
				throw new PlatformNotSupportedException();

		}

		#endregion


		#region FPDFText_GetCharOrigin

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFText_GetCharOrigin")]
			internal static extern bool FPDFText_GetCharOrigin_x86(FPDF_TEXTPAGE text_page, int index, out double x, out double y);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFText_GetCharOrigin")]
			internal static extern bool FPDFText_GetCharOrigin_x64(FPDF_TEXTPAGE text_page, int index, out double x, out double y);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDFText_GetCharOrigin/*'/>
		public static bool FPDFText_GetCharOrigin(FPDF_TEXTPAGE text_page, int index, out double x, out double y)
		{

			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { return PlatformInvoke.FPDFText_GetCharOrigin_x64(text_page, index, out x, out y); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { return PlatformInvoke.FPDFText_GetCharOrigin_x86(text_page, index, out x, out y); }
			else
				throw new PlatformNotSupportedException();

		}

		#endregion


		#region FPDFText_GetCharIndexAtPos

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFText_GetCharIndexAtPos")]
			internal static extern int FPDFText_GetCharIndexAtPos_x86(FPDF_TEXTPAGE text_page, double x, double y, double xTolerance, double yTolerance);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFText_GetCharIndexAtPos")]
			internal static extern int FPDFText_GetCharIndexAtPos_x64(FPDF_TEXTPAGE text_page, double x, double y, double xTolerance, double yTolerance);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDFText_GetCharIndexAtPos/*'/>
		public static int FPDFText_GetCharIndexAtPos(FPDF_TEXTPAGE text_page, double x, double y, double xTolerance, double yTolerance)
		{

			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { return PlatformInvoke.FPDFText_GetCharIndexAtPos_x64(text_page, x, y, xTolerance, yTolerance); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { return PlatformInvoke.FPDFText_GetCharIndexAtPos_x86(text_page, x, y, xTolerance, yTolerance); }
			else
				throw new PlatformNotSupportedException();

		}

		#endregion


		#region FPDFText_GetText

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFText_GetText")]
			internal static extern int FPDFText_GetText_x86(FPDF_TEXTPAGE text_page, int start_index, int count, ref byte result);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFText_GetText")]
			internal static extern int FPDFText_GetText_x64(FPDF_TEXTPAGE text_page, int start_index, int count, ref byte result);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDFText_GetText/*'/>
		private static int FPDFText_GetText(FPDF_TEXTPAGE text_page, int start_index, int count, ref byte result)
		{

			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { return PlatformInvoke.FPDFText_GetText_x64(text_page, start_index, count, ref result); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { return PlatformInvoke.FPDFText_GetText_x86(text_page, start_index, count, ref result); }
			else
				throw new PlatformNotSupportedException();

		}

		#endregion


		#region FPDFText_CountRects

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFText_CountRects")]
			internal static extern int FPDFText_CountRects_x86(FPDF_TEXTPAGE text_page, int start_index, int count);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFText_CountRects")]
			internal static extern int FPDFText_CountRects_x64(FPDF_TEXTPAGE text_page, int start_index, int count);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDFText_CountRects/*'/>
		public static int FPDFText_CountRects(FPDF_TEXTPAGE text_page, int start_index, int count)
		{

			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { return PlatformInvoke.FPDFText_CountRects_x64(text_page, start_index, count); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { return PlatformInvoke.FPDFText_CountRects_x86(text_page, start_index, count); }
			else
				throw new PlatformNotSupportedException();

		}

		#endregion


		#region FPDFText_GetRect

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFText_GetRect")]
			internal static extern bool FPDFText_GetRect_x86(FPDF_TEXTPAGE text_page, int rect_index, out double left, out double top, out double right, out double bottom);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFText_GetRect")]
			internal static extern bool FPDFText_GetRect_x64(FPDF_TEXTPAGE text_page, int rect_index, out double left, out double top, out double right, out double bottom);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDFText_GetRect/*'/>
		public static bool FPDFText_GetRect(FPDF_TEXTPAGE text_page, int rect_index, out double left, out double top, out double right, out double bottom)
		{

			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { return PlatformInvoke.FPDFText_GetRect_x64(text_page, rect_index, out left, out top, out right, out bottom); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { return PlatformInvoke.FPDFText_GetRect_x86(text_page, rect_index, out left, out top, out right, out bottom); }
			else
				throw new PlatformNotSupportedException();

		}

		#endregion


		#region FPDFText_GetBoundedText

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFText_GetBoundedText")]
			internal static extern int FPDFText_GetBoundedText_x86(FPDF_TEXTPAGE text_page, double left, double top, double right, double bottom, ref byte buffer, int buflen);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFText_GetBoundedText")]
			internal static extern int FPDFText_GetBoundedText_x64(FPDF_TEXTPAGE text_page, double left, double top, double right, double bottom, ref byte buffer, int buflen);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDFText_GetBoundedText/*'/>
		private static int FPDFText_GetBoundedText(FPDF_TEXTPAGE text_page, double left, double top, double right, double bottom, ref byte buffer, int buflen)
		{

			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { return PlatformInvoke.FPDFText_GetBoundedText_x64(text_page, left, top, right, bottom, ref buffer, buflen); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { return PlatformInvoke.FPDFText_GetBoundedText_x86(text_page, left, top, right, bottom, ref buffer, buflen); }
			else
				throw new PlatformNotSupportedException();

		}

		#endregion


		#region FPDFText_FindStart

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFText_FindStart")]
			internal static extern FPDF_SCHHANDLE FPDFText_FindStart_x86(FPDF_TEXTPAGE text_page, [MarshalAs(UnmanagedType.LPWStr)] string findwhat, SearchFlags flags, int start_index);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFText_FindStart")]
			internal static extern FPDF_SCHHANDLE FPDFText_FindStart_x64(FPDF_TEXTPAGE text_page, [MarshalAs(UnmanagedType.LPWStr)] string findwhat, SearchFlags flags, int start_index);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDFText_FindStart/*'/>
		public static FPDF_SCHHANDLE FPDFText_FindStart(FPDF_TEXTPAGE text_page, [MarshalAs(UnmanagedType.LPWStr)] string findwhat, SearchFlags flags, int start_index)
		{

			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { return PlatformInvoke.FPDFText_FindStart_x64(text_page, findwhat, flags, start_index); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { return PlatformInvoke.FPDFText_FindStart_x86(text_page, findwhat, flags, start_index); }
			else
				throw new PlatformNotSupportedException();

		}

		#endregion


		#region FPDFText_FindNext

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFText_FindNext")]
			internal static extern bool FPDFText_FindNext_x86(FPDF_SCHHANDLE handle);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFText_FindNext")]
			internal static extern bool FPDFText_FindNext_x64(FPDF_SCHHANDLE handle);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDFText_FindNext/*'/>
		public static bool FPDFText_FindNext(FPDF_SCHHANDLE handle)
		{

			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { return PlatformInvoke.FPDFText_FindNext_x64(handle); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { return PlatformInvoke.FPDFText_FindNext_x86(handle); }
			else
				throw new PlatformNotSupportedException();

		}

		#endregion


		#region FPDFText_FindPrev

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFText_FindPrev")]
			internal static extern bool FPDFText_FindPrev_x86(FPDF_SCHHANDLE handle);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFText_FindPrev")]
			internal static extern bool FPDFText_FindPrev_x64(FPDF_SCHHANDLE handle);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDFText_FindPrev/*'/>
		public static bool FPDFText_FindPrev(FPDF_SCHHANDLE handle)
		{

			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { return PlatformInvoke.FPDFText_FindPrev_x64(handle); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { return PlatformInvoke.FPDFText_FindPrev_x86(handle); }
			else
				throw new PlatformNotSupportedException();

		}

		#endregion


		#region FPDFText_GetSchResultIndex

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFText_GetSchResultIndex")]
			internal static extern int FPDFText_GetSchResultIndex_x86(FPDF_SCHHANDLE handle);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFText_GetSchResultIndex")]
			internal static extern int FPDFText_GetSchResultIndex_x64(FPDF_SCHHANDLE handle);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDFText_GetSchResultIndex/*'/>
		public static int FPDFText_GetSchResultIndex(FPDF_SCHHANDLE handle)
		{

			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { return PlatformInvoke.FPDFText_GetSchResultIndex_x64(handle); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { return PlatformInvoke.FPDFText_GetSchResultIndex_x86(handle); }
			else
				throw new PlatformNotSupportedException();

		}

		#endregion


		#region FPDFText_GetSchCount

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFText_GetSchCount")]
			internal static extern int FPDFText_GetSchCount_x86(FPDF_SCHHANDLE handle);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFText_GetSchCount")]
			internal static extern int FPDFText_GetSchCount_x64(FPDF_SCHHANDLE handle);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDFText_GetSchCount/*'/>
		public static int FPDFText_GetSchCount(FPDF_SCHHANDLE handle)
		{

			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { return PlatformInvoke.FPDFText_GetSchCount_x64(handle); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { return PlatformInvoke.FPDFText_GetSchCount_x86(handle); }
			else
				throw new PlatformNotSupportedException();

		}

		#endregion


		#region FPDFText_FindClose

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFText_FindClose")]
			internal static extern void FPDFText_FindClose_x86(FPDF_SCHHANDLE handle);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFText_FindClose")]
			internal static extern void FPDFText_FindClose_x64(FPDF_SCHHANDLE handle);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDFText_FindClose/*'/>
		public static void FPDFText_FindClose(FPDF_SCHHANDLE handle)
		{

			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { PlatformInvoke.FPDFText_FindClose_x64(handle); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { PlatformInvoke.FPDFText_FindClose_x86(handle); }
			else
				throw new PlatformNotSupportedException();

		}

		#endregion


		#region FPDFLink_LoadWebLinks

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFLink_LoadWebLinks")]
			internal static extern FPDF_PAGELINK FPDFLink_LoadWebLinks_x86(FPDF_TEXTPAGE text_page);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFLink_LoadWebLinks")]
			internal static extern FPDF_PAGELINK FPDFLink_LoadWebLinks_x64(FPDF_TEXTPAGE text_page);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDFLink_LoadWebLinks/*'/>
		public static FPDF_PAGELINK FPDFLink_LoadWebLinks(FPDF_TEXTPAGE text_page)
		{

			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { return PlatformInvoke.FPDFLink_LoadWebLinks_x64(text_page); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { return PlatformInvoke.FPDFLink_LoadWebLinks_x86(text_page); }
			else
				throw new PlatformNotSupportedException();

		}

		#endregion


		#region FPDFLink_CountWebLinks

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFLink_CountWebLinks")]
			internal static extern int FPDFLink_CountWebLinks_x86(FPDF_PAGELINK link_page);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFLink_CountWebLinks")]
			internal static extern int FPDFLink_CountWebLinks_x64(FPDF_PAGELINK link_page);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDFLink_CountWebLinks/*'/>
		public static int FPDFLink_CountWebLinks(FPDF_PAGELINK link_page)
		{

			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { return PlatformInvoke.FPDFLink_CountWebLinks_x64(link_page); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { return PlatformInvoke.FPDFLink_CountWebLinks_x86(link_page); }
			else
				throw new PlatformNotSupportedException();

		}

		#endregion


		#region FPDFLink_GetURL

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFLink_GetURL")]
			internal static extern int FPDFLink_GetURL_x86(FPDF_PAGELINK link_page, int link_index, ref byte buffer, int buflen);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFLink_GetURL")]
			internal static extern int FPDFLink_GetURL_x64(FPDF_PAGELINK link_page, int link_index, ref byte buffer, int buflen);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDFLink_GetURL/*'/>
		private static int FPDFLink_GetURL(FPDF_PAGELINK link_page, int link_index, ref byte buffer, int buflen)
		{

			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { return PlatformInvoke.FPDFLink_GetURL_x64(link_page, link_index, ref buffer, buflen); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { return PlatformInvoke.FPDFLink_GetURL_x86(link_page, link_index, ref buffer, buflen); }
			else
				throw new PlatformNotSupportedException();

		}

		#endregion


		#region FPDFLink_CountRects

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFLink_CountRects")]
			internal static extern int FPDFLink_CountRects_x86(FPDF_PAGELINK link_page, int link_index);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFLink_CountRects")]
			internal static extern int FPDFLink_CountRects_x64(FPDF_PAGELINK link_page, int link_index);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDFLink_CountRects/*'/>
		public static int FPDFLink_CountRects(FPDF_PAGELINK link_page, int link_index)
		{

			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { return PlatformInvoke.FPDFLink_CountRects_x64(link_page, link_index); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { return PlatformInvoke.FPDFLink_CountRects_x86(link_page, link_index); }
			else
				throw new PlatformNotSupportedException();

		}

		#endregion


		#region FPDFLink_GetRect

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFLink_GetRect")]
			internal static extern bool FPDFLink_GetRect_x86(FPDF_PAGELINK link_page, int link_index, int rect_index, out double left, out double top, out double right, out double bottom);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFLink_GetRect")]
			internal static extern bool FPDFLink_GetRect_x64(FPDF_PAGELINK link_page, int link_index, int rect_index, out double left, out double top, out double right, out double bottom);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDFLink_GetRect/*'/>
		public static bool FPDFLink_GetRect(FPDF_PAGELINK link_page, int link_index, int rect_index, out double left, out double top, out double right, out double bottom)
		{

			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { return PlatformInvoke.FPDFLink_GetRect_x64(link_page, link_index, rect_index, out left, out top, out right, out bottom); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { return PlatformInvoke.FPDFLink_GetRect_x86(link_page, link_index, rect_index, out left, out top, out right, out bottom); }
			else
				throw new PlatformNotSupportedException();

		}

		#endregion


		#region FPDFLink_GetTextRange

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFLink_GetTextRange")]
			internal static extern bool FPDFLink_GetTextRange_x86(FPDF_PAGELINK link_page, int link_index, out int start_char_index, out int char_count);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFLink_GetTextRange")]
			internal static extern bool FPDFLink_GetTextRange_x64(FPDF_PAGELINK link_page, int link_index, out int start_char_index, out int char_count);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDFLink_GetTextRange/*'/>
		public static bool FPDFLink_GetTextRange(FPDF_PAGELINK link_page, int link_index, out int start_char_index, out int char_count)
		{

			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { return PlatformInvoke.FPDFLink_GetTextRange_x64(link_page, link_index, out start_char_index, out char_count); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { return PlatformInvoke.FPDFLink_GetTextRange_x86(link_page, link_index, out start_char_index, out char_count); }
			else
				throw new PlatformNotSupportedException();

		}

		#endregion


		#region FPDFLink_CloseWebLinks

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFLink_CloseWebLinks")]
			internal static extern void FPDFLink_CloseWebLinks_x86(FPDF_PAGELINK link_page);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFLink_CloseWebLinks")]
			internal static extern void FPDFLink_CloseWebLinks_x64(FPDF_PAGELINK link_page);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDFLink_CloseWebLinks/*'/>
		public static void FPDFLink_CloseWebLinks(FPDF_PAGELINK link_page)
		{

			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { PlatformInvoke.FPDFLink_CloseWebLinks_x64(link_page); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { PlatformInvoke.FPDFLink_CloseWebLinks_x86(link_page); }
			else
				throw new PlatformNotSupportedException();

		}

		#endregion


		#region FPDFPage_SetMediaBox

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFPage_SetMediaBox")]
			internal static extern void FPDFPage_SetMediaBox_x86(FPDF_PAGE page, float left, float bottom, float right, float top);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFPage_SetMediaBox")]
			internal static extern void FPDFPage_SetMediaBox_x64(FPDF_PAGE page, float left, float bottom, float right, float top);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDFPage_SetMediaBox/*'/>
		public static void FPDFPage_SetMediaBox(FPDF_PAGE page, float left, float bottom, float right, float top)
		{

			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { PlatformInvoke.FPDFPage_SetMediaBox_x64(page, left, bottom, right, top); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { PlatformInvoke.FPDFPage_SetMediaBox_x86(page, left, bottom, right, top); }
			else
				throw new PlatformNotSupportedException();

		}

		#endregion


		#region FPDFPage_SetCropBox

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFPage_SetCropBox")]
			internal static extern void FPDFPage_SetCropBox_x86(FPDF_PAGE page, float left, float bottom, float right, float top);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFPage_SetCropBox")]
			internal static extern void FPDFPage_SetCropBox_x64(FPDF_PAGE page, float left, float bottom, float right, float top);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDFPage_SetCropBox/*'/>
		public static void FPDFPage_SetCropBox(FPDF_PAGE page, float left, float bottom, float right, float top)
		{

			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { PlatformInvoke.FPDFPage_SetCropBox_x64(page, left, bottom, right, top); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { PlatformInvoke.FPDFPage_SetCropBox_x86(page, left, bottom, right, top); }
			else
				throw new PlatformNotSupportedException();

		}

		#endregion


		#region FPDFPage_SetBleedBox

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFPage_SetBleedBox")]
			internal static extern void FPDFPage_SetBleedBox_x86(FPDF_PAGE page, float left, float bottom, float right, float top);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFPage_SetBleedBox")]
			internal static extern void FPDFPage_SetBleedBox_x64(FPDF_PAGE page, float left, float bottom, float right, float top);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDFPage_SetBleedBox/*'/>
		public static void FPDFPage_SetBleedBox(FPDF_PAGE page, float left, float bottom, float right, float top)
		{

			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { PlatformInvoke.FPDFPage_SetBleedBox_x64(page, left, bottom, right, top); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { PlatformInvoke.FPDFPage_SetBleedBox_x86(page, left, bottom, right, top); }
			else
				throw new PlatformNotSupportedException();

		}

		#endregion


		#region FPDFPage_SetTrimBox

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFPage_SetTrimBox")]
			internal static extern void FPDFPage_SetTrimBox_x86(FPDF_PAGE page, float left, float bottom, float right, float top);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFPage_SetTrimBox")]
			internal static extern void FPDFPage_SetTrimBox_x64(FPDF_PAGE page, float left, float bottom, float right, float top);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDFPage_SetTrimBox/*'/>
		public static void FPDFPage_SetTrimBox(FPDF_PAGE page, float left, float bottom, float right, float top)
		{

			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { PlatformInvoke.FPDFPage_SetTrimBox_x64(page, left, bottom, right, top); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { PlatformInvoke.FPDFPage_SetTrimBox_x86(page, left, bottom, right, top); }
			else
				throw new PlatformNotSupportedException();

		}

		#endregion


		#region FPDFPage_SetArtBox

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFPage_SetArtBox")]
			internal static extern void FPDFPage_SetArtBox_x86(FPDF_PAGE page, float left, float bottom, float right, float top);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFPage_SetArtBox")]
			internal static extern void FPDFPage_SetArtBox_x64(FPDF_PAGE page, float left, float bottom, float right, float top);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDFPage_SetArtBox/*'/>
		public static void FPDFPage_SetArtBox(FPDF_PAGE page, float left, float bottom, float right, float top)
		{

			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { PlatformInvoke.FPDFPage_SetArtBox_x64(page, left, bottom, right, top); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { PlatformInvoke.FPDFPage_SetArtBox_x86(page, left, bottom, right, top); }
			else
				throw new PlatformNotSupportedException();

		}

		#endregion


		#region FPDFPage_GetMediaBox

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFPage_GetMediaBox")]
			internal static extern bool FPDFPage_GetMediaBox_x86(FPDF_PAGE page, out float left, out float bottom, out float right, out float top);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFPage_GetMediaBox")]
			internal static extern bool FPDFPage_GetMediaBox_x64(FPDF_PAGE page, out float left, out float bottom, out float right, out float top);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDFPage_GetMediaBox/*'/>
		public static bool FPDFPage_GetMediaBox(FPDF_PAGE page, out float left, out float bottom, out float right, out float top)
		{

			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { return PlatformInvoke.FPDFPage_GetMediaBox_x64(page, out left, out bottom, out right, out top); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { return PlatformInvoke.FPDFPage_GetMediaBox_x86(page, out left, out bottom, out right, out top); }
			else
				throw new PlatformNotSupportedException();

		}

		#endregion


		#region FPDFPage_GetCropBox

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFPage_GetCropBox")]
			internal static extern bool FPDFPage_GetCropBox_x86(FPDF_PAGE page, out float left, out float bottom, out float right, out float top);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFPage_GetCropBox")]
			internal static extern bool FPDFPage_GetCropBox_x64(FPDF_PAGE page, out float left, out float bottom, out float right, out float top);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDFPage_GetCropBox/*'/>
		public static bool FPDFPage_GetCropBox(FPDF_PAGE page, out float left, out float bottom, out float right, out float top)
		{

			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { return PlatformInvoke.FPDFPage_GetCropBox_x64(page, out left, out bottom, out right, out top); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { return PlatformInvoke.FPDFPage_GetCropBox_x86(page, out left, out bottom, out right, out top); }
			else
				throw new PlatformNotSupportedException();

		}

		#endregion


		#region FPDFPage_GetBleedBox

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFPage_GetBleedBox")]
			internal static extern bool FPDFPage_GetBleedBox_x86(FPDF_PAGE page, out float left, out float bottom, out float right, out float top);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFPage_GetBleedBox")]
			internal static extern bool FPDFPage_GetBleedBox_x64(FPDF_PAGE page, out float left, out float bottom, out float right, out float top);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDFPage_GetBleedBox/*'/>
		public static bool FPDFPage_GetBleedBox(FPDF_PAGE page, out float left, out float bottom, out float right, out float top)
		{

			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { return PlatformInvoke.FPDFPage_GetBleedBox_x64(page, out left, out bottom, out right, out top); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { return PlatformInvoke.FPDFPage_GetBleedBox_x86(page, out left, out bottom, out right, out top); }
			else
				throw new PlatformNotSupportedException();

		}

		#endregion


		#region FPDFPage_GetTrimBox

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFPage_GetTrimBox")]
			internal static extern bool FPDFPage_GetTrimBox_x86(FPDF_PAGE page, out float left, out float bottom, out float right, out float top);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFPage_GetTrimBox")]
			internal static extern bool FPDFPage_GetTrimBox_x64(FPDF_PAGE page, out float left, out float bottom, out float right, out float top);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDFPage_GetTrimBox/*'/>
		public static bool FPDFPage_GetTrimBox(FPDF_PAGE page, out float left, out float bottom, out float right, out float top)
		{

			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { return PlatformInvoke.FPDFPage_GetTrimBox_x64(page, out left, out bottom, out right, out top); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { return PlatformInvoke.FPDFPage_GetTrimBox_x86(page, out left, out bottom, out right, out top); }
			else
				throw new PlatformNotSupportedException();

		}

		#endregion


		#region FPDFPage_GetArtBox

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFPage_GetArtBox")]
			internal static extern bool FPDFPage_GetArtBox_x86(FPDF_PAGE page, out float left, out float bottom, out float right, out float top);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFPage_GetArtBox")]
			internal static extern bool FPDFPage_GetArtBox_x64(FPDF_PAGE page, out float left, out float bottom, out float right, out float top);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDFPage_GetArtBox/*'/>
		public static bool FPDFPage_GetArtBox(FPDF_PAGE page, out float left, out float bottom, out float right, out float top)
		{

			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { return PlatformInvoke.FPDFPage_GetArtBox_x64(page, out left, out bottom, out right, out top); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { return PlatformInvoke.FPDFPage_GetArtBox_x86(page, out left, out bottom, out right, out top); }
			else
				throw new PlatformNotSupportedException();

		}

		#endregion


		#region FPDFPage_TransFormWithClip

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFPage_TransFormWithClip")]
			internal static extern bool FPDFPage_TransFormWithClip_x86(FPDF_PAGE page, [MarshalAs(UnmanagedType.LPStruct)] FS_MATRIX matrix, [MarshalAs(UnmanagedType.LPStruct)] FS_RECTF clipRect);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFPage_TransFormWithClip")]
			internal static extern bool FPDFPage_TransFormWithClip_x64(FPDF_PAGE page, [MarshalAs(UnmanagedType.LPStruct)] FS_MATRIX matrix, [MarshalAs(UnmanagedType.LPStruct)] FS_RECTF clipRect);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDFPage_TransFormWithClip/*'/>
		public static bool FPDFPage_TransFormWithClip(FPDF_PAGE page, [MarshalAs(UnmanagedType.LPStruct)] FS_MATRIX matrix, [MarshalAs(UnmanagedType.LPStruct)] FS_RECTF clipRect)
		{

			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { return PlatformInvoke.FPDFPage_TransFormWithClip_x64(page, matrix, clipRect); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { return PlatformInvoke.FPDFPage_TransFormWithClip_x86(page, matrix, clipRect); }
			else
				throw new PlatformNotSupportedException();

		}

		#endregion


		#region FPDFPageObj_TransformClipPath

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFPageObj_TransformClipPath")]
			internal static extern void FPDFPageObj_TransformClipPath_x86(FPDF_PAGEOBJECT page_object, double a, double b, double c, double d, double e, double f);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFPageObj_TransformClipPath")]
			internal static extern void FPDFPageObj_TransformClipPath_x64(FPDF_PAGEOBJECT page_object, double a, double b, double c, double d, double e, double f);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDFPageObj_TransformClipPath/*'/>
		public static void FPDFPageObj_TransformClipPath(FPDF_PAGEOBJECT page_object, double a, double b, double c, double d, double e, double f)
		{

			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { PlatformInvoke.FPDFPageObj_TransformClipPath_x64(page_object, a, b, c, d, e, f); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { PlatformInvoke.FPDFPageObj_TransformClipPath_x86(page_object, a, b, c, d, e, f); }
			else
				throw new PlatformNotSupportedException();

		}

		#endregion


		#region FPDFPageObj_GetClipPath

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFPageObj_GetClipPath")]
			internal static extern FPDF_CLIPPATH FPDFPageObj_GetClipPath_x86(FPDF_PAGEOBJECT page_object);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFPageObj_GetClipPath")]
			internal static extern FPDF_CLIPPATH FPDFPageObj_GetClipPath_x64(FPDF_PAGEOBJECT page_object);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDFPageObj_GetClipPath/*'/>
		public static FPDF_CLIPPATH FPDFPageObj_GetClipPath(FPDF_PAGEOBJECT page_object)
		{

			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { return PlatformInvoke.FPDFPageObj_GetClipPath_x64(page_object); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { return PlatformInvoke.FPDFPageObj_GetClipPath_x86(page_object); }
			else
				throw new PlatformNotSupportedException();

		}

		#endregion


		#region FPDFClipPath_CountPaths

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFClipPath_CountPaths")]
			internal static extern int FPDFClipPath_CountPaths_x86(FPDF_CLIPPATH clip_path);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFClipPath_CountPaths")]
			internal static extern int FPDFClipPath_CountPaths_x64(FPDF_CLIPPATH clip_path);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDFClipPath_CountPaths/*'/>
		public static int FPDFClipPath_CountPaths(FPDF_CLIPPATH clip_path)
		{

			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { return PlatformInvoke.FPDFClipPath_CountPaths_x64(clip_path); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { return PlatformInvoke.FPDFClipPath_CountPaths_x86(clip_path); }
			else
				throw new PlatformNotSupportedException();

		}

		#endregion


		#region FPDFClipPath_CountPathSegments

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFClipPath_CountPathSegments")]
			internal static extern int FPDFClipPath_CountPathSegments_x86(FPDF_CLIPPATH clip_path, int path_index);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFClipPath_CountPathSegments")]
			internal static extern int FPDFClipPath_CountPathSegments_x64(FPDF_CLIPPATH clip_path, int path_index);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDFClipPath_CountPathSegments/*'/>
		public static int FPDFClipPath_CountPathSegments(FPDF_CLIPPATH clip_path, int path_index)
		{

			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { return PlatformInvoke.FPDFClipPath_CountPathSegments_x64(clip_path, path_index); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { return PlatformInvoke.FPDFClipPath_CountPathSegments_x86(clip_path, path_index); }
			else
				throw new PlatformNotSupportedException();

		}

		#endregion


		#region FPDFClipPath_GetPathSegment

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFClipPath_GetPathSegment")]
			internal static extern FPDF_PATHSEGMENT FPDFClipPath_GetPathSegment_x86(FPDF_CLIPPATH clip_path, int path_index, int segment_index);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFClipPath_GetPathSegment")]
			internal static extern FPDF_PATHSEGMENT FPDFClipPath_GetPathSegment_x64(FPDF_CLIPPATH clip_path, int path_index, int segment_index);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDFClipPath_GetPathSegment/*'/>
		public static FPDF_PATHSEGMENT FPDFClipPath_GetPathSegment(FPDF_CLIPPATH clip_path, int path_index, int segment_index)
		{

			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { return PlatformInvoke.FPDFClipPath_GetPathSegment_x64(clip_path, path_index, segment_index); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { return PlatformInvoke.FPDFClipPath_GetPathSegment_x86(clip_path, path_index, segment_index); }
			else
				throw new PlatformNotSupportedException();

		}

		#endregion


		#region FPDF_CreateClipPath

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDF_CreateClipPath")]
			internal static extern FPDF_CLIPPATH FPDF_CreateClipPath_x86(float left, float bottom, float right, float top);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDF_CreateClipPath")]
			internal static extern FPDF_CLIPPATH FPDF_CreateClipPath_x64(float left, float bottom, float right, float top);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDF_CreateClipPath/*'/>
		public static FPDF_CLIPPATH FPDF_CreateClipPath(float left, float bottom, float right, float top)
		{

			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { return PlatformInvoke.FPDF_CreateClipPath_x64(left, bottom, right, top); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { return PlatformInvoke.FPDF_CreateClipPath_x86(left, bottom, right, top); }
			else
				throw new PlatformNotSupportedException();

		}

		#endregion


		#region FPDF_DestroyClipPath

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDF_DestroyClipPath")]
			internal static extern void FPDF_DestroyClipPath_x86(FPDF_CLIPPATH clipPath);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDF_DestroyClipPath")]
			internal static extern void FPDF_DestroyClipPath_x64(FPDF_CLIPPATH clipPath);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDF_DestroyClipPath/*'/>
		public static void FPDF_DestroyClipPath(FPDF_CLIPPATH clipPath)
		{

			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { PlatformInvoke.FPDF_DestroyClipPath_x64(clipPath); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { PlatformInvoke.FPDF_DestroyClipPath_x86(clipPath); }
			else
				throw new PlatformNotSupportedException();

		}

		#endregion


		#region FPDFPage_InsertClipPath

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFPage_InsertClipPath")]
			internal static extern void FPDFPage_InsertClipPath_x86(FPDF_PAGE page, FPDF_CLIPPATH clipPath);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFPage_InsertClipPath")]
			internal static extern void FPDFPage_InsertClipPath_x64(FPDF_PAGE page, FPDF_CLIPPATH clipPath);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDFPage_InsertClipPath/*'/>
		public static void FPDFPage_InsertClipPath(FPDF_PAGE page, FPDF_CLIPPATH clipPath)
		{

			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { PlatformInvoke.FPDFPage_InsertClipPath_x64(page, clipPath); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { PlatformInvoke.FPDFPage_InsertClipPath_x86(page, clipPath); }
			else
				throw new PlatformNotSupportedException();

		}

		#endregion


		#region FPDFAnnot_IsSupportedSubtype

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFAnnot_IsSupportedSubtype")]
			internal static extern bool FPDFAnnot_IsSupportedSubtype_x86(FPDF_ANNOTATION_SUBTYPE subtype);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFAnnot_IsSupportedSubtype")]
			internal static extern bool FPDFAnnot_IsSupportedSubtype_x64(FPDF_ANNOTATION_SUBTYPE subtype);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDFAnnot_IsSupportedSubtype/*'/>
		public static bool FPDFAnnot_IsSupportedSubtype(FPDF_ANNOTATION_SUBTYPE subtype)
		{

			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { return PlatformInvoke.FPDFAnnot_IsSupportedSubtype_x64(subtype); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { return PlatformInvoke.FPDFAnnot_IsSupportedSubtype_x86(subtype); }
			else
				throw new PlatformNotSupportedException();

		}

		#endregion


		#region FPDFPage_CreateAnnot

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFPage_CreateAnnot")]
			internal static extern FPDF_ANNOTATION FPDFPage_CreateAnnot_x86(FPDF_PAGE page, FPDF_ANNOTATION_SUBTYPE subtype);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFPage_CreateAnnot")]
			internal static extern FPDF_ANNOTATION FPDFPage_CreateAnnot_x64(FPDF_PAGE page, FPDF_ANNOTATION_SUBTYPE subtype);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDFPage_CreateAnnot/*'/>
		public static FPDF_ANNOTATION FPDFPage_CreateAnnot(FPDF_PAGE page, FPDF_ANNOTATION_SUBTYPE subtype)
		{

			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { return PlatformInvoke.FPDFPage_CreateAnnot_x64(page, subtype); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { return PlatformInvoke.FPDFPage_CreateAnnot_x86(page, subtype); }
			else
				throw new PlatformNotSupportedException();

		}

		#endregion


		#region FPDFPage_GetAnnotCount

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFPage_GetAnnotCount")]
			internal static extern int FPDFPage_GetAnnotCount_x86(FPDF_PAGE page);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFPage_GetAnnotCount")]
			internal static extern int FPDFPage_GetAnnotCount_x64(FPDF_PAGE page);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDFPage_GetAnnotCount/*'/>
		public static int FPDFPage_GetAnnotCount(FPDF_PAGE page)
		{

			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { return PlatformInvoke.FPDFPage_GetAnnotCount_x64(page); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { return PlatformInvoke.FPDFPage_GetAnnotCount_x86(page); }
			else
				throw new PlatformNotSupportedException();

		}

		#endregion


		#region FPDFPage_GetAnnot

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFPage_GetAnnot")]
			internal static extern FPDF_ANNOTATION FPDFPage_GetAnnot_x86(FPDF_PAGE page, int index);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFPage_GetAnnot")]
			internal static extern FPDF_ANNOTATION FPDFPage_GetAnnot_x64(FPDF_PAGE page, int index);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDFPage_GetAnnot/*'/>
		public static FPDF_ANNOTATION FPDFPage_GetAnnot(FPDF_PAGE page, int index)
		{

			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { return PlatformInvoke.FPDFPage_GetAnnot_x64(page, index); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { return PlatformInvoke.FPDFPage_GetAnnot_x86(page, index); }
			else
				throw new PlatformNotSupportedException();

		}

		#endregion


		#region FPDFPage_GetAnnotIndex

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFPage_GetAnnotIndex")]
			internal static extern int FPDFPage_GetAnnotIndex_x86(FPDF_PAGE page, FPDF_ANNOTATION annot);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFPage_GetAnnotIndex")]
			internal static extern int FPDFPage_GetAnnotIndex_x64(FPDF_PAGE page, FPDF_ANNOTATION annot);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDFPage_GetAnnotIndex/*'/>
		public static int FPDFPage_GetAnnotIndex(FPDF_PAGE page, FPDF_ANNOTATION annot)
		{

			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { return PlatformInvoke.FPDFPage_GetAnnotIndex_x64(page, annot); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { return PlatformInvoke.FPDFPage_GetAnnotIndex_x86(page, annot); }
			else
				throw new PlatformNotSupportedException();

		}

		#endregion


		#region FPDFPage_CloseAnnot

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFPage_CloseAnnot")]
			internal static extern void FPDFPage_CloseAnnot_x86(FPDF_ANNOTATION annot);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFPage_CloseAnnot")]
			internal static extern void FPDFPage_CloseAnnot_x64(FPDF_ANNOTATION annot);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDFPage_CloseAnnot/*'/>
		public static void FPDFPage_CloseAnnot(FPDF_ANNOTATION annot)
		{

			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { PlatformInvoke.FPDFPage_CloseAnnot_x64(annot); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { PlatformInvoke.FPDFPage_CloseAnnot_x86(annot); }
			else
				throw new PlatformNotSupportedException();

		}

		#endregion


		#region FPDFPage_RemoveAnnot

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFPage_RemoveAnnot")]
			internal static extern bool FPDFPage_RemoveAnnot_x86(FPDF_PAGE page, int index);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFPage_RemoveAnnot")]
			internal static extern bool FPDFPage_RemoveAnnot_x64(FPDF_PAGE page, int index);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDFPage_RemoveAnnot/*'/>
		public static bool FPDFPage_RemoveAnnot(FPDF_PAGE page, int index)
		{

			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { return PlatformInvoke.FPDFPage_RemoveAnnot_x64(page, index); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { return PlatformInvoke.FPDFPage_RemoveAnnot_x86(page, index); }
			else
				throw new PlatformNotSupportedException();

		}

		#endregion


		#region FPDFAnnot_GetSubtype

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFAnnot_GetSubtype")]
			internal static extern FPDF_ANNOTATION_SUBTYPE FPDFAnnot_GetSubtype_x86(FPDF_ANNOTATION annot);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFAnnot_GetSubtype")]
			internal static extern FPDF_ANNOTATION_SUBTYPE FPDFAnnot_GetSubtype_x64(FPDF_ANNOTATION annot);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDFAnnot_GetSubtype/*'/>
		public static FPDF_ANNOTATION_SUBTYPE FPDFAnnot_GetSubtype(FPDF_ANNOTATION annot)
		{

			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { return PlatformInvoke.FPDFAnnot_GetSubtype_x64(annot); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { return PlatformInvoke.FPDFAnnot_GetSubtype_x86(annot); }
			else
				throw new PlatformNotSupportedException();

		}

		#endregion


		#region FPDFAnnot_IsObjectSupportedSubtype

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFAnnot_IsObjectSupportedSubtype")]
			internal static extern bool FPDFAnnot_IsObjectSupportedSubtype_x86(FPDF_ANNOTATION_SUBTYPE subtype);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFAnnot_IsObjectSupportedSubtype")]
			internal static extern bool FPDFAnnot_IsObjectSupportedSubtype_x64(FPDF_ANNOTATION_SUBTYPE subtype);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDFAnnot_IsObjectSupportedSubtype/*'/>
		public static bool FPDFAnnot_IsObjectSupportedSubtype(FPDF_ANNOTATION_SUBTYPE subtype)
		{

			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { return PlatformInvoke.FPDFAnnot_IsObjectSupportedSubtype_x64(subtype); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { return PlatformInvoke.FPDFAnnot_IsObjectSupportedSubtype_x86(subtype); }
			else
				throw new PlatformNotSupportedException();

		}

		#endregion


		#region FPDFAnnot_UpdateObject

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFAnnot_UpdateObject")]
			internal static extern bool FPDFAnnot_UpdateObject_x86(FPDF_ANNOTATION annot, FPDF_PAGEOBJECT obj);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFAnnot_UpdateObject")]
			internal static extern bool FPDFAnnot_UpdateObject_x64(FPDF_ANNOTATION annot, FPDF_PAGEOBJECT obj);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDFAnnot_UpdateObject/*'/>
		public static bool FPDFAnnot_UpdateObject(FPDF_ANNOTATION annot, FPDF_PAGEOBJECT obj)
		{

			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { return PlatformInvoke.FPDFAnnot_UpdateObject_x64(annot, obj); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { return PlatformInvoke.FPDFAnnot_UpdateObject_x86(annot, obj); }
			else
				throw new PlatformNotSupportedException();

		}

		#endregion


		#region FPDFAnnot_AddInkStroke

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFAnnot_AddInkStroke")]
			internal static extern int FPDFAnnot_AddInkStroke_x86(FPDF_ANNOTATION annot, [MarshalAs(UnmanagedType.LPStruct)] FS_POINTF points, uint point_count);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFAnnot_AddInkStroke")]
			internal static extern int FPDFAnnot_AddInkStroke_x64(FPDF_ANNOTATION annot, [MarshalAs(UnmanagedType.LPStruct)] FS_POINTF points, uint point_count);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDFAnnot_AddInkStroke/*'/>
		public static int FPDFAnnot_AddInkStroke(FPDF_ANNOTATION annot, [MarshalAs(UnmanagedType.LPStruct)] FS_POINTF points, uint point_count)
		{

			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { return PlatformInvoke.FPDFAnnot_AddInkStroke_x64(annot, points, point_count); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { return PlatformInvoke.FPDFAnnot_AddInkStroke_x86(annot, points, point_count); }
			else
				throw new PlatformNotSupportedException();

		}

		#endregion


		#region FPDFAnnot_RemoveInkList

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFAnnot_RemoveInkList")]
			internal static extern bool FPDFAnnot_RemoveInkList_x86(FPDF_ANNOTATION annot);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFAnnot_RemoveInkList")]
			internal static extern bool FPDFAnnot_RemoveInkList_x64(FPDF_ANNOTATION annot);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDFAnnot_RemoveInkList/*'/>
		public static bool FPDFAnnot_RemoveInkList(FPDF_ANNOTATION annot)
		{

			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { return PlatformInvoke.FPDFAnnot_RemoveInkList_x64(annot); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { return PlatformInvoke.FPDFAnnot_RemoveInkList_x86(annot); }
			else
				throw new PlatformNotSupportedException();

		}

		#endregion


		#region FPDFAnnot_AppendObject

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFAnnot_AppendObject")]
			internal static extern bool FPDFAnnot_AppendObject_x86(FPDF_ANNOTATION annot, FPDF_PAGEOBJECT obj);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFAnnot_AppendObject")]
			internal static extern bool FPDFAnnot_AppendObject_x64(FPDF_ANNOTATION annot, FPDF_PAGEOBJECT obj);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDFAnnot_AppendObject/*'/>
		public static bool FPDFAnnot_AppendObject(FPDF_ANNOTATION annot, FPDF_PAGEOBJECT obj)
		{

			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { return PlatformInvoke.FPDFAnnot_AppendObject_x64(annot, obj); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { return PlatformInvoke.FPDFAnnot_AppendObject_x86(annot, obj); }
			else
				throw new PlatformNotSupportedException();

		}

		#endregion


		#region FPDFAnnot_GetObjectCount

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFAnnot_GetObjectCount")]
			internal static extern int FPDFAnnot_GetObjectCount_x86(FPDF_ANNOTATION annot);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFAnnot_GetObjectCount")]
			internal static extern int FPDFAnnot_GetObjectCount_x64(FPDF_ANNOTATION annot);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDFAnnot_GetObjectCount/*'/>
		public static int FPDFAnnot_GetObjectCount(FPDF_ANNOTATION annot)
		{

			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { return PlatformInvoke.FPDFAnnot_GetObjectCount_x64(annot); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { return PlatformInvoke.FPDFAnnot_GetObjectCount_x86(annot); }
			else
				throw new PlatformNotSupportedException();

		}

		#endregion


		#region FPDFAnnot_GetObject

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFAnnot_GetObject")]
			internal static extern FPDF_PAGEOBJECT FPDFAnnot_GetObject_x86(FPDF_ANNOTATION annot, int index);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFAnnot_GetObject")]
			internal static extern FPDF_PAGEOBJECT FPDFAnnot_GetObject_x64(FPDF_ANNOTATION annot, int index);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDFAnnot_GetObject/*'/>
		public static FPDF_PAGEOBJECT FPDFAnnot_GetObject(FPDF_ANNOTATION annot, int index)
		{

			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { return PlatformInvoke.FPDFAnnot_GetObject_x64(annot, index); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { return PlatformInvoke.FPDFAnnot_GetObject_x86(annot, index); }
			else
				throw new PlatformNotSupportedException();

		}

		#endregion


		#region FPDFAnnot_RemoveObject

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFAnnot_RemoveObject")]
			internal static extern bool FPDFAnnot_RemoveObject_x86(FPDF_ANNOTATION annot, int index);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFAnnot_RemoveObject")]
			internal static extern bool FPDFAnnot_RemoveObject_x64(FPDF_ANNOTATION annot, int index);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDFAnnot_RemoveObject/*'/>
		public static bool FPDFAnnot_RemoveObject(FPDF_ANNOTATION annot, int index)
		{

			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { return PlatformInvoke.FPDFAnnot_RemoveObject_x64(annot, index); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { return PlatformInvoke.FPDFAnnot_RemoveObject_x86(annot, index); }
			else
				throw new PlatformNotSupportedException();

		}

		#endregion


		#region FPDFAnnot_SetColor

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFAnnot_SetColor")]
			internal static extern bool FPDFAnnot_SetColor_x86(FPDF_ANNOTATION annot, FPDFANNOT_COLORTYPE type, uint R, uint G, uint B, uint A);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFAnnot_SetColor")]
			internal static extern bool FPDFAnnot_SetColor_x64(FPDF_ANNOTATION annot, FPDFANNOT_COLORTYPE type, uint R, uint G, uint B, uint A);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDFAnnot_SetColor/*'/>
		public static bool FPDFAnnot_SetColor(FPDF_ANNOTATION annot, FPDFANNOT_COLORTYPE type, uint R, uint G, uint B, uint A)
		{

			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { return PlatformInvoke.FPDFAnnot_SetColor_x64(annot, type, R, G, B, A); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { return PlatformInvoke.FPDFAnnot_SetColor_x86(annot, type, R, G, B, A); }
			else
				throw new PlatformNotSupportedException();

		}

		#endregion


		#region FPDFAnnot_GetColor

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFAnnot_GetColor")]
			internal static extern bool FPDFAnnot_GetColor_x86(FPDF_ANNOTATION annot, FPDFANNOT_COLORTYPE type, out uint R, out uint G, out uint B, out uint A);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFAnnot_GetColor")]
			internal static extern bool FPDFAnnot_GetColor_x64(FPDF_ANNOTATION annot, FPDFANNOT_COLORTYPE type, out uint R, out uint G, out uint B, out uint A);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDFAnnot_GetColor/*'/>
		public static bool FPDFAnnot_GetColor(FPDF_ANNOTATION annot, FPDFANNOT_COLORTYPE type, out uint R, out uint G, out uint B, out uint A)
		{

			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { return PlatformInvoke.FPDFAnnot_GetColor_x64(annot, type, out R, out G, out B, out A); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { return PlatformInvoke.FPDFAnnot_GetColor_x86(annot, type, out R, out G, out B, out A); }
			else
				throw new PlatformNotSupportedException();

		}

		#endregion


		#region FPDFAnnot_HasAttachmentPoints

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFAnnot_HasAttachmentPoints")]
			internal static extern bool FPDFAnnot_HasAttachmentPoints_x86(FPDF_ANNOTATION annot);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFAnnot_HasAttachmentPoints")]
			internal static extern bool FPDFAnnot_HasAttachmentPoints_x64(FPDF_ANNOTATION annot);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDFAnnot_HasAttachmentPoints/*'/>
		public static bool FPDFAnnot_HasAttachmentPoints(FPDF_ANNOTATION annot)
		{

			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { return PlatformInvoke.FPDFAnnot_HasAttachmentPoints_x64(annot); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { return PlatformInvoke.FPDFAnnot_HasAttachmentPoints_x86(annot); }
			else
				throw new PlatformNotSupportedException();

		}

		#endregion


		#region FPDFAnnot_SetAttachmentPoints

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFAnnot_SetAttachmentPoints")]
			internal static extern bool FPDFAnnot_SetAttachmentPoints_x86(FPDF_ANNOTATION annot, uint quad_index, [MarshalAs(UnmanagedType.LPStruct)] FS_QUADPOINTSF quad_points);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFAnnot_SetAttachmentPoints")]
			internal static extern bool FPDFAnnot_SetAttachmentPoints_x64(FPDF_ANNOTATION annot, uint quad_index, [MarshalAs(UnmanagedType.LPStruct)] FS_QUADPOINTSF quad_points);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDFAnnot_SetAttachmentPoints/*'/>
		public static bool FPDFAnnot_SetAttachmentPoints(FPDF_ANNOTATION annot, uint quad_index, [MarshalAs(UnmanagedType.LPStruct)] FS_QUADPOINTSF quad_points)
		{

			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { return PlatformInvoke.FPDFAnnot_SetAttachmentPoints_x64(annot, quad_index, quad_points); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { return PlatformInvoke.FPDFAnnot_SetAttachmentPoints_x86(annot, quad_index, quad_points); }
			else
				throw new PlatformNotSupportedException();

		}

		#endregion


		#region FPDFAnnot_AppendAttachmentPoints

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFAnnot_AppendAttachmentPoints")]
			internal static extern bool FPDFAnnot_AppendAttachmentPoints_x86(FPDF_ANNOTATION annot, [MarshalAs(UnmanagedType.LPStruct)] FS_QUADPOINTSF quad_points);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFAnnot_AppendAttachmentPoints")]
			internal static extern bool FPDFAnnot_AppendAttachmentPoints_x64(FPDF_ANNOTATION annot, [MarshalAs(UnmanagedType.LPStruct)] FS_QUADPOINTSF quad_points);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDFAnnot_AppendAttachmentPoints/*'/>
		public static bool FPDFAnnot_AppendAttachmentPoints(FPDF_ANNOTATION annot, [MarshalAs(UnmanagedType.LPStruct)] FS_QUADPOINTSF quad_points)
		{

			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { return PlatformInvoke.FPDFAnnot_AppendAttachmentPoints_x64(annot, quad_points); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { return PlatformInvoke.FPDFAnnot_AppendAttachmentPoints_x86(annot, quad_points); }
			else
				throw new PlatformNotSupportedException();

		}

		#endregion


		#region FPDFAnnot_CountAttachmentPoints

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFAnnot_CountAttachmentPoints")]
			internal static extern uint FPDFAnnot_CountAttachmentPoints_x86(FPDF_ANNOTATION annot);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFAnnot_CountAttachmentPoints")]
			internal static extern uint FPDFAnnot_CountAttachmentPoints_x64(FPDF_ANNOTATION annot);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDFAnnot_CountAttachmentPoints/*'/>
		public static uint FPDFAnnot_CountAttachmentPoints(FPDF_ANNOTATION annot)
		{

			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { return PlatformInvoke.FPDFAnnot_CountAttachmentPoints_x64(annot); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { return PlatformInvoke.FPDFAnnot_CountAttachmentPoints_x86(annot); }
			else
				throw new PlatformNotSupportedException();

		}

		#endregion


		#region FPDFAnnot_GetAttachmentPoints

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFAnnot_GetAttachmentPoints")]
			internal static extern bool FPDFAnnot_GetAttachmentPoints_x86(FPDF_ANNOTATION annot, uint quad_index, FS_QUADPOINTSF quad_points);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFAnnot_GetAttachmentPoints")]
			internal static extern bool FPDFAnnot_GetAttachmentPoints_x64(FPDF_ANNOTATION annot, uint quad_index, FS_QUADPOINTSF quad_points);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDFAnnot_GetAttachmentPoints/*'/>
		public static bool FPDFAnnot_GetAttachmentPoints(FPDF_ANNOTATION annot, uint quad_index, FS_QUADPOINTSF quad_points)
		{

			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { return PlatformInvoke.FPDFAnnot_GetAttachmentPoints_x64(annot, quad_index, quad_points); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { return PlatformInvoke.FPDFAnnot_GetAttachmentPoints_x86(annot, quad_index, quad_points); }
			else
				throw new PlatformNotSupportedException();

		}

		#endregion


		#region FPDFAnnot_SetRect

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFAnnot_SetRect")]
			internal static extern bool FPDFAnnot_SetRect_x86(FPDF_ANNOTATION annot, [MarshalAs(UnmanagedType.LPStruct)] FS_RECTF rect);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFAnnot_SetRect")]
			internal static extern bool FPDFAnnot_SetRect_x64(FPDF_ANNOTATION annot, [MarshalAs(UnmanagedType.LPStruct)] FS_RECTF rect);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDFAnnot_SetRect/*'/>
		public static bool FPDFAnnot_SetRect(FPDF_ANNOTATION annot, [MarshalAs(UnmanagedType.LPStruct)] FS_RECTF rect)
		{

			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { return PlatformInvoke.FPDFAnnot_SetRect_x64(annot, rect); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { return PlatformInvoke.FPDFAnnot_SetRect_x86(annot, rect); }
			else
				throw new PlatformNotSupportedException();

		}

		#endregion


		#region FPDFAnnot_GetRect

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFAnnot_GetRect")]
			internal static extern bool FPDFAnnot_GetRect_x86(FPDF_ANNOTATION annot, FS_RECTF rect);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFAnnot_GetRect")]
			internal static extern bool FPDFAnnot_GetRect_x64(FPDF_ANNOTATION annot, FS_RECTF rect);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDFAnnot_GetRect/*'/>
		public static bool FPDFAnnot_GetRect(FPDF_ANNOTATION annot, FS_RECTF rect)
		{

			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { return PlatformInvoke.FPDFAnnot_GetRect_x64(annot, rect); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { return PlatformInvoke.FPDFAnnot_GetRect_x86(annot, rect); }
			else
				throw new PlatformNotSupportedException();

		}

		#endregion


		#region FPDFAnnot_GetVertices

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFAnnot_GetVertices")]
			internal static extern ulong FPDFAnnot_GetVertices_x86(FPDF_ANNOTATION annot, FS_POINTF buffer, ulong length);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFAnnot_GetVertices")]
			internal static extern ulong FPDFAnnot_GetVertices_x64(FPDF_ANNOTATION annot, FS_POINTF buffer, ulong length);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDFAnnot_GetVertices/*'/>
		public static ulong FPDFAnnot_GetVertices(FPDF_ANNOTATION annot, FS_POINTF buffer, ulong length)
		{

			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { return PlatformInvoke.FPDFAnnot_GetVertices_x64(annot, buffer, length); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { return PlatformInvoke.FPDFAnnot_GetVertices_x86(annot, buffer, length); }
			else
				throw new PlatformNotSupportedException();

		}

		#endregion


		#region FPDFAnnot_GetInkListCount

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFAnnot_GetInkListCount")]
			internal static extern ulong FPDFAnnot_GetInkListCount_x86(FPDF_ANNOTATION annot);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFAnnot_GetInkListCount")]
			internal static extern ulong FPDFAnnot_GetInkListCount_x64(FPDF_ANNOTATION annot);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDFAnnot_GetInkListCount/*'/>
		public static ulong FPDFAnnot_GetInkListCount(FPDF_ANNOTATION annot)
		{

			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { return PlatformInvoke.FPDFAnnot_GetInkListCount_x64(annot); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { return PlatformInvoke.FPDFAnnot_GetInkListCount_x86(annot); }
			else
				throw new PlatformNotSupportedException();

		}

		#endregion


		#region FPDFAnnot_GetInkListPath

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFAnnot_GetInkListPath")]
			internal static extern ulong FPDFAnnot_GetInkListPath_x86(FPDF_ANNOTATION annot, ulong path_index, FS_POINTF buffer, ulong length);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFAnnot_GetInkListPath")]
			internal static extern ulong FPDFAnnot_GetInkListPath_x64(FPDF_ANNOTATION annot, ulong path_index, FS_POINTF buffer, ulong length);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDFAnnot_GetInkListPath/*'/>
		public static ulong FPDFAnnot_GetInkListPath(FPDF_ANNOTATION annot, ulong path_index, FS_POINTF buffer, ulong length)
		{

			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { return PlatformInvoke.FPDFAnnot_GetInkListPath_x64(annot, path_index, buffer, length); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { return PlatformInvoke.FPDFAnnot_GetInkListPath_x86(annot, path_index, buffer, length); }
			else
				throw new PlatformNotSupportedException();

		}

		#endregion


		#region FPDFAnnot_GetLine

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFAnnot_GetLine")]
			internal static extern bool FPDFAnnot_GetLine_x86(FPDF_ANNOTATION annot, FS_POINTF start, FS_POINTF end);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFAnnot_GetLine")]
			internal static extern bool FPDFAnnot_GetLine_x64(FPDF_ANNOTATION annot, FS_POINTF start, FS_POINTF end);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDFAnnot_GetLine/*'/>
		public static bool FPDFAnnot_GetLine(FPDF_ANNOTATION annot, FS_POINTF start, FS_POINTF end)
		{

			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { return PlatformInvoke.FPDFAnnot_GetLine_x64(annot, start, end); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { return PlatformInvoke.FPDFAnnot_GetLine_x86(annot, start, end); }
			else
				throw new PlatformNotSupportedException();

		}

		#endregion


		#region FPDFAnnot_SetBorder

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFAnnot_SetBorder")]
			internal static extern bool FPDFAnnot_SetBorder_x86(FPDF_ANNOTATION annot, float horizontal_radius, float vertical_radius, float border_width);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFAnnot_SetBorder")]
			internal static extern bool FPDFAnnot_SetBorder_x64(FPDF_ANNOTATION annot, float horizontal_radius, float vertical_radius, float border_width);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDFAnnot_SetBorder/*'/>
		public static bool FPDFAnnot_SetBorder(FPDF_ANNOTATION annot, float horizontal_radius, float vertical_radius, float border_width)
		{

			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { return PlatformInvoke.FPDFAnnot_SetBorder_x64(annot, horizontal_radius, vertical_radius, border_width); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { return PlatformInvoke.FPDFAnnot_SetBorder_x86(annot, horizontal_radius, vertical_radius, border_width); }
			else
				throw new PlatformNotSupportedException();

		}

		#endregion


		#region FPDFAnnot_GetBorder

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFAnnot_GetBorder")]
			internal static extern bool FPDFAnnot_GetBorder_x86(FPDF_ANNOTATION annot, out float horizontal_radius, out float vertical_radius, out float border_width);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFAnnot_GetBorder")]
			internal static extern bool FPDFAnnot_GetBorder_x64(FPDF_ANNOTATION annot, out float horizontal_radius, out float vertical_radius, out float border_width);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDFAnnot_GetBorder/*'/>
		public static bool FPDFAnnot_GetBorder(FPDF_ANNOTATION annot, out float horizontal_radius, out float vertical_radius, out float border_width)
		{

			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { return PlatformInvoke.FPDFAnnot_GetBorder_x64(annot, out horizontal_radius, out vertical_radius, out border_width); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { return PlatformInvoke.FPDFAnnot_GetBorder_x86(annot, out horizontal_radius, out vertical_radius, out border_width); }
			else
				throw new PlatformNotSupportedException();

		}

		#endregion


		#region FPDFAnnot_GetFormAdditionalActionJavaScript

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFAnnot_GetFormAdditionalActionJavaScript")]
			internal static extern ulong FPDFAnnot_GetFormAdditionalActionJavaScript_x86(FPDF_FORMHANDLE hHandle, FPDF_ANNOTATION annot, int evnt, out FPDF_WCHAR buffer, ulong buflen);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFAnnot_GetFormAdditionalActionJavaScript")]
			internal static extern ulong FPDFAnnot_GetFormAdditionalActionJavaScript_x64(FPDF_FORMHANDLE hHandle, FPDF_ANNOTATION annot, int evnt, out FPDF_WCHAR buffer, ulong buflen);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDFAnnot_GetFormAdditionalActionJavaScript/*'/>
		public static ulong FPDFAnnot_GetFormAdditionalActionJavaScript(FPDF_FORMHANDLE hHandle, FPDF_ANNOTATION annot, int evnt, out FPDF_WCHAR buffer, ulong buflen)
		{

			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { return PlatformInvoke.FPDFAnnot_GetFormAdditionalActionJavaScript_x64(hHandle, annot, evnt, out buffer, buflen); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { return PlatformInvoke.FPDFAnnot_GetFormAdditionalActionJavaScript_x86(hHandle, annot, evnt, out buffer, buflen); }
			else
				throw new PlatformNotSupportedException();

		}

		#endregion


		#region FPDFAnnot_HasKey

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFAnnot_HasKey")]
			internal static extern bool FPDFAnnot_HasKey_x86(FPDF_ANNOTATION annot, [MarshalAs(UnmanagedType.LPStr)] string key);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFAnnot_HasKey")]
			internal static extern bool FPDFAnnot_HasKey_x64(FPDF_ANNOTATION annot, [MarshalAs(UnmanagedType.LPStr)] string key);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDFAnnot_HasKey/*'/>
		public static bool FPDFAnnot_HasKey(FPDF_ANNOTATION annot, [MarshalAs(UnmanagedType.LPStr)] string key)
		{

			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { return PlatformInvoke.FPDFAnnot_HasKey_x64(annot, key); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { return PlatformInvoke.FPDFAnnot_HasKey_x86(annot, key); }
			else
				throw new PlatformNotSupportedException();

		}

		#endregion


		#region FPDFAnnot_GetValueType

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFAnnot_GetValueType")]
			internal static extern FPDF_OBJECT_TYPE FPDFAnnot_GetValueType_x86(FPDF_ANNOTATION annot, [MarshalAs(UnmanagedType.LPStr)] string key);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFAnnot_GetValueType")]
			internal static extern FPDF_OBJECT_TYPE FPDFAnnot_GetValueType_x64(FPDF_ANNOTATION annot, [MarshalAs(UnmanagedType.LPStr)] string key);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDFAnnot_GetValueType/*'/>
		public static FPDF_OBJECT_TYPE FPDFAnnot_GetValueType(FPDF_ANNOTATION annot, [MarshalAs(UnmanagedType.LPStr)] string key)
		{

			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { return PlatformInvoke.FPDFAnnot_GetValueType_x64(annot, key); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { return PlatformInvoke.FPDFAnnot_GetValueType_x86(annot, key); }
			else
				throw new PlatformNotSupportedException();

		}

		#endregion


		#region FPDFAnnot_SetStringValue

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFAnnot_SetStringValue")]
			internal static extern bool FPDFAnnot_SetStringValue_x86(FPDF_ANNOTATION annot, [MarshalAs(UnmanagedType.LPStr)] string key, [MarshalAs(UnmanagedType.LPWStr)] string value);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFAnnot_SetStringValue")]
			internal static extern bool FPDFAnnot_SetStringValue_x64(FPDF_ANNOTATION annot, [MarshalAs(UnmanagedType.LPStr)] string key, [MarshalAs(UnmanagedType.LPWStr)] string value);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDFAnnot_SetStringValue/*'/>
		public static bool FPDFAnnot_SetStringValue(FPDF_ANNOTATION annot, [MarshalAs(UnmanagedType.LPStr)] string key, [MarshalAs(UnmanagedType.LPWStr)] string value)
		{

			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { return PlatformInvoke.FPDFAnnot_SetStringValue_x64(annot, key, value); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { return PlatformInvoke.FPDFAnnot_SetStringValue_x86(annot, key, value); }
			else
				throw new PlatformNotSupportedException();

		}

		#endregion


		#region FPDFAnnot_GetStringValue

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFAnnot_GetStringValue")]
			internal static extern ulong FPDFAnnot_GetStringValue_x86(FPDF_ANNOTATION annot, [MarshalAs(UnmanagedType.LPStr)] string key, out FPDF_WCHAR buffer, ulong buflen);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFAnnot_GetStringValue")]
			internal static extern ulong FPDFAnnot_GetStringValue_x64(FPDF_ANNOTATION annot, [MarshalAs(UnmanagedType.LPStr)] string key, out FPDF_WCHAR buffer, ulong buflen);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDFAnnot_GetStringValue/*'/>
		public static ulong FPDFAnnot_GetStringValue(FPDF_ANNOTATION annot, [MarshalAs(UnmanagedType.LPStr)] string key, out FPDF_WCHAR buffer, ulong buflen)
		{

			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { return PlatformInvoke.FPDFAnnot_GetStringValue_x64(annot, key, out buffer, buflen); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { return PlatformInvoke.FPDFAnnot_GetStringValue_x86(annot, key, out buffer, buflen); }
			else
				throw new PlatformNotSupportedException();

		}

		#endregion


		#region FPDFAnnot_GetNumberValue

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFAnnot_GetNumberValue")]
			internal static extern bool FPDFAnnot_GetNumberValue_x86(FPDF_ANNOTATION annot, [MarshalAs(UnmanagedType.LPStr)] string key, out float value);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFAnnot_GetNumberValue")]
			internal static extern bool FPDFAnnot_GetNumberValue_x64(FPDF_ANNOTATION annot, [MarshalAs(UnmanagedType.LPStr)] string key, out float value);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDFAnnot_GetNumberValue/*'/>
		public static bool FPDFAnnot_GetNumberValue(FPDF_ANNOTATION annot, [MarshalAs(UnmanagedType.LPStr)] string key, out float value)
		{

			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { return PlatformInvoke.FPDFAnnot_GetNumberValue_x64(annot, key, out value); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { return PlatformInvoke.FPDFAnnot_GetNumberValue_x86(annot, key, out value); }
			else
				throw new PlatformNotSupportedException();

		}

		#endregion


		#region FPDFAnnot_SetAP

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFAnnot_SetAP")]
			internal static extern bool FPDFAnnot_SetAP_x86(FPDF_ANNOTATION annot, FPDF_ANNOT_APPEARANCEMODE appearanceMode, [MarshalAs(UnmanagedType.LPWStr)] string value);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFAnnot_SetAP")]
			internal static extern bool FPDFAnnot_SetAP_x64(FPDF_ANNOTATION annot, FPDF_ANNOT_APPEARANCEMODE appearanceMode, [MarshalAs(UnmanagedType.LPWStr)] string value);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDFAnnot_SetAP/*'/>
		public static bool FPDFAnnot_SetAP(FPDF_ANNOTATION annot, FPDF_ANNOT_APPEARANCEMODE appearanceMode, [MarshalAs(UnmanagedType.LPWStr)] string value)
		{

			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { return PlatformInvoke.FPDFAnnot_SetAP_x64(annot, appearanceMode, value); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { return PlatformInvoke.FPDFAnnot_SetAP_x86(annot, appearanceMode, value); }
			else
				throw new PlatformNotSupportedException();

		}

		#endregion


		#region FPDFAnnot_GetAP

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFAnnot_GetAP")]
			internal static extern ulong FPDFAnnot_GetAP_x86(FPDF_ANNOTATION annot, FPDF_ANNOT_APPEARANCEMODE appearanceMode, out FPDF_WCHAR buffer, ulong buflen);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFAnnot_GetAP")]
			internal static extern ulong FPDFAnnot_GetAP_x64(FPDF_ANNOTATION annot, FPDF_ANNOT_APPEARANCEMODE appearanceMode, out FPDF_WCHAR buffer, ulong buflen);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDFAnnot_GetAP/*'/>
		public static ulong FPDFAnnot_GetAP(FPDF_ANNOTATION annot, FPDF_ANNOT_APPEARANCEMODE appearanceMode, out FPDF_WCHAR buffer, ulong buflen)
		{

			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { return PlatformInvoke.FPDFAnnot_GetAP_x64(annot, appearanceMode, out buffer, buflen); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { return PlatformInvoke.FPDFAnnot_GetAP_x86(annot, appearanceMode, out buffer, buflen); }
			else
				throw new PlatformNotSupportedException();

		}

		#endregion


		#region FPDFAnnot_GetLinkedAnnot

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFAnnot_GetLinkedAnnot")]
			internal static extern FPDF_ANNOTATION FPDFAnnot_GetLinkedAnnot_x86(FPDF_ANNOTATION annot, [MarshalAs(UnmanagedType.LPStr)] string key);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFAnnot_GetLinkedAnnot")]
			internal static extern FPDF_ANNOTATION FPDFAnnot_GetLinkedAnnot_x64(FPDF_ANNOTATION annot, [MarshalAs(UnmanagedType.LPStr)] string key);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDFAnnot_GetLinkedAnnot/*'/>
		public static FPDF_ANNOTATION FPDFAnnot_GetLinkedAnnot(FPDF_ANNOTATION annot, [MarshalAs(UnmanagedType.LPStr)] string key)
		{

			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { return PlatformInvoke.FPDFAnnot_GetLinkedAnnot_x64(annot, key); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { return PlatformInvoke.FPDFAnnot_GetLinkedAnnot_x86(annot, key); }
			else
				throw new PlatformNotSupportedException();

		}

		#endregion


		#region FPDFAnnot_GetFlags

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFAnnot_GetFlags")]
			internal static extern int FPDFAnnot_GetFlags_x86(FPDF_ANNOTATION annot);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFAnnot_GetFlags")]
			internal static extern int FPDFAnnot_GetFlags_x64(FPDF_ANNOTATION annot);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDFAnnot_GetFlags/*'/>
		public static int FPDFAnnot_GetFlags(FPDF_ANNOTATION annot)
		{

			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { return PlatformInvoke.FPDFAnnot_GetFlags_x64(annot); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { return PlatformInvoke.FPDFAnnot_GetFlags_x86(annot); }
			else
				throw new PlatformNotSupportedException();

		}

		#endregion


		#region FPDFAnnot_SetFlags

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFAnnot_SetFlags")]
			internal static extern bool FPDFAnnot_SetFlags_x86(FPDF_ANNOTATION annot, int flags);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFAnnot_SetFlags")]
			internal static extern bool FPDFAnnot_SetFlags_x64(FPDF_ANNOTATION annot, int flags);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDFAnnot_SetFlags/*'/>
		public static bool FPDFAnnot_SetFlags(FPDF_ANNOTATION annot, int flags)
		{

			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { return PlatformInvoke.FPDFAnnot_SetFlags_x64(annot, flags); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { return PlatformInvoke.FPDFAnnot_SetFlags_x86(annot, flags); }
			else
				throw new PlatformNotSupportedException();

		}

		#endregion


		#region FPDFAnnot_GetFormFieldFlags

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFAnnot_GetFormFieldFlags")]
			internal static extern int FPDFAnnot_GetFormFieldFlags_x86(FPDF_FORMHANDLE handle, FPDF_ANNOTATION annot);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFAnnot_GetFormFieldFlags")]
			internal static extern int FPDFAnnot_GetFormFieldFlags_x64(FPDF_FORMHANDLE handle, FPDF_ANNOTATION annot);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDFAnnot_GetFormFieldFlags/*'/>
		public static int FPDFAnnot_GetFormFieldFlags(FPDF_FORMHANDLE handle, FPDF_ANNOTATION annot)
		{

			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { return PlatformInvoke.FPDFAnnot_GetFormFieldFlags_x64(handle, annot); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { return PlatformInvoke.FPDFAnnot_GetFormFieldFlags_x86(handle, annot); }
			else
				throw new PlatformNotSupportedException();

		}

		#endregion


		#region FPDFAnnot_GetFormFieldAtPoint

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFAnnot_GetFormFieldAtPoint")]
			internal static extern FPDF_ANNOTATION FPDFAnnot_GetFormFieldAtPoint_x86(FPDF_FORMHANDLE hHandle, FPDF_PAGE page, [MarshalAs(UnmanagedType.LPStruct)] FS_POINTF point);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFAnnot_GetFormFieldAtPoint")]
			internal static extern FPDF_ANNOTATION FPDFAnnot_GetFormFieldAtPoint_x64(FPDF_FORMHANDLE hHandle, FPDF_PAGE page, [MarshalAs(UnmanagedType.LPStruct)] FS_POINTF point);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDFAnnot_GetFormFieldAtPoint/*'/>
		public static FPDF_ANNOTATION FPDFAnnot_GetFormFieldAtPoint(FPDF_FORMHANDLE hHandle, FPDF_PAGE page, [MarshalAs(UnmanagedType.LPStruct)] FS_POINTF point)
		{

			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { return PlatformInvoke.FPDFAnnot_GetFormFieldAtPoint_x64(hHandle, page, point); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { return PlatformInvoke.FPDFAnnot_GetFormFieldAtPoint_x86(hHandle, page, point); }
			else
				throw new PlatformNotSupportedException();

		}

		#endregion


		#region FPDFAnnot_GetFormFieldName

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFAnnot_GetFormFieldName")]
			internal static extern ulong FPDFAnnot_GetFormFieldName_x86(FPDF_FORMHANDLE hHandle, FPDF_ANNOTATION annot, out FPDF_WCHAR buffer, ulong buflen);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFAnnot_GetFormFieldName")]
			internal static extern ulong FPDFAnnot_GetFormFieldName_x64(FPDF_FORMHANDLE hHandle, FPDF_ANNOTATION annot, out FPDF_WCHAR buffer, ulong buflen);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDFAnnot_GetFormFieldName/*'/>
		public static ulong FPDFAnnot_GetFormFieldName(FPDF_FORMHANDLE hHandle, FPDF_ANNOTATION annot, out FPDF_WCHAR buffer, ulong buflen)
		{

			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { return PlatformInvoke.FPDFAnnot_GetFormFieldName_x64(hHandle, annot, out buffer, buflen); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { return PlatformInvoke.FPDFAnnot_GetFormFieldName_x86(hHandle, annot, out buffer, buflen); }
			else
				throw new PlatformNotSupportedException();

		}

		#endregion


		#region FPDFAnnot_GetFormFieldAlternateName

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFAnnot_GetFormFieldAlternateName")]
			internal static extern ulong FPDFAnnot_GetFormFieldAlternateName_x86(FPDF_FORMHANDLE hHandle, FPDF_ANNOTATION annot, out FPDF_WCHAR buffer, ulong buflen);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFAnnot_GetFormFieldAlternateName")]
			internal static extern ulong FPDFAnnot_GetFormFieldAlternateName_x64(FPDF_FORMHANDLE hHandle, FPDF_ANNOTATION annot, out FPDF_WCHAR buffer, ulong buflen);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDFAnnot_GetFormFieldAlternateName/*'/>
		public static ulong FPDFAnnot_GetFormFieldAlternateName(FPDF_FORMHANDLE hHandle, FPDF_ANNOTATION annot, out FPDF_WCHAR buffer, ulong buflen)
		{

			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { return PlatformInvoke.FPDFAnnot_GetFormFieldAlternateName_x64(hHandle, annot, out buffer, buflen); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { return PlatformInvoke.FPDFAnnot_GetFormFieldAlternateName_x86(hHandle, annot, out buffer, buflen); }
			else
				throw new PlatformNotSupportedException();

		}

		#endregion


		#region FPDFAnnot_GetFormFieldType

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFAnnot_GetFormFieldType")]
			internal static extern int FPDFAnnot_GetFormFieldType_x86(FPDF_FORMHANDLE hHandle, FPDF_ANNOTATION annot);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFAnnot_GetFormFieldType")]
			internal static extern int FPDFAnnot_GetFormFieldType_x64(FPDF_FORMHANDLE hHandle, FPDF_ANNOTATION annot);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDFAnnot_GetFormFieldType/*'/>
		public static int FPDFAnnot_GetFormFieldType(FPDF_FORMHANDLE hHandle, FPDF_ANNOTATION annot)
		{

			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { return PlatformInvoke.FPDFAnnot_GetFormFieldType_x64(hHandle, annot); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { return PlatformInvoke.FPDFAnnot_GetFormFieldType_x86(hHandle, annot); }
			else
				throw new PlatformNotSupportedException();

		}

		#endregion


		#region FPDFAnnot_GetFormFieldValue

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFAnnot_GetFormFieldValue")]
			internal static extern ulong FPDFAnnot_GetFormFieldValue_x86(FPDF_FORMHANDLE hHandle, FPDF_ANNOTATION annot, out FPDF_WCHAR buffer, ulong buflen);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFAnnot_GetFormFieldValue")]
			internal static extern ulong FPDFAnnot_GetFormFieldValue_x64(FPDF_FORMHANDLE hHandle, FPDF_ANNOTATION annot, out FPDF_WCHAR buffer, ulong buflen);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDFAnnot_GetFormFieldValue/*'/>
		public static ulong FPDFAnnot_GetFormFieldValue(FPDF_FORMHANDLE hHandle, FPDF_ANNOTATION annot, out FPDF_WCHAR buffer, ulong buflen)
		{

			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { return PlatformInvoke.FPDFAnnot_GetFormFieldValue_x64(hHandle, annot, out buffer, buflen); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { return PlatformInvoke.FPDFAnnot_GetFormFieldValue_x86(hHandle, annot, out buffer, buflen); }
			else
				throw new PlatformNotSupportedException();

		}

		#endregion


		#region FPDFAnnot_GetOptionCount

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFAnnot_GetOptionCount")]
			internal static extern int FPDFAnnot_GetOptionCount_x86(FPDF_FORMHANDLE hHandle, FPDF_ANNOTATION annot);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFAnnot_GetOptionCount")]
			internal static extern int FPDFAnnot_GetOptionCount_x64(FPDF_FORMHANDLE hHandle, FPDF_ANNOTATION annot);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDFAnnot_GetOptionCount/*'/>
		public static int FPDFAnnot_GetOptionCount(FPDF_FORMHANDLE hHandle, FPDF_ANNOTATION annot)
		{

			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { return PlatformInvoke.FPDFAnnot_GetOptionCount_x64(hHandle, annot); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { return PlatformInvoke.FPDFAnnot_GetOptionCount_x86(hHandle, annot); }
			else
				throw new PlatformNotSupportedException();

		}

		#endregion


		#region FPDFAnnot_GetOptionLabel

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFAnnot_GetOptionLabel")]
			internal static extern ulong FPDFAnnot_GetOptionLabel_x86(FPDF_FORMHANDLE hHandle, FPDF_ANNOTATION annot, int index, out FPDF_WCHAR buffer, ulong buflen);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFAnnot_GetOptionLabel")]
			internal static extern ulong FPDFAnnot_GetOptionLabel_x64(FPDF_FORMHANDLE hHandle, FPDF_ANNOTATION annot, int index, out FPDF_WCHAR buffer, ulong buflen);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDFAnnot_GetOptionLabel/*'/>
		public static ulong FPDFAnnot_GetOptionLabel(FPDF_FORMHANDLE hHandle, FPDF_ANNOTATION annot, int index, out FPDF_WCHAR buffer, ulong buflen)
		{

			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { return PlatformInvoke.FPDFAnnot_GetOptionLabel_x64(hHandle, annot, index, out buffer, buflen); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { return PlatformInvoke.FPDFAnnot_GetOptionLabel_x86(hHandle, annot, index, out buffer, buflen); }
			else
				throw new PlatformNotSupportedException();

		}

		#endregion


		#region FPDFAnnot_IsOptionSelected

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFAnnot_IsOptionSelected")]
			internal static extern bool FPDFAnnot_IsOptionSelected_x86(FPDF_FORMHANDLE handle, FPDF_ANNOTATION annot, int index);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFAnnot_IsOptionSelected")]
			internal static extern bool FPDFAnnot_IsOptionSelected_x64(FPDF_FORMHANDLE handle, FPDF_ANNOTATION annot, int index);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDFAnnot_IsOptionSelected/*'/>
		public static bool FPDFAnnot_IsOptionSelected(FPDF_FORMHANDLE handle, FPDF_ANNOTATION annot, int index)
		{

			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { return PlatformInvoke.FPDFAnnot_IsOptionSelected_x64(handle, annot, index); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { return PlatformInvoke.FPDFAnnot_IsOptionSelected_x86(handle, annot, index); }
			else
				throw new PlatformNotSupportedException();

		}

		#endregion


		#region FPDFAnnot_GetFontSize

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFAnnot_GetFontSize")]
			internal static extern bool FPDFAnnot_GetFontSize_x86(FPDF_FORMHANDLE hHandle, FPDF_ANNOTATION annot, out float value);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFAnnot_GetFontSize")]
			internal static extern bool FPDFAnnot_GetFontSize_x64(FPDF_FORMHANDLE hHandle, FPDF_ANNOTATION annot, out float value);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDFAnnot_GetFontSize/*'/>
		public static bool FPDFAnnot_GetFontSize(FPDF_FORMHANDLE hHandle, FPDF_ANNOTATION annot, out float value)
		{

			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { return PlatformInvoke.FPDFAnnot_GetFontSize_x64(hHandle, annot, out value); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { return PlatformInvoke.FPDFAnnot_GetFontSize_x86(hHandle, annot, out value); }
			else
				throw new PlatformNotSupportedException();

		}

		#endregion


		#region FPDFAnnot_IsChecked

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFAnnot_IsChecked")]
			internal static extern bool FPDFAnnot_IsChecked_x86(FPDF_FORMHANDLE hHandle, FPDF_ANNOTATION annot);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFAnnot_IsChecked")]
			internal static extern bool FPDFAnnot_IsChecked_x64(FPDF_FORMHANDLE hHandle, FPDF_ANNOTATION annot);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDFAnnot_IsChecked/*'/>
		public static bool FPDFAnnot_IsChecked(FPDF_FORMHANDLE hHandle, FPDF_ANNOTATION annot)
		{

			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { return PlatformInvoke.FPDFAnnot_IsChecked_x64(hHandle, annot); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { return PlatformInvoke.FPDFAnnot_IsChecked_x86(hHandle, annot); }
			else
				throw new PlatformNotSupportedException();

		}

		#endregion


		#region FPDFAnnot_SetFocusableSubtypes

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFAnnot_SetFocusableSubtypes")]
			internal static extern bool FPDFAnnot_SetFocusableSubtypes_x86(FPDF_FORMHANDLE hHandle, ref FPDF_ANNOTATION_SUBTYPE subtypes, uint count);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFAnnot_SetFocusableSubtypes")]
			internal static extern bool FPDFAnnot_SetFocusableSubtypes_x64(FPDF_FORMHANDLE hHandle, ref FPDF_ANNOTATION_SUBTYPE subtypes, uint count);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDFAnnot_SetFocusableSubtypes/*'/>
		public static bool FPDFAnnot_SetFocusableSubtypes(FPDF_FORMHANDLE hHandle, ref FPDF_ANNOTATION_SUBTYPE subtypes, uint count)
		{

			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { return PlatformInvoke.FPDFAnnot_SetFocusableSubtypes_x64(hHandle, ref subtypes, count); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { return PlatformInvoke.FPDFAnnot_SetFocusableSubtypes_x86(hHandle, ref subtypes, count); }
			else
				throw new PlatformNotSupportedException();

		}

		#endregion


		#region FPDFAnnot_GetFocusableSubtypesCount

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFAnnot_GetFocusableSubtypesCount")]
			internal static extern int FPDFAnnot_GetFocusableSubtypesCount_x86(FPDF_FORMHANDLE hHandle);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFAnnot_GetFocusableSubtypesCount")]
			internal static extern int FPDFAnnot_GetFocusableSubtypesCount_x64(FPDF_FORMHANDLE hHandle);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDFAnnot_GetFocusableSubtypesCount/*'/>
		public static int FPDFAnnot_GetFocusableSubtypesCount(FPDF_FORMHANDLE hHandle)
		{

			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { return PlatformInvoke.FPDFAnnot_GetFocusableSubtypesCount_x64(hHandle); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { return PlatformInvoke.FPDFAnnot_GetFocusableSubtypesCount_x86(hHandle); }
			else
				throw new PlatformNotSupportedException();

		}

		#endregion


		#region FPDFAnnot_GetFocusableSubtypes

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFAnnot_GetFocusableSubtypes")]
			internal static extern bool FPDFAnnot_GetFocusableSubtypes_x86(FPDF_FORMHANDLE hHandle, out FPDF_ANNOTATION_SUBTYPE subtypes, uint count);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFAnnot_GetFocusableSubtypes")]
			internal static extern bool FPDFAnnot_GetFocusableSubtypes_x64(FPDF_FORMHANDLE hHandle, out FPDF_ANNOTATION_SUBTYPE subtypes, uint count);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDFAnnot_GetFocusableSubtypes/*'/>
		public static bool FPDFAnnot_GetFocusableSubtypes(FPDF_FORMHANDLE hHandle, out FPDF_ANNOTATION_SUBTYPE subtypes, uint count)
		{

			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { return PlatformInvoke.FPDFAnnot_GetFocusableSubtypes_x64(hHandle, out subtypes, count); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { return PlatformInvoke.FPDFAnnot_GetFocusableSubtypes_x86(hHandle, out subtypes, count); }
			else
				throw new PlatformNotSupportedException();

		}

		#endregion


		#region FPDFAnnot_GetLink

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFAnnot_GetLink")]
			internal static extern FPDF_LINK FPDFAnnot_GetLink_x86(FPDF_ANNOTATION annot);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFAnnot_GetLink")]
			internal static extern FPDF_LINK FPDFAnnot_GetLink_x64(FPDF_ANNOTATION annot);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDFAnnot_GetLink/*'/>
		public static FPDF_LINK FPDFAnnot_GetLink(FPDF_ANNOTATION annot)
		{

			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { return PlatformInvoke.FPDFAnnot_GetLink_x64(annot); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { return PlatformInvoke.FPDFAnnot_GetLink_x86(annot); }
			else
				throw new PlatformNotSupportedException();

		}

		#endregion


		#region FPDFAnnot_GetFormControlCount

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFAnnot_GetFormControlCount")]
			internal static extern int FPDFAnnot_GetFormControlCount_x86(FPDF_FORMHANDLE hHandle, FPDF_ANNOTATION annot);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFAnnot_GetFormControlCount")]
			internal static extern int FPDFAnnot_GetFormControlCount_x64(FPDF_FORMHANDLE hHandle, FPDF_ANNOTATION annot);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDFAnnot_GetFormControlCount/*'/>
		public static int FPDFAnnot_GetFormControlCount(FPDF_FORMHANDLE hHandle, FPDF_ANNOTATION annot)
		{

			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { return PlatformInvoke.FPDFAnnot_GetFormControlCount_x64(hHandle, annot); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { return PlatformInvoke.FPDFAnnot_GetFormControlCount_x86(hHandle, annot); }
			else
				throw new PlatformNotSupportedException();

		}

		#endregion


		#region FPDFAnnot_GetFormControlIndex

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFAnnot_GetFormControlIndex")]
			internal static extern int FPDFAnnot_GetFormControlIndex_x86(FPDF_FORMHANDLE hHandle, FPDF_ANNOTATION annot);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFAnnot_GetFormControlIndex")]
			internal static extern int FPDFAnnot_GetFormControlIndex_x64(FPDF_FORMHANDLE hHandle, FPDF_ANNOTATION annot);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDFAnnot_GetFormControlIndex/*'/>
		public static int FPDFAnnot_GetFormControlIndex(FPDF_FORMHANDLE hHandle, FPDF_ANNOTATION annot)
		{

			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { return PlatformInvoke.FPDFAnnot_GetFormControlIndex_x64(hHandle, annot); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { return PlatformInvoke.FPDFAnnot_GetFormControlIndex_x86(hHandle, annot); }
			else
				throw new PlatformNotSupportedException();

		}

		#endregion


		#region FPDFAnnot_GetFormFieldExportValue

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFAnnot_GetFormFieldExportValue")]
			internal static extern ulong FPDFAnnot_GetFormFieldExportValue_x86(FPDF_FORMHANDLE hHandle, FPDF_ANNOTATION annot, out FPDF_WCHAR buffer, ulong buflen);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFAnnot_GetFormFieldExportValue")]
			internal static extern ulong FPDFAnnot_GetFormFieldExportValue_x64(FPDF_FORMHANDLE hHandle, FPDF_ANNOTATION annot, out FPDF_WCHAR buffer, ulong buflen);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDFAnnot_GetFormFieldExportValue/*'/>
		public static ulong FPDFAnnot_GetFormFieldExportValue(FPDF_FORMHANDLE hHandle, FPDF_ANNOTATION annot, out FPDF_WCHAR buffer, ulong buflen)
		{

			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { return PlatformInvoke.FPDFAnnot_GetFormFieldExportValue_x64(hHandle, annot, out buffer, buflen); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { return PlatformInvoke.FPDFAnnot_GetFormFieldExportValue_x86(hHandle, annot, out buffer, buflen); }
			else
				throw new PlatformNotSupportedException();

		}

		#endregion


		#region FPDFAnnot_SetURI

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFAnnot_SetURI")]
			internal static extern bool FPDFAnnot_SetURI_x86(FPDF_ANNOTATION annot, ref char uri);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFAnnot_SetURI")]
			internal static extern bool FPDFAnnot_SetURI_x64(FPDF_ANNOTATION annot, ref char uri);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDFAnnot_SetURI/*'/>
		public static bool FPDFAnnot_SetURI(FPDF_ANNOTATION annot, ref char uri)
		{

			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { return PlatformInvoke.FPDFAnnot_SetURI_x64(annot, ref uri); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { return PlatformInvoke.FPDFAnnot_SetURI_x86(annot, ref uri); }
			else
				throw new PlatformNotSupportedException();

		}

		#endregion


		#region FPDFDoc_GetAttachmentCount

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFDoc_GetAttachmentCount")]
			internal static extern int FPDFDoc_GetAttachmentCount_x86(FPDF_DOCUMENT document);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFDoc_GetAttachmentCount")]
			internal static extern int FPDFDoc_GetAttachmentCount_x64(FPDF_DOCUMENT document);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDFDoc_GetAttachmentCount/*'/>
		public static int FPDFDoc_GetAttachmentCount(FPDF_DOCUMENT document)
		{

			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { return PlatformInvoke.FPDFDoc_GetAttachmentCount_x64(document); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { return PlatformInvoke.FPDFDoc_GetAttachmentCount_x86(document); }
			else
				throw new PlatformNotSupportedException();

		}

		#endregion


		#region FPDFDoc_AddAttachment

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFDoc_AddAttachment")]
			internal static extern FPDF_ATTACHMENT FPDFDoc_AddAttachment_x86(FPDF_DOCUMENT document, [MarshalAs(UnmanagedType.LPWStr)] string name);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFDoc_AddAttachment")]
			internal static extern FPDF_ATTACHMENT FPDFDoc_AddAttachment_x64(FPDF_DOCUMENT document, [MarshalAs(UnmanagedType.LPWStr)] string name);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDFDoc_AddAttachment/*'/>
		public static FPDF_ATTACHMENT FPDFDoc_AddAttachment(FPDF_DOCUMENT document, [MarshalAs(UnmanagedType.LPWStr)] string name)
		{

			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { return PlatformInvoke.FPDFDoc_AddAttachment_x64(document, name); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { return PlatformInvoke.FPDFDoc_AddAttachment_x86(document, name); }
			else
				throw new PlatformNotSupportedException();

		}

		#endregion


		#region FPDFDoc_GetAttachment

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFDoc_GetAttachment")]
			internal static extern FPDF_ATTACHMENT FPDFDoc_GetAttachment_x86(FPDF_DOCUMENT document, int index);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFDoc_GetAttachment")]
			internal static extern FPDF_ATTACHMENT FPDFDoc_GetAttachment_x64(FPDF_DOCUMENT document, int index);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDFDoc_GetAttachment/*'/>
		public static FPDF_ATTACHMENT FPDFDoc_GetAttachment(FPDF_DOCUMENT document, int index)
		{

			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { return PlatformInvoke.FPDFDoc_GetAttachment_x64(document, index); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { return PlatformInvoke.FPDFDoc_GetAttachment_x86(document, index); }
			else
				throw new PlatformNotSupportedException();

		}

		#endregion


		#region FPDFDoc_DeleteAttachment

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFDoc_DeleteAttachment")]
			internal static extern bool FPDFDoc_DeleteAttachment_x86(FPDF_DOCUMENT document, int index);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFDoc_DeleteAttachment")]
			internal static extern bool FPDFDoc_DeleteAttachment_x64(FPDF_DOCUMENT document, int index);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDFDoc_DeleteAttachment/*'/>
		public static bool FPDFDoc_DeleteAttachment(FPDF_DOCUMENT document, int index)
		{

			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { return PlatformInvoke.FPDFDoc_DeleteAttachment_x64(document, index); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { return PlatformInvoke.FPDFDoc_DeleteAttachment_x86(document, index); }
			else
				throw new PlatformNotSupportedException();

		}

		#endregion


		#region FPDFAttachment_GetName

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFAttachment_GetName")]
			internal static extern ulong FPDFAttachment_GetName_x86(FPDF_ATTACHMENT attachment, out FPDF_WCHAR buffer, ulong buflen);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFAttachment_GetName")]
			internal static extern ulong FPDFAttachment_GetName_x64(FPDF_ATTACHMENT attachment, out FPDF_WCHAR buffer, ulong buflen);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDFAttachment_GetName/*'/>
		public static ulong FPDFAttachment_GetName(FPDF_ATTACHMENT attachment, out FPDF_WCHAR buffer, ulong buflen)
		{

			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { return PlatformInvoke.FPDFAttachment_GetName_x64(attachment, out buffer, buflen); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { return PlatformInvoke.FPDFAttachment_GetName_x86(attachment, out buffer, buflen); }
			else
				throw new PlatformNotSupportedException();

		}

		#endregion


		#region FPDFAttachment_HasKey

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFAttachment_HasKey")]
			internal static extern bool FPDFAttachment_HasKey_x86(FPDF_ATTACHMENT attachment, [MarshalAs(UnmanagedType.LPStr)] string key);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFAttachment_HasKey")]
			internal static extern bool FPDFAttachment_HasKey_x64(FPDF_ATTACHMENT attachment, [MarshalAs(UnmanagedType.LPStr)] string key);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDFAttachment_HasKey/*'/>
		public static bool FPDFAttachment_HasKey(FPDF_ATTACHMENT attachment, [MarshalAs(UnmanagedType.LPStr)] string key)
		{

			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { return PlatformInvoke.FPDFAttachment_HasKey_x64(attachment, key); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { return PlatformInvoke.FPDFAttachment_HasKey_x86(attachment, key); }
			else
				throw new PlatformNotSupportedException();

		}

		#endregion


		#region FPDFAttachment_GetValueType

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFAttachment_GetValueType")]
			internal static extern FPDF_OBJECT_TYPE FPDFAttachment_GetValueType_x86(FPDF_ATTACHMENT attachment, [MarshalAs(UnmanagedType.LPStr)] string key);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFAttachment_GetValueType")]
			internal static extern FPDF_OBJECT_TYPE FPDFAttachment_GetValueType_x64(FPDF_ATTACHMENT attachment, [MarshalAs(UnmanagedType.LPStr)] string key);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDFAttachment_GetValueType/*'/>
		public static FPDF_OBJECT_TYPE FPDFAttachment_GetValueType(FPDF_ATTACHMENT attachment, [MarshalAs(UnmanagedType.LPStr)] string key)
		{

			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { return PlatformInvoke.FPDFAttachment_GetValueType_x64(attachment, key); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { return PlatformInvoke.FPDFAttachment_GetValueType_x86(attachment, key); }
			else
				throw new PlatformNotSupportedException();

		}

		#endregion


		#region FPDFAttachment_SetStringValue

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFAttachment_SetStringValue")]
			internal static extern bool FPDFAttachment_SetStringValue_x86(FPDF_ATTACHMENT attachment, [MarshalAs(UnmanagedType.LPStr)] string key, [MarshalAs(UnmanagedType.LPWStr)] string value);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFAttachment_SetStringValue")]
			internal static extern bool FPDFAttachment_SetStringValue_x64(FPDF_ATTACHMENT attachment, [MarshalAs(UnmanagedType.LPStr)] string key, [MarshalAs(UnmanagedType.LPWStr)] string value);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDFAttachment_SetStringValue/*'/>
		public static bool FPDFAttachment_SetStringValue(FPDF_ATTACHMENT attachment, [MarshalAs(UnmanagedType.LPStr)] string key, [MarshalAs(UnmanagedType.LPWStr)] string value)
		{

			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { return PlatformInvoke.FPDFAttachment_SetStringValue_x64(attachment, key, value); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { return PlatformInvoke.FPDFAttachment_SetStringValue_x86(attachment, key, value); }
			else
				throw new PlatformNotSupportedException();

		}

		#endregion


		#region FPDFAttachment_GetStringValue

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFAttachment_GetStringValue")]
			internal static extern ulong FPDFAttachment_GetStringValue_x86(FPDF_ATTACHMENT attachment, [MarshalAs(UnmanagedType.LPStr)] string key, out FPDF_WCHAR buffer, ulong buflen);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFAttachment_GetStringValue")]
			internal static extern ulong FPDFAttachment_GetStringValue_x64(FPDF_ATTACHMENT attachment, [MarshalAs(UnmanagedType.LPStr)] string key, out FPDF_WCHAR buffer, ulong buflen);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDFAttachment_GetStringValue/*'/>
		public static ulong FPDFAttachment_GetStringValue(FPDF_ATTACHMENT attachment, [MarshalAs(UnmanagedType.LPStr)] string key, out FPDF_WCHAR buffer, ulong buflen)
		{

			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { return PlatformInvoke.FPDFAttachment_GetStringValue_x64(attachment, key, out buffer, buflen); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { return PlatformInvoke.FPDFAttachment_GetStringValue_x86(attachment, key, out buffer, buflen); }
			else
				throw new PlatformNotSupportedException();

		}

		#endregion


		#region FPDFAttachment_SetFile

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFAttachment_SetFile")]
			internal static extern bool FPDFAttachment_SetFile_x86(FPDF_ATTACHMENT attachment, FPDF_DOCUMENT document, ref byte contents, ulong len);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFAttachment_SetFile")]
			internal static extern bool FPDFAttachment_SetFile_x64(FPDF_ATTACHMENT attachment, FPDF_DOCUMENT document, ref byte contents, ulong len);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDFAttachment_SetFile/*'/>
		public static bool FPDFAttachment_SetFile(FPDF_ATTACHMENT attachment, FPDF_DOCUMENT document, ref byte contents, ulong len)
		{

			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { return PlatformInvoke.FPDFAttachment_SetFile_x64(attachment, document, ref contents, len); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { return PlatformInvoke.FPDFAttachment_SetFile_x86(attachment, document, ref contents, len); }
			else
				throw new PlatformNotSupportedException();

		}

		#endregion


		#region FPDFAttachment_GetFile

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFAttachment_GetFile")]
			internal static extern bool FPDFAttachment_GetFile_x86(FPDF_ATTACHMENT attachment, ref byte buffer, ulong buflen, out ulong out_buflen);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFAttachment_GetFile")]
			internal static extern bool FPDFAttachment_GetFile_x64(FPDF_ATTACHMENT attachment, ref byte buffer, ulong buflen, out ulong out_buflen);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDFAttachment_GetFile/*'/>
		public static bool FPDFAttachment_GetFile(FPDF_ATTACHMENT attachment, ref byte buffer, ulong buflen, out ulong out_buflen)
		{

			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { return PlatformInvoke.FPDFAttachment_GetFile_x64(attachment, ref buffer, buflen, out out_buflen); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { return PlatformInvoke.FPDFAttachment_GetFile_x86(attachment, ref buffer, buflen, out out_buflen); }
			else
				throw new PlatformNotSupportedException();

		}

		#endregion


		#region FPDFCatalog_IsTagged

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFCatalog_IsTagged")]
			internal static extern bool FPDFCatalog_IsTagged_x86(FPDF_DOCUMENT document);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFCatalog_IsTagged")]
			internal static extern bool FPDFCatalog_IsTagged_x64(FPDF_DOCUMENT document);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDFCatalog_IsTagged/*'/>
		public static bool FPDFCatalog_IsTagged(FPDF_DOCUMENT document)
		{

			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { return PlatformInvoke.FPDFCatalog_IsTagged_x64(document); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { return PlatformInvoke.FPDFCatalog_IsTagged_x86(document); }
			else
				throw new PlatformNotSupportedException();

		}

		#endregion


		#region FPDFAvail_Create

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFAvail_Create")]
			internal static extern FPDF_AVAIL FPDFAvail_Create_x86(out FX_FILEAVAIL file_avail, out FPDF_FILEACCESS file);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFAvail_Create")]
			internal static extern FPDF_AVAIL FPDFAvail_Create_x64(out FX_FILEAVAIL file_avail, out FPDF_FILEACCESS file);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDFAvail_Create/*'/>
		public static FPDF_AVAIL FPDFAvail_Create(out FX_FILEAVAIL file_avail, out FPDF_FILEACCESS file)
		{

			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { return PlatformInvoke.FPDFAvail_Create_x64(out file_avail, out file); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { return PlatformInvoke.FPDFAvail_Create_x86(out file_avail, out file); }
			else
				throw new PlatformNotSupportedException();

		}

		#endregion


		#region FPDFAvail_Destroy

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFAvail_Destroy")]
			internal static extern void FPDFAvail_Destroy_x86(FPDF_AVAIL avail);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFAvail_Destroy")]
			internal static extern void FPDFAvail_Destroy_x64(FPDF_AVAIL avail);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDFAvail_Destroy/*'/>
		public static void FPDFAvail_Destroy(FPDF_AVAIL avail)
		{

			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { PlatformInvoke.FPDFAvail_Destroy_x64(avail); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { PlatformInvoke.FPDFAvail_Destroy_x86(avail); }
			else
				throw new PlatformNotSupportedException();

		}

		#endregion


		#region FPDFAvail_IsDocAvail

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFAvail_IsDocAvail")]
			internal static extern int FPDFAvail_IsDocAvail_x86(FPDF_AVAIL avail, out FX_DOWNLOADHINTS hints);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFAvail_IsDocAvail")]
			internal static extern int FPDFAvail_IsDocAvail_x64(FPDF_AVAIL avail, out FX_DOWNLOADHINTS hints);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDFAvail_IsDocAvail/*'/>
		public static int FPDFAvail_IsDocAvail(FPDF_AVAIL avail, out FX_DOWNLOADHINTS hints)
		{

			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { return PlatformInvoke.FPDFAvail_IsDocAvail_x64(avail, out hints); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { return PlatformInvoke.FPDFAvail_IsDocAvail_x86(avail, out hints); }
			else
				throw new PlatformNotSupportedException();

		}

		#endregion


		#region FPDFAvail_GetDocument

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFAvail_GetDocument")]
			internal static extern FPDF_DOCUMENT FPDFAvail_GetDocument_x86(FPDF_AVAIL avail, [MarshalAs(UnmanagedType.LPStr)] string password);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFAvail_GetDocument")]
			internal static extern FPDF_DOCUMENT FPDFAvail_GetDocument_x64(FPDF_AVAIL avail, [MarshalAs(UnmanagedType.LPStr)] string password);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDFAvail_GetDocument/*'/>
		public static FPDF_DOCUMENT FPDFAvail_GetDocument(FPDF_AVAIL avail, [MarshalAs(UnmanagedType.LPStr)] string password)
		{

			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { return PlatformInvoke.FPDFAvail_GetDocument_x64(avail, password); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { return PlatformInvoke.FPDFAvail_GetDocument_x86(avail, password); }
			else
				throw new PlatformNotSupportedException();

		}

		#endregion


		#region FPDFAvail_GetFirstPageNum

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFAvail_GetFirstPageNum")]
			internal static extern int FPDFAvail_GetFirstPageNum_x86(FPDF_DOCUMENT doc);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFAvail_GetFirstPageNum")]
			internal static extern int FPDFAvail_GetFirstPageNum_x64(FPDF_DOCUMENT doc);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDFAvail_GetFirstPageNum/*'/>
		public static int FPDFAvail_GetFirstPageNum(FPDF_DOCUMENT doc)
		{

			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { return PlatformInvoke.FPDFAvail_GetFirstPageNum_x64(doc); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { return PlatformInvoke.FPDFAvail_GetFirstPageNum_x86(doc); }
			else
				throw new PlatformNotSupportedException();

		}

		#endregion


		#region FPDFAvail_IsPageAvail

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFAvail_IsPageAvail")]
			internal static extern int FPDFAvail_IsPageAvail_x86(FPDF_AVAIL avail, int page_index, out FX_DOWNLOADHINTS hints);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFAvail_IsPageAvail")]
			internal static extern int FPDFAvail_IsPageAvail_x64(FPDF_AVAIL avail, int page_index, out FX_DOWNLOADHINTS hints);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDFAvail_IsPageAvail/*'/>
		public static int FPDFAvail_IsPageAvail(FPDF_AVAIL avail, int page_index, out FX_DOWNLOADHINTS hints)
		{

			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { return PlatformInvoke.FPDFAvail_IsPageAvail_x64(avail, page_index, out hints); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { return PlatformInvoke.FPDFAvail_IsPageAvail_x86(avail, page_index, out hints); }
			else
				throw new PlatformNotSupportedException();

		}

		#endregion


		#region FPDFAvail_IsFormAvail

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFAvail_IsFormAvail")]
			internal static extern int FPDFAvail_IsFormAvail_x86(FPDF_AVAIL avail, out FX_DOWNLOADHINTS hints);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFAvail_IsFormAvail")]
			internal static extern int FPDFAvail_IsFormAvail_x64(FPDF_AVAIL avail, out FX_DOWNLOADHINTS hints);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDFAvail_IsFormAvail/*'/>
		public static int FPDFAvail_IsFormAvail(FPDF_AVAIL avail, out FX_DOWNLOADHINTS hints)
		{

			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { return PlatformInvoke.FPDFAvail_IsFormAvail_x64(avail, out hints); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { return PlatformInvoke.FPDFAvail_IsFormAvail_x86(avail, out hints); }
			else
				throw new PlatformNotSupportedException();

		}

		#endregion


		#region FPDFAvail_IsLinearized

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFAvail_IsLinearized")]
			internal static extern int FPDFAvail_IsLinearized_x86(FPDF_AVAIL avail);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFAvail_IsLinearized")]
			internal static extern int FPDFAvail_IsLinearized_x64(FPDF_AVAIL avail);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDFAvail_IsLinearized/*'/>
		public static int FPDFAvail_IsLinearized(FPDF_AVAIL avail)
		{

			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { return PlatformInvoke.FPDFAvail_IsLinearized_x64(avail); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { return PlatformInvoke.FPDFAvail_IsLinearized_x86(avail); }
			else
				throw new PlatformNotSupportedException();

		}

		#endregion


		#region FPDFDOC_InitFormFillEnvironment

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFDOC_InitFormFillEnvironment")]
			internal static extern FPDF_FORMHANDLE FPDFDOC_InitFormFillEnvironment_x86(FPDF_DOCUMENT document, FPDF_FORMFILLINFO formInfo);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFDOC_InitFormFillEnvironment")]
			internal static extern FPDF_FORMHANDLE FPDFDOC_InitFormFillEnvironment_x64(FPDF_DOCUMENT document, FPDF_FORMFILLINFO formInfo);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDFDOC_InitFormFillEnvironment/*'/>
		public static FPDF_FORMHANDLE FPDFDOC_InitFormFillEnvironment(FPDF_DOCUMENT document, FPDF_FORMFILLINFO formInfo)
		{

			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { return PlatformInvoke.FPDFDOC_InitFormFillEnvironment_x64(document, formInfo); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { return PlatformInvoke.FPDFDOC_InitFormFillEnvironment_x86(document, formInfo); }
			else
				throw new PlatformNotSupportedException();

		}

		#endregion


		#region FPDFDOC_ExitFormFillEnvironment

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFDOC_ExitFormFillEnvironment")]
			internal static extern void FPDFDOC_ExitFormFillEnvironment_x86(FPDF_FORMHANDLE hHandle);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFDOC_ExitFormFillEnvironment")]
			internal static extern void FPDFDOC_ExitFormFillEnvironment_x64(FPDF_FORMHANDLE hHandle);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDFDOC_ExitFormFillEnvironment/*'/>
		public static void FPDFDOC_ExitFormFillEnvironment(FPDF_FORMHANDLE hHandle)
		{

			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { PlatformInvoke.FPDFDOC_ExitFormFillEnvironment_x64(hHandle); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { PlatformInvoke.FPDFDOC_ExitFormFillEnvironment_x86(hHandle); }
			else
				throw new PlatformNotSupportedException();

		}

		#endregion


		#region FORM_OnAfterLoadPage

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FORM_OnAfterLoadPage")]
			internal static extern void FORM_OnAfterLoadPage_x86(FPDF_PAGE page, FPDF_FORMHANDLE hHandle);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FORM_OnAfterLoadPage")]
			internal static extern void FORM_OnAfterLoadPage_x64(FPDF_PAGE page, FPDF_FORMHANDLE hHandle);
		}

		/// <include file='PDFium.xml' path='Documentation/FORM_OnAfterLoadPage/*'/>
		public static void FORM_OnAfterLoadPage(FPDF_PAGE page, FPDF_FORMHANDLE hHandle)
		{

			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { PlatformInvoke.FORM_OnAfterLoadPage_x64(page, hHandle); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { PlatformInvoke.FORM_OnAfterLoadPage_x86(page, hHandle); }
			else
				throw new PlatformNotSupportedException();

		}

		#endregion


		#region FORM_OnBeforeClosePage

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FORM_OnBeforeClosePage")]
			internal static extern void FORM_OnBeforeClosePage_x86(FPDF_PAGE page, FPDF_FORMHANDLE hHandle);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FORM_OnBeforeClosePage")]
			internal static extern void FORM_OnBeforeClosePage_x64(FPDF_PAGE page, FPDF_FORMHANDLE hHandle);
		}

		/// <include file='PDFium.xml' path='Documentation/FORM_OnBeforeClosePage/*'/>
		public static void FORM_OnBeforeClosePage(FPDF_PAGE page, FPDF_FORMHANDLE hHandle)
		{

			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { PlatformInvoke.FORM_OnBeforeClosePage_x64(page, hHandle); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { PlatformInvoke.FORM_OnBeforeClosePage_x86(page, hHandle); }
			else
				throw new PlatformNotSupportedException();

		}

		#endregion


		#region FORM_DoDocumentJSAction

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FORM_DoDocumentJSAction")]
			internal static extern void FORM_DoDocumentJSAction_x86(FPDF_FORMHANDLE hHandle);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FORM_DoDocumentJSAction")]
			internal static extern void FORM_DoDocumentJSAction_x64(FPDF_FORMHANDLE hHandle);
		}

		/// <include file='PDFium.xml' path='Documentation/FORM_DoDocumentJSAction/*'/>
		public static void FORM_DoDocumentJSAction(FPDF_FORMHANDLE hHandle)
		{

			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { PlatformInvoke.FORM_DoDocumentJSAction_x64(hHandle); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { PlatformInvoke.FORM_DoDocumentJSAction_x86(hHandle); }
			else
				throw new PlatformNotSupportedException();

		}

		#endregion


		#region FORM_DoDocumentOpenAction

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FORM_DoDocumentOpenAction")]
			internal static extern void FORM_DoDocumentOpenAction_x86(FPDF_FORMHANDLE hHandle);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FORM_DoDocumentOpenAction")]
			internal static extern void FORM_DoDocumentOpenAction_x64(FPDF_FORMHANDLE hHandle);
		}

		/// <include file='PDFium.xml' path='Documentation/FORM_DoDocumentOpenAction/*'/>
		public static void FORM_DoDocumentOpenAction(FPDF_FORMHANDLE hHandle)
		{

			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { PlatformInvoke.FORM_DoDocumentOpenAction_x64(hHandle); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { PlatformInvoke.FORM_DoDocumentOpenAction_x86(hHandle); }
			else
				throw new PlatformNotSupportedException();

		}

		#endregion


		#region FORM_DoDocumentAAction

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FORM_DoDocumentAAction")]
			internal static extern void FORM_DoDocumentAAction_x86(FPDF_FORMHANDLE hHandle, FPDFDOC_AACTION aaType);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FORM_DoDocumentAAction")]
			internal static extern void FORM_DoDocumentAAction_x64(FPDF_FORMHANDLE hHandle, FPDFDOC_AACTION aaType);
		}

		/// <include file='PDFium.xml' path='Documentation/FORM_DoDocumentAAction/*'/>
		public static void FORM_DoDocumentAAction(FPDF_FORMHANDLE hHandle, FPDFDOC_AACTION aaType)
		{

			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { PlatformInvoke.FORM_DoDocumentAAction_x64(hHandle, aaType); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { PlatformInvoke.FORM_DoDocumentAAction_x86(hHandle, aaType); }
			else
				throw new PlatformNotSupportedException();

		}

		#endregion


		#region FORM_DoPageAAction

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FORM_DoPageAAction")]
			internal static extern void FORM_DoPageAAction_x86(FPDF_PAGE page, FPDF_FORMHANDLE hHandle, int aaType);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FORM_DoPageAAction")]
			internal static extern void FORM_DoPageAAction_x64(FPDF_PAGE page, FPDF_FORMHANDLE hHandle, int aaType);
		}

		/// <include file='PDFium.xml' path='Documentation/FORM_DoPageAAction/*'/>
		public static void FORM_DoPageAAction(FPDF_PAGE page, FPDF_FORMHANDLE hHandle, int aaType)
		{

			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { PlatformInvoke.FORM_DoPageAAction_x64(page, hHandle, aaType); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { PlatformInvoke.FORM_DoPageAAction_x86(page, hHandle, aaType); }
			else
				throw new PlatformNotSupportedException();

		}

		#endregion


		#region FORM_OnMouseMove

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FORM_OnMouseMove")]
			internal static extern bool FORM_OnMouseMove_x86(FPDF_FORMHANDLE hHandle, FPDF_PAGE page, int modifier, double page_x, double page_y);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FORM_OnMouseMove")]
			internal static extern bool FORM_OnMouseMove_x64(FPDF_FORMHANDLE hHandle, FPDF_PAGE page, int modifier, double page_x, double page_y);
		}

		/// <include file='PDFium.xml' path='Documentation/FORM_OnMouseMove/*'/>
		public static bool FORM_OnMouseMove(FPDF_FORMHANDLE hHandle, FPDF_PAGE page, int modifier, double page_x, double page_y)
		{

			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { return PlatformInvoke.FORM_OnMouseMove_x64(hHandle, page, modifier, page_x, page_y); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { return PlatformInvoke.FORM_OnMouseMove_x86(hHandle, page, modifier, page_x, page_y); }
			else
				throw new PlatformNotSupportedException();

		}

		#endregion


		#region FORM_OnMouseWheel

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FORM_OnMouseWheel")]
			internal static extern bool FORM_OnMouseWheel_x86(FPDF_FORMHANDLE hHandle, FPDF_PAGE page, int modifier, [MarshalAs(UnmanagedType.LPStruct)] FS_POINTF page_coord, int delta_x, int delta_y);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FORM_OnMouseWheel")]
			internal static extern bool FORM_OnMouseWheel_x64(FPDF_FORMHANDLE hHandle, FPDF_PAGE page, int modifier, [MarshalAs(UnmanagedType.LPStruct)] FS_POINTF page_coord, int delta_x, int delta_y);
		}

		/// <include file='PDFium.xml' path='Documentation/FORM_OnMouseWheel/*'/>
		public static bool FORM_OnMouseWheel(FPDF_FORMHANDLE hHandle, FPDF_PAGE page, int modifier, [MarshalAs(UnmanagedType.LPStruct)] FS_POINTF page_coord, int delta_x, int delta_y)
		{

			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { return PlatformInvoke.FORM_OnMouseWheel_x64(hHandle, page, modifier, page_coord, delta_x, delta_y); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { return PlatformInvoke.FORM_OnMouseWheel_x86(hHandle, page, modifier, page_coord, delta_x, delta_y); }
			else
				throw new PlatformNotSupportedException();

		}

		#endregion


		#region FORM_OnFocus

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FORM_OnFocus")]
			internal static extern bool FORM_OnFocus_x86(FPDF_FORMHANDLE hHandle, FPDF_PAGE page, int modifier, double page_x, double page_y);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FORM_OnFocus")]
			internal static extern bool FORM_OnFocus_x64(FPDF_FORMHANDLE hHandle, FPDF_PAGE page, int modifier, double page_x, double page_y);
		}

		/// <include file='PDFium.xml' path='Documentation/FORM_OnFocus/*'/>
		public static bool FORM_OnFocus(FPDF_FORMHANDLE hHandle, FPDF_PAGE page, int modifier, double page_x, double page_y)
		{

			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { return PlatformInvoke.FORM_OnFocus_x64(hHandle, page, modifier, page_x, page_y); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { return PlatformInvoke.FORM_OnFocus_x86(hHandle, page, modifier, page_x, page_y); }
			else
				throw new PlatformNotSupportedException();

		}

		#endregion


		#region FORM_OnLButtonDown

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FORM_OnLButtonDown")]
			internal static extern bool FORM_OnLButtonDown_x86(FPDF_FORMHANDLE hHandle, FPDF_PAGE page, int modifier, double page_x, double page_y);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FORM_OnLButtonDown")]
			internal static extern bool FORM_OnLButtonDown_x64(FPDF_FORMHANDLE hHandle, FPDF_PAGE page, int modifier, double page_x, double page_y);
		}

		/// <include file='PDFium.xml' path='Documentation/FORM_OnLButtonDown/*'/>
		public static bool FORM_OnLButtonDown(FPDF_FORMHANDLE hHandle, FPDF_PAGE page, int modifier, double page_x, double page_y)
		{

			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { return PlatformInvoke.FORM_OnLButtonDown_x64(hHandle, page, modifier, page_x, page_y); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { return PlatformInvoke.FORM_OnLButtonDown_x86(hHandle, page, modifier, page_x, page_y); }
			else
				throw new PlatformNotSupportedException();

		}

		#endregion


		#region FORM_OnRButtonDown

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FORM_OnRButtonDown")]
			internal static extern bool FORM_OnRButtonDown_x86(FPDF_FORMHANDLE hHandle, FPDF_PAGE page, int modifier, double page_x, double page_y);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FORM_OnRButtonDown")]
			internal static extern bool FORM_OnRButtonDown_x64(FPDF_FORMHANDLE hHandle, FPDF_PAGE page, int modifier, double page_x, double page_y);
		}

		/// <include file='PDFium.xml' path='Documentation/FORM_OnRButtonDown/*'/>
		public static bool FORM_OnRButtonDown(FPDF_FORMHANDLE hHandle, FPDF_PAGE page, int modifier, double page_x, double page_y)
		{

			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { return PlatformInvoke.FORM_OnRButtonDown_x64(hHandle, page, modifier, page_x, page_y); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { return PlatformInvoke.FORM_OnRButtonDown_x86(hHandle, page, modifier, page_x, page_y); }
			else
				throw new PlatformNotSupportedException();

		}

		#endregion


		#region FORM_OnLButtonUp

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FORM_OnLButtonUp")]
			internal static extern bool FORM_OnLButtonUp_x86(FPDF_FORMHANDLE hHandle, FPDF_PAGE page, int modifier, double page_x, double page_y);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FORM_OnLButtonUp")]
			internal static extern bool FORM_OnLButtonUp_x64(FPDF_FORMHANDLE hHandle, FPDF_PAGE page, int modifier, double page_x, double page_y);
		}

		/// <include file='PDFium.xml' path='Documentation/FORM_OnLButtonUp/*'/>
		public static bool FORM_OnLButtonUp(FPDF_FORMHANDLE hHandle, FPDF_PAGE page, int modifier, double page_x, double page_y)
		{

			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { return PlatformInvoke.FORM_OnLButtonUp_x64(hHandle, page, modifier, page_x, page_y); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { return PlatformInvoke.FORM_OnLButtonUp_x86(hHandle, page, modifier, page_x, page_y); }
			else
				throw new PlatformNotSupportedException();

		}

		#endregion


		#region FORM_OnRButtonUp

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FORM_OnRButtonUp")]
			internal static extern bool FORM_OnRButtonUp_x86(FPDF_FORMHANDLE hHandle, FPDF_PAGE page, int modifier, double page_x, double page_y);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FORM_OnRButtonUp")]
			internal static extern bool FORM_OnRButtonUp_x64(FPDF_FORMHANDLE hHandle, FPDF_PAGE page, int modifier, double page_x, double page_y);
		}

		/// <include file='PDFium.xml' path='Documentation/FORM_OnRButtonUp/*'/>
		public static bool FORM_OnRButtonUp(FPDF_FORMHANDLE hHandle, FPDF_PAGE page, int modifier, double page_x, double page_y)
		{

			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { return PlatformInvoke.FORM_OnRButtonUp_x64(hHandle, page, modifier, page_x, page_y); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { return PlatformInvoke.FORM_OnRButtonUp_x86(hHandle, page, modifier, page_x, page_y); }
			else
				throw new PlatformNotSupportedException();

		}

		#endregion


		#region FORM_OnLButtonDoubleClick

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FORM_OnLButtonDoubleClick")]
			internal static extern bool FORM_OnLButtonDoubleClick_x86(FPDF_FORMHANDLE hHandle, FPDF_PAGE page, int modifier, double page_x, double page_y);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FORM_OnLButtonDoubleClick")]
			internal static extern bool FORM_OnLButtonDoubleClick_x64(FPDF_FORMHANDLE hHandle, FPDF_PAGE page, int modifier, double page_x, double page_y);
		}

		/// <include file='PDFium.xml' path='Documentation/FORM_OnLButtonDoubleClick/*'/>
		public static bool FORM_OnLButtonDoubleClick(FPDF_FORMHANDLE hHandle, FPDF_PAGE page, int modifier, double page_x, double page_y)
		{

			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { return PlatformInvoke.FORM_OnLButtonDoubleClick_x64(hHandle, page, modifier, page_x, page_y); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { return PlatformInvoke.FORM_OnLButtonDoubleClick_x86(hHandle, page, modifier, page_x, page_y); }
			else
				throw new PlatformNotSupportedException();

		}

		#endregion


		#region FORM_OnKeyDown

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FORM_OnKeyDown")]
			internal static extern bool FORM_OnKeyDown_x86(FPDF_FORMHANDLE hHandle, FPDF_PAGE page, int nKeyCode, int modifier);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FORM_OnKeyDown")]
			internal static extern bool FORM_OnKeyDown_x64(FPDF_FORMHANDLE hHandle, FPDF_PAGE page, int nKeyCode, int modifier);
		}

		/// <include file='PDFium.xml' path='Documentation/FORM_OnKeyDown/*'/>
		public static bool FORM_OnKeyDown(FPDF_FORMHANDLE hHandle, FPDF_PAGE page, int nKeyCode, int modifier)
		{

			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { return PlatformInvoke.FORM_OnKeyDown_x64(hHandle, page, nKeyCode, modifier); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { return PlatformInvoke.FORM_OnKeyDown_x86(hHandle, page, nKeyCode, modifier); }
			else
				throw new PlatformNotSupportedException();

		}

		#endregion


		#region FORM_OnKeyUp

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FORM_OnKeyUp")]
			internal static extern bool FORM_OnKeyUp_x86(FPDF_FORMHANDLE hHandle, FPDF_PAGE page, int nKeyCode, int modifier);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FORM_OnKeyUp")]
			internal static extern bool FORM_OnKeyUp_x64(FPDF_FORMHANDLE hHandle, FPDF_PAGE page, int nKeyCode, int modifier);
		}

		/// <include file='PDFium.xml' path='Documentation/FORM_OnKeyUp/*'/>
		public static bool FORM_OnKeyUp(FPDF_FORMHANDLE hHandle, FPDF_PAGE page, int nKeyCode, int modifier)
		{

			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { return PlatformInvoke.FORM_OnKeyUp_x64(hHandle, page, nKeyCode, modifier); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { return PlatformInvoke.FORM_OnKeyUp_x86(hHandle, page, nKeyCode, modifier); }
			else
				throw new PlatformNotSupportedException();

		}

		#endregion


		#region FORM_OnChar

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FORM_OnChar")]
			internal static extern bool FORM_OnChar_x86(FPDF_FORMHANDLE hHandle, FPDF_PAGE page, int nChar, int modifier);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FORM_OnChar")]
			internal static extern bool FORM_OnChar_x64(FPDF_FORMHANDLE hHandle, FPDF_PAGE page, int nChar, int modifier);
		}

		/// <include file='PDFium.xml' path='Documentation/FORM_OnChar/*'/>
		public static bool FORM_OnChar(FPDF_FORMHANDLE hHandle, FPDF_PAGE page, int nChar, int modifier)
		{

			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { return PlatformInvoke.FORM_OnChar_x64(hHandle, page, nChar, modifier); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { return PlatformInvoke.FORM_OnChar_x86(hHandle, page, nChar, modifier); }
			else
				throw new PlatformNotSupportedException();

		}

		#endregion


		#region FORM_GetFocusedText

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FORM_GetFocusedText")]
			internal static extern ulong FORM_GetFocusedText_x86(FPDF_FORMHANDLE hHandle, FPDF_PAGE page, ref byte buffer, ulong buflen);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FORM_GetFocusedText")]
			internal static extern ulong FORM_GetFocusedText_x64(FPDF_FORMHANDLE hHandle, FPDF_PAGE page, ref byte buffer, ulong buflen);
		}

		/// <include file='PDFium.xml' path='Documentation/FORM_GetFocusedText/*'/>
		public static ulong FORM_GetFocusedText(FPDF_FORMHANDLE hHandle, FPDF_PAGE page, ref byte buffer, ulong buflen)
		{

			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { return PlatformInvoke.FORM_GetFocusedText_x64(hHandle, page, ref buffer, buflen); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { return PlatformInvoke.FORM_GetFocusedText_x86(hHandle, page, ref buffer, buflen); }
			else
				throw new PlatformNotSupportedException();

		}

		#endregion


		#region FORM_GetSelectedText

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FORM_GetSelectedText")]
			internal static extern ulong FORM_GetSelectedText_x86(FPDF_FORMHANDLE hHandle, FPDF_PAGE page, ref byte buffer, ulong buflen);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FORM_GetSelectedText")]
			internal static extern ulong FORM_GetSelectedText_x64(FPDF_FORMHANDLE hHandle, FPDF_PAGE page, ref byte buffer, ulong buflen);
		}

		/// <include file='PDFium.xml' path='Documentation/FORM_GetSelectedText/*'/>
		public static ulong FORM_GetSelectedText(FPDF_FORMHANDLE hHandle, FPDF_PAGE page, ref byte buffer, ulong buflen)
		{

			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { return PlatformInvoke.FORM_GetSelectedText_x64(hHandle, page, ref buffer, buflen); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { return PlatformInvoke.FORM_GetSelectedText_x86(hHandle, page, ref buffer, buflen); }
			else
				throw new PlatformNotSupportedException();

		}

		#endregion


		#region FORM_ReplaceAndKeepSelection

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FORM_ReplaceAndKeepSelection")]
			internal static extern void FORM_ReplaceAndKeepSelection_x86(FPDF_FORMHANDLE hHandle, FPDF_PAGE page, [MarshalAs(UnmanagedType.LPWStr)] string wsText);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FORM_ReplaceAndKeepSelection")]
			internal static extern void FORM_ReplaceAndKeepSelection_x64(FPDF_FORMHANDLE hHandle, FPDF_PAGE page, [MarshalAs(UnmanagedType.LPWStr)] string wsText);
		}

		/// <include file='PDFium.xml' path='Documentation/FORM_ReplaceAndKeepSelection/*'/>
		public static void FORM_ReplaceAndKeepSelection(FPDF_FORMHANDLE hHandle, FPDF_PAGE page, [MarshalAs(UnmanagedType.LPWStr)] string wsText)
		{

			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { PlatformInvoke.FORM_ReplaceAndKeepSelection_x64(hHandle, page, wsText); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { PlatformInvoke.FORM_ReplaceAndKeepSelection_x86(hHandle, page, wsText); }
			else
				throw new PlatformNotSupportedException();

		}

		#endregion


		#region FORM_ReplaceSelection

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FORM_ReplaceSelection")]
			internal static extern void FORM_ReplaceSelection_x86(FPDF_FORMHANDLE hHandle, FPDF_PAGE page, [MarshalAs(UnmanagedType.LPWStr)] string wsText);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FORM_ReplaceSelection")]
			internal static extern void FORM_ReplaceSelection_x64(FPDF_FORMHANDLE hHandle, FPDF_PAGE page, [MarshalAs(UnmanagedType.LPWStr)] string wsText);
		}

		/// <include file='PDFium.xml' path='Documentation/FORM_ReplaceSelection/*'/>
		public static void FORM_ReplaceSelection(FPDF_FORMHANDLE hHandle, FPDF_PAGE page, [MarshalAs(UnmanagedType.LPWStr)] string wsText)
		{

			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { PlatformInvoke.FORM_ReplaceSelection_x64(hHandle, page, wsText); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { PlatformInvoke.FORM_ReplaceSelection_x86(hHandle, page, wsText); }
			else
				throw new PlatformNotSupportedException();

		}

		#endregion


		#region FORM_SelectAllText

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FORM_SelectAllText")]
			internal static extern bool FORM_SelectAllText_x86(FPDF_FORMHANDLE hHandle, FPDF_PAGE page);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FORM_SelectAllText")]
			internal static extern bool FORM_SelectAllText_x64(FPDF_FORMHANDLE hHandle, FPDF_PAGE page);
		}

		/// <include file='PDFium.xml' path='Documentation/FORM_SelectAllText/*'/>
		public static bool FORM_SelectAllText(FPDF_FORMHANDLE hHandle, FPDF_PAGE page)
		{

			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { return PlatformInvoke.FORM_SelectAllText_x64(hHandle, page); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { return PlatformInvoke.FORM_SelectAllText_x86(hHandle, page); }
			else
				throw new PlatformNotSupportedException();

		}

		#endregion


		#region FORM_CanUndo

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FORM_CanUndo")]
			internal static extern bool FORM_CanUndo_x86(FPDF_FORMHANDLE hHandle, FPDF_PAGE page);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FORM_CanUndo")]
			internal static extern bool FORM_CanUndo_x64(FPDF_FORMHANDLE hHandle, FPDF_PAGE page);
		}

		/// <include file='PDFium.xml' path='Documentation/FORM_CanUndo/*'/>
		public static bool FORM_CanUndo(FPDF_FORMHANDLE hHandle, FPDF_PAGE page)
		{

			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { return PlatformInvoke.FORM_CanUndo_x64(hHandle, page); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { return PlatformInvoke.FORM_CanUndo_x86(hHandle, page); }
			else
				throw new PlatformNotSupportedException();

		}

		#endregion


		#region FORM_CanRedo

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FORM_CanRedo")]
			internal static extern bool FORM_CanRedo_x86(FPDF_FORMHANDLE hHandle, FPDF_PAGE page);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FORM_CanRedo")]
			internal static extern bool FORM_CanRedo_x64(FPDF_FORMHANDLE hHandle, FPDF_PAGE page);
		}

		/// <include file='PDFium.xml' path='Documentation/FORM_CanRedo/*'/>
		public static bool FORM_CanRedo(FPDF_FORMHANDLE hHandle, FPDF_PAGE page)
		{

			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { return PlatformInvoke.FORM_CanRedo_x64(hHandle, page); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { return PlatformInvoke.FORM_CanRedo_x86(hHandle, page); }
			else
				throw new PlatformNotSupportedException();

		}

		#endregion


		#region FORM_Undo

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FORM_Undo")]
			internal static extern bool FORM_Undo_x86(FPDF_FORMHANDLE hHandle, FPDF_PAGE page);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FORM_Undo")]
			internal static extern bool FORM_Undo_x64(FPDF_FORMHANDLE hHandle, FPDF_PAGE page);
		}

		/// <include file='PDFium.xml' path='Documentation/FORM_Undo/*'/>
		public static bool FORM_Undo(FPDF_FORMHANDLE hHandle, FPDF_PAGE page)
		{

			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { return PlatformInvoke.FORM_Undo_x64(hHandle, page); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { return PlatformInvoke.FORM_Undo_x86(hHandle, page); }
			else
				throw new PlatformNotSupportedException();

		}

		#endregion


		#region FORM_Redo

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FORM_Redo")]
			internal static extern bool FORM_Redo_x86(FPDF_FORMHANDLE hHandle, FPDF_PAGE page);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FORM_Redo")]
			internal static extern bool FORM_Redo_x64(FPDF_FORMHANDLE hHandle, FPDF_PAGE page);
		}

		/// <include file='PDFium.xml' path='Documentation/FORM_Redo/*'/>
		public static bool FORM_Redo(FPDF_FORMHANDLE hHandle, FPDF_PAGE page)
		{

			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { return PlatformInvoke.FORM_Redo_x64(hHandle, page); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { return PlatformInvoke.FORM_Redo_x86(hHandle, page); }
			else
				throw new PlatformNotSupportedException();

		}

		#endregion


		#region FORM_ForceToKillFocus

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FORM_ForceToKillFocus")]
			internal static extern bool FORM_ForceToKillFocus_x86(FPDF_FORMHANDLE hHandle);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FORM_ForceToKillFocus")]
			internal static extern bool FORM_ForceToKillFocus_x64(FPDF_FORMHANDLE hHandle);
		}

		/// <include file='PDFium.xml' path='Documentation/FORM_ForceToKillFocus/*'/>
		public static bool FORM_ForceToKillFocus(FPDF_FORMHANDLE hHandle)
		{

			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { return PlatformInvoke.FORM_ForceToKillFocus_x64(hHandle); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { return PlatformInvoke.FORM_ForceToKillFocus_x86(hHandle); }
			else
				throw new PlatformNotSupportedException();

		}

		#endregion


		#region FORM_GetFocusedAnnot

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FORM_GetFocusedAnnot")]
			internal static extern bool FORM_GetFocusedAnnot_x86(FPDF_FORMHANDLE handle, out int page_index, out FPDF_ANNOTATION annot);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FORM_GetFocusedAnnot")]
			internal static extern bool FORM_GetFocusedAnnot_x64(FPDF_FORMHANDLE handle, out int page_index, out FPDF_ANNOTATION annot);
		}

		/// <include file='PDFium.xml' path='Documentation/FORM_GetFocusedAnnot/*'/>
		public static bool FORM_GetFocusedAnnot(FPDF_FORMHANDLE handle, out int page_index, out FPDF_ANNOTATION annot)
		{

			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { return PlatformInvoke.FORM_GetFocusedAnnot_x64(handle, out page_index, out annot); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { return PlatformInvoke.FORM_GetFocusedAnnot_x86(handle, out page_index, out annot); }
			else
				throw new PlatformNotSupportedException();

		}

		#endregion


		#region FORM_SetFocusedAnnot

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FORM_SetFocusedAnnot")]
			internal static extern bool FORM_SetFocusedAnnot_x86(FPDF_FORMHANDLE handle, FPDF_ANNOTATION annot);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FORM_SetFocusedAnnot")]
			internal static extern bool FORM_SetFocusedAnnot_x64(FPDF_FORMHANDLE handle, FPDF_ANNOTATION annot);
		}

		/// <include file='PDFium.xml' path='Documentation/FORM_SetFocusedAnnot/*'/>
		public static bool FORM_SetFocusedAnnot(FPDF_FORMHANDLE handle, FPDF_ANNOTATION annot)
		{

			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { return PlatformInvoke.FORM_SetFocusedAnnot_x64(handle, annot); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { return PlatformInvoke.FORM_SetFocusedAnnot_x86(handle, annot); }
			else
				throw new PlatformNotSupportedException();

		}

		#endregion


		#region FPDFPage_HasFormFieldAtPoint

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFPage_HasFormFieldAtPoint")]
			internal static extern int FPDFPage_HasFormFieldAtPoint_x86(FPDF_FORMHANDLE hHandle, FPDF_PAGE page, double page_x, double page_y);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFPage_HasFormFieldAtPoint")]
			internal static extern int FPDFPage_HasFormFieldAtPoint_x64(FPDF_FORMHANDLE hHandle, FPDF_PAGE page, double page_x, double page_y);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDFPage_HasFormFieldAtPoint/*'/>
		public static int FPDFPage_HasFormFieldAtPoint(FPDF_FORMHANDLE hHandle, FPDF_PAGE page, double page_x, double page_y)
		{

			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { return PlatformInvoke.FPDFPage_HasFormFieldAtPoint_x64(hHandle, page, page_x, page_y); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { return PlatformInvoke.FPDFPage_HasFormFieldAtPoint_x86(hHandle, page, page_x, page_y); }
			else
				throw new PlatformNotSupportedException();

		}

		#endregion


		#region FPDFPage_FormFieldZOrderAtPoint

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFPage_FormFieldZOrderAtPoint")]
			internal static extern int FPDFPage_FormFieldZOrderAtPoint_x86(FPDF_FORMHANDLE hHandle, FPDF_PAGE page, double page_x, double page_y);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFPage_FormFieldZOrderAtPoint")]
			internal static extern int FPDFPage_FormFieldZOrderAtPoint_x64(FPDF_FORMHANDLE hHandle, FPDF_PAGE page, double page_x, double page_y);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDFPage_FormFieldZOrderAtPoint/*'/>
		public static int FPDFPage_FormFieldZOrderAtPoint(FPDF_FORMHANDLE hHandle, FPDF_PAGE page, double page_x, double page_y)
		{

			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { return PlatformInvoke.FPDFPage_FormFieldZOrderAtPoint_x64(hHandle, page, page_x, page_y); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { return PlatformInvoke.FPDFPage_FormFieldZOrderAtPoint_x86(hHandle, page, page_x, page_y); }
			else
				throw new PlatformNotSupportedException();

		}

		#endregion


		#region FPDF_SetFormFieldHighlightColor

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDF_SetFormFieldHighlightColor")]
			internal static extern void FPDF_SetFormFieldHighlightColor_x86(FPDF_FORMHANDLE hHandle, int fieldType, ulong color);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDF_SetFormFieldHighlightColor")]
			internal static extern void FPDF_SetFormFieldHighlightColor_x64(FPDF_FORMHANDLE hHandle, int fieldType, ulong color);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDF_SetFormFieldHighlightColor/*'/>
		public static void FPDF_SetFormFieldHighlightColor(FPDF_FORMHANDLE hHandle, int fieldType, ulong color)
		{

			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { PlatformInvoke.FPDF_SetFormFieldHighlightColor_x64(hHandle, fieldType, color); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { PlatformInvoke.FPDF_SetFormFieldHighlightColor_x86(hHandle, fieldType, color); }
			else
				throw new PlatformNotSupportedException();

		}

		#endregion


		#region FPDF_SetFormFieldHighlightAlpha

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDF_SetFormFieldHighlightAlpha")]
			internal static extern void FPDF_SetFormFieldHighlightAlpha_x86(FPDF_FORMHANDLE hHandle, byte alpha);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDF_SetFormFieldHighlightAlpha")]
			internal static extern void FPDF_SetFormFieldHighlightAlpha_x64(FPDF_FORMHANDLE hHandle, byte alpha);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDF_SetFormFieldHighlightAlpha/*'/>
		public static void FPDF_SetFormFieldHighlightAlpha(FPDF_FORMHANDLE hHandle, byte alpha)
		{

			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { PlatformInvoke.FPDF_SetFormFieldHighlightAlpha_x64(hHandle, alpha); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { PlatformInvoke.FPDF_SetFormFieldHighlightAlpha_x86(hHandle, alpha); }
			else
				throw new PlatformNotSupportedException();

		}

		#endregion


		#region FPDF_RemoveFormFieldHighlight

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDF_RemoveFormFieldHighlight")]
			internal static extern void FPDF_RemoveFormFieldHighlight_x86(FPDF_FORMHANDLE hHandle);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDF_RemoveFormFieldHighlight")]
			internal static extern void FPDF_RemoveFormFieldHighlight_x64(FPDF_FORMHANDLE hHandle);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDF_RemoveFormFieldHighlight/*'/>
		public static void FPDF_RemoveFormFieldHighlight(FPDF_FORMHANDLE hHandle)
		{

			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { PlatformInvoke.FPDF_RemoveFormFieldHighlight_x64(hHandle); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { PlatformInvoke.FPDF_RemoveFormFieldHighlight_x86(hHandle); }
			else
				throw new PlatformNotSupportedException();

		}

		#endregion


		#region FPDF_FFLDraw

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDF_FFLDraw")]
			internal static extern void FPDF_FFLDraw_x86(FPDF_FORMHANDLE hHandle, FPDF_BITMAP bitmap, FPDF_PAGE page, int start_x, int start_y, int size_x, int size_y, PageOrientations rotation, RenderingFlags flags);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDF_FFLDraw")]
			internal static extern void FPDF_FFLDraw_x64(FPDF_FORMHANDLE hHandle, FPDF_BITMAP bitmap, FPDF_PAGE page, int start_x, int start_y, int size_x, int size_y, PageOrientations rotation, RenderingFlags flags);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDF_FFLDraw/*'/>
		public static void FPDF_FFLDraw(FPDF_FORMHANDLE hHandle, FPDF_BITMAP bitmap, FPDF_PAGE page, int start_x, int start_y, int size_x, int size_y, PageOrientations rotation, RenderingFlags flags)
		{

			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { PlatformInvoke.FPDF_FFLDraw_x64(hHandle, bitmap, page, start_x, start_y, size_x, size_y, rotation, flags); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { PlatformInvoke.FPDF_FFLDraw_x86(hHandle, bitmap, page, start_x, start_y, size_x, size_y, rotation, flags); }
			else
				throw new PlatformNotSupportedException();

		}

		#endregion


		#region FPDF_FFLDrawSkia

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDF_FFLDrawSkia")]
			internal static extern void FPDF_FFLDrawSkia_x86(FPDF_FORMHANDLE hHandle, FPDF_SKIA_CANVAS canvas, FPDF_PAGE page, int start_x, int start_y, int size_x, int size_y, int rotate, int flags);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDF_FFLDrawSkia")]
			internal static extern void FPDF_FFLDrawSkia_x64(FPDF_FORMHANDLE hHandle, FPDF_SKIA_CANVAS canvas, FPDF_PAGE page, int start_x, int start_y, int size_x, int size_y, int rotate, int flags);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDF_FFLDrawSkia/*'/>
		public static void FPDF_FFLDrawSkia(FPDF_FORMHANDLE hHandle, FPDF_SKIA_CANVAS canvas, FPDF_PAGE page, int start_x, int start_y, int size_x, int size_y, int rotate, int flags)
		{

			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { PlatformInvoke.FPDF_FFLDrawSkia_x64(hHandle, canvas, page, start_x, start_y, size_x, size_y, rotate, flags); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { PlatformInvoke.FPDF_FFLDrawSkia_x86(hHandle, canvas, page, start_x, start_y, size_x, size_y, rotate, flags); }
			else
				throw new PlatformNotSupportedException();

		}

		#endregion


		#region FPDF_GetFormType

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDF_GetFormType")]
			internal static extern int FPDF_GetFormType_x86(FPDF_DOCUMENT document);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDF_GetFormType")]
			internal static extern int FPDF_GetFormType_x64(FPDF_DOCUMENT document);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDF_GetFormType/*'/>
		public static int FPDF_GetFormType(FPDF_DOCUMENT document)
		{

			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { return PlatformInvoke.FPDF_GetFormType_x64(document); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { return PlatformInvoke.FPDF_GetFormType_x86(document); }
			else
				throw new PlatformNotSupportedException();

		}

		#endregion


		#region FORM_SetIndexSelected

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FORM_SetIndexSelected")]
			internal static extern bool FORM_SetIndexSelected_x86(FPDF_FORMHANDLE hHandle, FPDF_PAGE page, int index, bool selected);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FORM_SetIndexSelected")]
			internal static extern bool FORM_SetIndexSelected_x64(FPDF_FORMHANDLE hHandle, FPDF_PAGE page, int index, bool selected);
		}

		/// <include file='PDFium.xml' path='Documentation/FORM_SetIndexSelected/*'/>
		public static bool FORM_SetIndexSelected(FPDF_FORMHANDLE hHandle, FPDF_PAGE page, int index, bool selected)
		{

			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { return PlatformInvoke.FORM_SetIndexSelected_x64(hHandle, page, index, selected); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { return PlatformInvoke.FORM_SetIndexSelected_x86(hHandle, page, index, selected); }
			else
				throw new PlatformNotSupportedException();

		}

		#endregion


		#region FORM_IsIndexSelected

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FORM_IsIndexSelected")]
			internal static extern bool FORM_IsIndexSelected_x86(FPDF_FORMHANDLE hHandle, FPDF_PAGE page, int index);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FORM_IsIndexSelected")]
			internal static extern bool FORM_IsIndexSelected_x64(FPDF_FORMHANDLE hHandle, FPDF_PAGE page, int index);
		}

		/// <include file='PDFium.xml' path='Documentation/FORM_IsIndexSelected/*'/>
		public static bool FORM_IsIndexSelected(FPDF_FORMHANDLE hHandle, FPDF_PAGE page, int index)
		{

			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { return PlatformInvoke.FORM_IsIndexSelected_x64(hHandle, page, index); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { return PlatformInvoke.FORM_IsIndexSelected_x86(hHandle, page, index); }
			else
				throw new PlatformNotSupportedException();

		}

		#endregion


		#region FPDF_LoadXFA

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDF_LoadXFA")]
			internal static extern bool FPDF_LoadXFA_x86(FPDF_DOCUMENT document);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDF_LoadXFA")]
			internal static extern bool FPDF_LoadXFA_x64(FPDF_DOCUMENT document);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDF_LoadXFA/*'/>
		public static bool FPDF_LoadXFA(FPDF_DOCUMENT document)
		{

			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { return PlatformInvoke.FPDF_LoadXFA_x64(document); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { return PlatformInvoke.FPDF_LoadXFA_x86(document); }
			else
				throw new PlatformNotSupportedException();

		}

		#endregion


		#region FPDF_GetSignatureCount

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDF_GetSignatureCount")]
			internal static extern int FPDF_GetSignatureCount_x86(FPDF_DOCUMENT document);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDF_GetSignatureCount")]
			internal static extern int FPDF_GetSignatureCount_x64(FPDF_DOCUMENT document);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDF_GetSignatureCount/*'/>
		public static int FPDF_GetSignatureCount(FPDF_DOCUMENT document)
		{

			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { return PlatformInvoke.FPDF_GetSignatureCount_x64(document); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { return PlatformInvoke.FPDF_GetSignatureCount_x86(document); }
			else
				throw new PlatformNotSupportedException();

		}

		#endregion


		#region FPDF_GetSignatureObject

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDF_GetSignatureObject")]
			internal static extern FPDF_SIGNATURE FPDF_GetSignatureObject_x86(FPDF_DOCUMENT document, int index);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDF_GetSignatureObject")]
			internal static extern FPDF_SIGNATURE FPDF_GetSignatureObject_x64(FPDF_DOCUMENT document, int index);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDF_GetSignatureObject/*'/>
		public static FPDF_SIGNATURE FPDF_GetSignatureObject(FPDF_DOCUMENT document, int index)
		{

			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { return PlatformInvoke.FPDF_GetSignatureObject_x64(document, index); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { return PlatformInvoke.FPDF_GetSignatureObject_x86(document, index); }
			else
				throw new PlatformNotSupportedException();

		}

		#endregion


		#region FPDFSignatureObj_GetContents

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFSignatureObj_GetContents")]
			internal static extern ulong FPDFSignatureObj_GetContents_x86(FPDF_SIGNATURE signature, ref byte buffer, ulong length);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFSignatureObj_GetContents")]
			internal static extern ulong FPDFSignatureObj_GetContents_x64(FPDF_SIGNATURE signature, ref byte buffer, ulong length);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDFSignatureObj_GetContents/*'/>
		public static ulong FPDFSignatureObj_GetContents(FPDF_SIGNATURE signature, ref byte buffer, ulong length)
		{

			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { return PlatformInvoke.FPDFSignatureObj_GetContents_x64(signature, ref buffer, length); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { return PlatformInvoke.FPDFSignatureObj_GetContents_x86(signature, ref buffer, length); }
			else
				throw new PlatformNotSupportedException();

		}

		#endregion


		#region FPDFSignatureObj_GetByteRange

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFSignatureObj_GetByteRange")]
			internal static extern ulong FPDFSignatureObj_GetByteRange_x86(FPDF_SIGNATURE signature, out int buffer, ulong length);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFSignatureObj_GetByteRange")]
			internal static extern ulong FPDFSignatureObj_GetByteRange_x64(FPDF_SIGNATURE signature, out int buffer, ulong length);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDFSignatureObj_GetByteRange/*'/>
		public static ulong FPDFSignatureObj_GetByteRange(FPDF_SIGNATURE signature, out int buffer, ulong length)
		{

			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { return PlatformInvoke.FPDFSignatureObj_GetByteRange_x64(signature, out buffer, length); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { return PlatformInvoke.FPDFSignatureObj_GetByteRange_x86(signature, out buffer, length); }
			else
				throw new PlatformNotSupportedException();

		}

		#endregion


		#region FPDFSignatureObj_GetSubFilter

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFSignatureObj_GetSubFilter")]
			internal static extern ulong FPDFSignatureObj_GetSubFilter_x86(FPDF_SIGNATURE signature, out char buffer, ulong length);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFSignatureObj_GetSubFilter")]
			internal static extern ulong FPDFSignatureObj_GetSubFilter_x64(FPDF_SIGNATURE signature, out char buffer, ulong length);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDFSignatureObj_GetSubFilter/*'/>
		public static ulong FPDFSignatureObj_GetSubFilter(FPDF_SIGNATURE signature, out char buffer, ulong length)
		{

			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { return PlatformInvoke.FPDFSignatureObj_GetSubFilter_x64(signature, out buffer, length); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { return PlatformInvoke.FPDFSignatureObj_GetSubFilter_x86(signature, out buffer, length); }
			else
				throw new PlatformNotSupportedException();

		}

		#endregion


		#region FPDFSignatureObj_GetReason

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFSignatureObj_GetReason")]
			internal static extern ulong FPDFSignatureObj_GetReason_x86(FPDF_SIGNATURE signature, ref byte buffer, ulong length);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFSignatureObj_GetReason")]
			internal static extern ulong FPDFSignatureObj_GetReason_x64(FPDF_SIGNATURE signature, ref byte buffer, ulong length);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDFSignatureObj_GetReason/*'/>
		public static ulong FPDFSignatureObj_GetReason(FPDF_SIGNATURE signature, ref byte buffer, ulong length)
		{

			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { return PlatformInvoke.FPDFSignatureObj_GetReason_x64(signature, ref buffer, length); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { return PlatformInvoke.FPDFSignatureObj_GetReason_x86(signature, ref buffer, length); }
			else
				throw new PlatformNotSupportedException();

		}

		#endregion


		#region FPDFSignatureObj_GetTime

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFSignatureObj_GetTime")]
			internal static extern ulong FPDFSignatureObj_GetTime_x86(FPDF_SIGNATURE signature, out char buffer, ulong length);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFSignatureObj_GetTime")]
			internal static extern ulong FPDFSignatureObj_GetTime_x64(FPDF_SIGNATURE signature, out char buffer, ulong length);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDFSignatureObj_GetTime/*'/>
		public static ulong FPDFSignatureObj_GetTime(FPDF_SIGNATURE signature, out char buffer, ulong length)
		{

			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { return PlatformInvoke.FPDFSignatureObj_GetTime_x64(signature, out buffer, length); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { return PlatformInvoke.FPDFSignatureObj_GetTime_x86(signature, out buffer, length); }
			else
				throw new PlatformNotSupportedException();

		}

		#endregion


		#region FPDFSignatureObj_GetDocMDPPermission

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFSignatureObj_GetDocMDPPermission")]
			[return: MarshalAs(UnmanagedType.U4)]
			internal static extern uint FPDFSignatureObj_GetDocMDPPermission_x86(FPDF_SIGNATURE signature);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFSignatureObj_GetDocMDPPermission")]
			[return: MarshalAs(UnmanagedType.U4)]
			internal static extern uint FPDFSignatureObj_GetDocMDPPermission_x64(FPDF_SIGNATURE signature);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDFSignatureObj_GetDocMDPPermission/*'/>
		public static uint FPDFSignatureObj_GetDocMDPPermission(FPDF_SIGNATURE signature)
		{

			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { return PlatformInvoke.FPDFSignatureObj_GetDocMDPPermission_x64(signature); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { return PlatformInvoke.FPDFSignatureObj_GetDocMDPPermission_x86(signature); }
			else
				throw new PlatformNotSupportedException();

		}

		#endregion


		#region FPDF_AddInstalledFont

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDF_AddInstalledFont")]
			internal static extern void FPDF_AddInstalledFont_x86(ref byte mapper, ref char face, int charset);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDF_AddInstalledFont")]
			internal static extern void FPDF_AddInstalledFont_x64(ref byte mapper, ref char face, int charset);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDF_AddInstalledFont/*'/>
		public static void FPDF_AddInstalledFont(ref byte mapper, ref char face, int charset)
		{

			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { PlatformInvoke.FPDF_AddInstalledFont_x64(ref mapper, ref face, charset); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { PlatformInvoke.FPDF_AddInstalledFont_x86(ref mapper, ref face, charset); }
			else
				throw new PlatformNotSupportedException();

		}

		#endregion


		#region FPDF_SetSystemFontInfo

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDF_SetSystemFontInfo")]
			internal static extern void FPDF_SetSystemFontInfo_x86(out FPDF_SYSFONTINFO pFontInfo);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDF_SetSystemFontInfo")]
			internal static extern void FPDF_SetSystemFontInfo_x64(out FPDF_SYSFONTINFO pFontInfo);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDF_SetSystemFontInfo/*'/>
		public static void FPDF_SetSystemFontInfo(out FPDF_SYSFONTINFO pFontInfo)
		{

			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { PlatformInvoke.FPDF_SetSystemFontInfo_x64(out pFontInfo); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { PlatformInvoke.FPDF_SetSystemFontInfo_x86(out pFontInfo); }
			else
				throw new PlatformNotSupportedException();

		}

		#endregion


		#region FPDF_GetDefaultSystemFontInfo

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDF_GetDefaultSystemFontInfo")]
			internal static extern IntPtr FPDF_GetDefaultSystemFontInfo_x86();

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDF_GetDefaultSystemFontInfo")]
			internal static extern IntPtr FPDF_GetDefaultSystemFontInfo_x64();
		}

		/// <include file='PDFium.xml' path='Documentation/FPDF_GetDefaultSystemFontInfo/*'/>
		public static IntPtr FPDF_GetDefaultSystemFontInfo()
		{

			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { return PlatformInvoke.FPDF_GetDefaultSystemFontInfo_x64(); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { return PlatformInvoke.FPDF_GetDefaultSystemFontInfo_x86(); }
			else
				throw new PlatformNotSupportedException();

		}

		#endregion


		#region FPDF_FreeDefaultSystemFontInfo

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDF_FreeDefaultSystemFontInfo")]
			internal static extern void FPDF_FreeDefaultSystemFontInfo_x86(out FPDF_SYSFONTINFO pFontInfo);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDF_FreeDefaultSystemFontInfo")]
			internal static extern void FPDF_FreeDefaultSystemFontInfo_x64(out FPDF_SYSFONTINFO pFontInfo);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDF_FreeDefaultSystemFontInfo/*'/>
		public static void FPDF_FreeDefaultSystemFontInfo(out FPDF_SYSFONTINFO pFontInfo)
		{

			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { PlatformInvoke.FPDF_FreeDefaultSystemFontInfo_x64(out pFontInfo); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { PlatformInvoke.FPDF_FreeDefaultSystemFontInfo_x86(out pFontInfo); }
			else
				throw new PlatformNotSupportedException();

		}

		#endregion


		#region FPDFPage_GetDecodedThumbnailData

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFPage_GetDecodedThumbnailData")]
			internal static extern ulong FPDFPage_GetDecodedThumbnailData_x86(FPDF_PAGE page, ref byte buffer, ulong buflen);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFPage_GetDecodedThumbnailData")]
			internal static extern ulong FPDFPage_GetDecodedThumbnailData_x64(FPDF_PAGE page, ref byte buffer, ulong buflen);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDFPage_GetDecodedThumbnailData/*'/>
		public static ulong FPDFPage_GetDecodedThumbnailData(FPDF_PAGE page, ref byte buffer, ulong buflen)
		{

			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { return PlatformInvoke.FPDFPage_GetDecodedThumbnailData_x64(page, ref buffer, buflen); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { return PlatformInvoke.FPDFPage_GetDecodedThumbnailData_x86(page, ref buffer, buflen); }
			else
				throw new PlatformNotSupportedException();

		}

		#endregion


		#region FPDFPage_GetRawThumbnailData

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFPage_GetRawThumbnailData")]
			internal static extern ulong FPDFPage_GetRawThumbnailData_x86(FPDF_PAGE page, ref byte buffer, ulong buflen);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFPage_GetRawThumbnailData")]
			internal static extern ulong FPDFPage_GetRawThumbnailData_x64(FPDF_PAGE page, ref byte buffer, ulong buflen);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDFPage_GetRawThumbnailData/*'/>
		public static ulong FPDFPage_GetRawThumbnailData(FPDF_PAGE page, ref byte buffer, ulong buflen)
		{

			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { return PlatformInvoke.FPDFPage_GetRawThumbnailData_x64(page, ref buffer, buflen); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { return PlatformInvoke.FPDFPage_GetRawThumbnailData_x86(page, ref buffer, buflen); }
			else
				throw new PlatformNotSupportedException();

		}

		#endregion


		#region FPDFPage_GetThumbnailAsBitmap

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFPage_GetThumbnailAsBitmap")]
			internal static extern FPDF_BITMAP FPDFPage_GetThumbnailAsBitmap_x86(FPDF_PAGE page);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.Cdecl, EntryPoint = "FPDFPage_GetThumbnailAsBitmap")]
			internal static extern FPDF_BITMAP FPDFPage_GetThumbnailAsBitmap_x64(FPDF_PAGE page);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDFPage_GetThumbnailAsBitmap/*'/>
		public static FPDF_BITMAP FPDFPage_GetThumbnailAsBitmap(FPDF_PAGE page)
		{

			if (RuntimeInformation.ProcessArchitecture == Architecture.X64 || (RuntimeInformation.ProcessArchitecture == Architecture.X86 && IntPtr.Size == 8))
				lock(_lock) { return PlatformInvoke.FPDFPage_GetThumbnailAsBitmap_x64(page); }
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				lock(_lock) { return PlatformInvoke.FPDFPage_GetThumbnailAsBitmap_x86(page); }
			else
				throw new PlatformNotSupportedException();

		}

		#endregion


	}
}