#region Copyright and License
/*
This file is part of PDFiumSharp, a wrapper around the PDFium library for the .NET framework.
Copyright (C) 2017 Tobias Meyer
License: Microsoft Reciprocal License (MS-RL)
*/
#endregion

// AUTOGENERATED FILE
// DO NOT MODIFY
using System;
using System.Runtime.InteropServices;
using System.Threading;

namespace PDFiumSharp.Types
{
	/// <summary>Handle to a FPDF_ACTION</summary>
	[StructLayout(LayoutKind.Sequential)]
    public struct FPDF_ACTION : IHandle<FPDF_ACTION>
	{
		IntPtr _ptr;

		/// <summary>Gets a value indicating whether the handle is <c>null</c>.</summary>
		public bool IsNull => _ptr == IntPtr.Zero;

		public override string ToString() => "FPDF_ACTION: 0x" + _ptr.ToString("X16");

		/// <summary>Gets a handle representing <c>null</c>.</summary>
		public static FPDF_ACTION Null => new FPDF_ACTION();

		FPDF_ACTION(IntPtr ptr)
		{
			_ptr = ptr;
		}

		FPDF_ACTION IHandle<FPDF_ACTION>.SetToNull() => new FPDF_ACTION(Interlocked.Exchange(ref _ptr, IntPtr.Zero));
	}

	/// <summary>Handle to a FPDF_ANNOTATION</summary>
	[StructLayout(LayoutKind.Sequential)]
    public struct FPDF_ANNOTATION : IHandle<FPDF_ANNOTATION>
	{
		IntPtr _ptr;

		/// <summary>Gets a value indicating whether the handle is <c>null</c>.</summary>
		public bool IsNull => _ptr == IntPtr.Zero;

		public override string ToString() => "FPDF_ANNOTATION: 0x" + _ptr.ToString("X16");

		/// <summary>Gets a handle representing <c>null</c>.</summary>
		public static FPDF_ANNOTATION Null => new FPDF_ANNOTATION();

		FPDF_ANNOTATION(IntPtr ptr)
		{
			_ptr = ptr;
		}

		FPDF_ANNOTATION IHandle<FPDF_ANNOTATION>.SetToNull() => new FPDF_ANNOTATION(Interlocked.Exchange(ref _ptr, IntPtr.Zero));
	}

	/// <summary>Handle to a FPDF_ATTACHMENT</summary>
	[StructLayout(LayoutKind.Sequential)]
    public struct FPDF_ATTACHMENT : IHandle<FPDF_ATTACHMENT>
	{
		IntPtr _ptr;

		/// <summary>Gets a value indicating whether the handle is <c>null</c>.</summary>
		public bool IsNull => _ptr == IntPtr.Zero;

		public override string ToString() => "FPDF_ATTACHMENT: 0x" + _ptr.ToString("X16");

		/// <summary>Gets a handle representing <c>null</c>.</summary>
		public static FPDF_ATTACHMENT Null => new FPDF_ATTACHMENT();

		FPDF_ATTACHMENT(IntPtr ptr)
		{
			_ptr = ptr;
		}

		FPDF_ATTACHMENT IHandle<FPDF_ATTACHMENT>.SetToNull() => new FPDF_ATTACHMENT(Interlocked.Exchange(ref _ptr, IntPtr.Zero));
	}

	/// <summary>Handle to a FPDF_AVAIL</summary>
	[StructLayout(LayoutKind.Sequential)]
    public struct FPDF_AVAIL : IHandle<FPDF_AVAIL>
	{
		IntPtr _ptr;

		/// <summary>Gets a value indicating whether the handle is <c>null</c>.</summary>
		public bool IsNull => _ptr == IntPtr.Zero;

		public override string ToString() => "FPDF_AVAIL: 0x" + _ptr.ToString("X16");

		/// <summary>Gets a handle representing <c>null</c>.</summary>
		public static FPDF_AVAIL Null => new FPDF_AVAIL();

		FPDF_AVAIL(IntPtr ptr)
		{
			_ptr = ptr;
		}

		FPDF_AVAIL IHandle<FPDF_AVAIL>.SetToNull() => new FPDF_AVAIL(Interlocked.Exchange(ref _ptr, IntPtr.Zero));
	}

	/// <summary>Handle to a FPDF_BITMAP</summary>
	[StructLayout(LayoutKind.Sequential)]
    public struct FPDF_BITMAP : IHandle<FPDF_BITMAP>
	{
		IntPtr _ptr;

		/// <summary>Gets a value indicating whether the handle is <c>null</c>.</summary>
		public bool IsNull => _ptr == IntPtr.Zero;

		public override string ToString() => "FPDF_BITMAP: 0x" + _ptr.ToString("X16");

		/// <summary>Gets a handle representing <c>null</c>.</summary>
		public static FPDF_BITMAP Null => new FPDF_BITMAP();

		FPDF_BITMAP(IntPtr ptr)
		{
			_ptr = ptr;
		}

		FPDF_BITMAP IHandle<FPDF_BITMAP>.SetToNull() => new FPDF_BITMAP(Interlocked.Exchange(ref _ptr, IntPtr.Zero));
	}

	/// <summary>Handle to a FPDF_BOOKMARK</summary>
	[StructLayout(LayoutKind.Sequential)]
    public struct FPDF_BOOKMARK : IHandle<FPDF_BOOKMARK>
	{
		IntPtr _ptr;

		/// <summary>Gets a value indicating whether the handle is <c>null</c>.</summary>
		public bool IsNull => _ptr == IntPtr.Zero;

		public override string ToString() => "FPDF_BOOKMARK: 0x" + _ptr.ToString("X16");

		/// <summary>Gets a handle representing <c>null</c>.</summary>
		public static FPDF_BOOKMARK Null => new FPDF_BOOKMARK();

		FPDF_BOOKMARK(IntPtr ptr)
		{
			_ptr = ptr;
		}

		FPDF_BOOKMARK IHandle<FPDF_BOOKMARK>.SetToNull() => new FPDF_BOOKMARK(Interlocked.Exchange(ref _ptr, IntPtr.Zero));
	}

	/// <summary>Handle to a FPDF_BSTR</summary>
	[StructLayout(LayoutKind.Sequential)]
    public struct FPDF_BSTR : IHandle<FPDF_BSTR>
	{
		IntPtr _ptr;

		/// <summary>Gets a value indicating whether the handle is <c>null</c>.</summary>
		public bool IsNull => _ptr == IntPtr.Zero;

		public override string ToString() => "FPDF_BSTR: 0x" + _ptr.ToString("X16");

		/// <summary>Gets a handle representing <c>null</c>.</summary>
		public static FPDF_BSTR Null => new FPDF_BSTR();

		FPDF_BSTR(IntPtr ptr)
		{
			_ptr = ptr;
		}

		FPDF_BSTR IHandle<FPDF_BSTR>.SetToNull() => new FPDF_BSTR(Interlocked.Exchange(ref _ptr, IntPtr.Zero));
	}

	/// <summary>Handle to a FPDF_CLIPPATH</summary>
	[StructLayout(LayoutKind.Sequential)]
    public struct FPDF_CLIPPATH : IHandle<FPDF_CLIPPATH>
	{
		IntPtr _ptr;

		/// <summary>Gets a value indicating whether the handle is <c>null</c>.</summary>
		public bool IsNull => _ptr == IntPtr.Zero;

		public override string ToString() => "FPDF_CLIPPATH: 0x" + _ptr.ToString("X16");

		/// <summary>Gets a handle representing <c>null</c>.</summary>
		public static FPDF_CLIPPATH Null => new FPDF_CLIPPATH();

		FPDF_CLIPPATH(IntPtr ptr)
		{
			_ptr = ptr;
		}

		FPDF_CLIPPATH IHandle<FPDF_CLIPPATH>.SetToNull() => new FPDF_CLIPPATH(Interlocked.Exchange(ref _ptr, IntPtr.Zero));
	}

	/// <summary>Handle to a FPDF_COLORSCHEME</summary>
	[StructLayout(LayoutKind.Sequential)]
    public struct FPDF_COLORSCHEME : IHandle<FPDF_COLORSCHEME>
	{
		IntPtr _ptr;

		/// <summary>Gets a value indicating whether the handle is <c>null</c>.</summary>
		public bool IsNull => _ptr == IntPtr.Zero;

		public override string ToString() => "FPDF_COLORSCHEME: 0x" + _ptr.ToString("X16");

		/// <summary>Gets a handle representing <c>null</c>.</summary>
		public static FPDF_COLORSCHEME Null => new FPDF_COLORSCHEME();

		FPDF_COLORSCHEME(IntPtr ptr)
		{
			_ptr = ptr;
		}

		FPDF_COLORSCHEME IHandle<FPDF_COLORSCHEME>.SetToNull() => new FPDF_COLORSCHEME(Interlocked.Exchange(ref _ptr, IntPtr.Zero));
	}

	/// <summary>Handle to a FPDF_DEST</summary>
	[StructLayout(LayoutKind.Sequential)]
    public struct FPDF_DEST : IHandle<FPDF_DEST>
	{
		IntPtr _ptr;

		/// <summary>Gets a value indicating whether the handle is <c>null</c>.</summary>
		public bool IsNull => _ptr == IntPtr.Zero;

		public override string ToString() => "FPDF_DEST: 0x" + _ptr.ToString("X16");

		/// <summary>Gets a handle representing <c>null</c>.</summary>
		public static FPDF_DEST Null => new FPDF_DEST();

		FPDF_DEST(IntPtr ptr)
		{
			_ptr = ptr;
		}

		FPDF_DEST IHandle<FPDF_DEST>.SetToNull() => new FPDF_DEST(Interlocked.Exchange(ref _ptr, IntPtr.Zero));
	}

	/// <summary>Handle to a FPDF_DOCUMENT</summary>
	[StructLayout(LayoutKind.Sequential)]
    public struct FPDF_DOCUMENT : IHandle<FPDF_DOCUMENT>
	{
		IntPtr _ptr;

		/// <summary>Gets a value indicating whether the handle is <c>null</c>.</summary>
		public bool IsNull => _ptr == IntPtr.Zero;

		public override string ToString() => "FPDF_DOCUMENT: 0x" + _ptr.ToString("X16");

		/// <summary>Gets a handle representing <c>null</c>.</summary>
		public static FPDF_DOCUMENT Null => new FPDF_DOCUMENT();

		FPDF_DOCUMENT(IntPtr ptr)
		{
			_ptr = ptr;
		}

		FPDF_DOCUMENT IHandle<FPDF_DOCUMENT>.SetToNull() => new FPDF_DOCUMENT(Interlocked.Exchange(ref _ptr, IntPtr.Zero));
	}

	/// <summary>Handle to a FPDF_FILEIDTYPE</summary>
	[StructLayout(LayoutKind.Sequential)]
    public struct FPDF_FILEIDTYPE : IHandle<FPDF_FILEIDTYPE>
	{
		IntPtr _ptr;

		/// <summary>Gets a value indicating whether the handle is <c>null</c>.</summary>
		public bool IsNull => _ptr == IntPtr.Zero;

		public override string ToString() => "FPDF_FILEIDTYPE: 0x" + _ptr.ToString("X16");

		/// <summary>Gets a handle representing <c>null</c>.</summary>
		public static FPDF_FILEIDTYPE Null => new FPDF_FILEIDTYPE();

		FPDF_FILEIDTYPE(IntPtr ptr)
		{
			_ptr = ptr;
		}

		FPDF_FILEIDTYPE IHandle<FPDF_FILEIDTYPE>.SetToNull() => new FPDF_FILEIDTYPE(Interlocked.Exchange(ref _ptr, IntPtr.Zero));
	}

	/// <summary>Handle to a FPDF_FONT</summary>
	[StructLayout(LayoutKind.Sequential)]
    public struct FPDF_FONT : IHandle<FPDF_FONT>
	{
		IntPtr _ptr;

		/// <summary>Gets a value indicating whether the handle is <c>null</c>.</summary>
		public bool IsNull => _ptr == IntPtr.Zero;

		public override string ToString() => "FPDF_FONT: 0x" + _ptr.ToString("X16");

		/// <summary>Gets a handle representing <c>null</c>.</summary>
		public static FPDF_FONT Null => new FPDF_FONT();

		FPDF_FONT(IntPtr ptr)
		{
			_ptr = ptr;
		}

		FPDF_FONT IHandle<FPDF_FONT>.SetToNull() => new FPDF_FONT(Interlocked.Exchange(ref _ptr, IntPtr.Zero));
	}

	/// <summary>Handle to a FPDF_FORMHANDLE</summary>
	[StructLayout(LayoutKind.Sequential)]
    public struct FPDF_FORMHANDLE : IHandle<FPDF_FORMHANDLE>
	{
		IntPtr _ptr;

		/// <summary>Gets a value indicating whether the handle is <c>null</c>.</summary>
		public bool IsNull => _ptr == IntPtr.Zero;

		public override string ToString() => "FPDF_FORMHANDLE: 0x" + _ptr.ToString("X16");

		/// <summary>Gets a handle representing <c>null</c>.</summary>
		public static FPDF_FORMHANDLE Null => new FPDF_FORMHANDLE();

		FPDF_FORMHANDLE(IntPtr ptr)
		{
			_ptr = ptr;
		}

		FPDF_FORMHANDLE IHandle<FPDF_FORMHANDLE>.SetToNull() => new FPDF_FORMHANDLE(Interlocked.Exchange(ref _ptr, IntPtr.Zero));
	}

	/// <summary>Handle to a FPDF_GLYPHPATH</summary>
	[StructLayout(LayoutKind.Sequential)]
    public struct FPDF_GLYPHPATH : IHandle<FPDF_GLYPHPATH>
	{
		IntPtr _ptr;

		/// <summary>Gets a value indicating whether the handle is <c>null</c>.</summary>
		public bool IsNull => _ptr == IntPtr.Zero;

		public override string ToString() => "FPDF_GLYPHPATH: 0x" + _ptr.ToString("X16");

		/// <summary>Gets a handle representing <c>null</c>.</summary>
		public static FPDF_GLYPHPATH Null => new FPDF_GLYPHPATH();

		FPDF_GLYPHPATH(IntPtr ptr)
		{
			_ptr = ptr;
		}

		FPDF_GLYPHPATH IHandle<FPDF_GLYPHPATH>.SetToNull() => new FPDF_GLYPHPATH(Interlocked.Exchange(ref _ptr, IntPtr.Zero));
	}

	/// <summary>Handle to a FPDF_JAVASCRIPT_ACTION</summary>
	[StructLayout(LayoutKind.Sequential)]
    public struct FPDF_JAVASCRIPT_ACTION : IHandle<FPDF_JAVASCRIPT_ACTION>
	{
		IntPtr _ptr;

		/// <summary>Gets a value indicating whether the handle is <c>null</c>.</summary>
		public bool IsNull => _ptr == IntPtr.Zero;

		public override string ToString() => "FPDF_JAVASCRIPT_ACTION: 0x" + _ptr.ToString("X16");

		/// <summary>Gets a handle representing <c>null</c>.</summary>
		public static FPDF_JAVASCRIPT_ACTION Null => new FPDF_JAVASCRIPT_ACTION();

		FPDF_JAVASCRIPT_ACTION(IntPtr ptr)
		{
			_ptr = ptr;
		}

		FPDF_JAVASCRIPT_ACTION IHandle<FPDF_JAVASCRIPT_ACTION>.SetToNull() => new FPDF_JAVASCRIPT_ACTION(Interlocked.Exchange(ref _ptr, IntPtr.Zero));
	}

	/// <summary>Handle to a FPDF_LINK</summary>
	[StructLayout(LayoutKind.Sequential)]
    public struct FPDF_LINK : IHandle<FPDF_LINK>
	{
		IntPtr _ptr;

		/// <summary>Gets a value indicating whether the handle is <c>null</c>.</summary>
		public bool IsNull => _ptr == IntPtr.Zero;

		public override string ToString() => "FPDF_LINK: 0x" + _ptr.ToString("X16");

		/// <summary>Gets a handle representing <c>null</c>.</summary>
		public static FPDF_LINK Null => new FPDF_LINK();

		FPDF_LINK(IntPtr ptr)
		{
			_ptr = ptr;
		}

		FPDF_LINK IHandle<FPDF_LINK>.SetToNull() => new FPDF_LINK(Interlocked.Exchange(ref _ptr, IntPtr.Zero));
	}

	/// <summary>Handle to a FPDF_PAGE</summary>
	[StructLayout(LayoutKind.Sequential)]
    public struct FPDF_PAGE : IHandle<FPDF_PAGE>
	{
		IntPtr _ptr;

		/// <summary>Gets a value indicating whether the handle is <c>null</c>.</summary>
		public bool IsNull => _ptr == IntPtr.Zero;

		public override string ToString() => "FPDF_PAGE: 0x" + _ptr.ToString("X16");

		/// <summary>Gets a handle representing <c>null</c>.</summary>
		public static FPDF_PAGE Null => new FPDF_PAGE();

		FPDF_PAGE(IntPtr ptr)
		{
			_ptr = ptr;
		}

		FPDF_PAGE IHandle<FPDF_PAGE>.SetToNull() => new FPDF_PAGE(Interlocked.Exchange(ref _ptr, IntPtr.Zero));
	}

	/// <summary>Handle to a FPDF_PAGELINK</summary>
	[StructLayout(LayoutKind.Sequential)]
    public struct FPDF_PAGELINK : IHandle<FPDF_PAGELINK>
	{
		IntPtr _ptr;

		/// <summary>Gets a value indicating whether the handle is <c>null</c>.</summary>
		public bool IsNull => _ptr == IntPtr.Zero;

		public override string ToString() => "FPDF_PAGELINK: 0x" + _ptr.ToString("X16");

		/// <summary>Gets a handle representing <c>null</c>.</summary>
		public static FPDF_PAGELINK Null => new FPDF_PAGELINK();

		FPDF_PAGELINK(IntPtr ptr)
		{
			_ptr = ptr;
		}

		FPDF_PAGELINK IHandle<FPDF_PAGELINK>.SetToNull() => new FPDF_PAGELINK(Interlocked.Exchange(ref _ptr, IntPtr.Zero));
	}

	/// <summary>Handle to a FPDF_PAGEOBJECT</summary>
	[StructLayout(LayoutKind.Sequential)]
    public struct FPDF_PAGEOBJECT : IHandle<FPDF_PAGEOBJECT>
	{
		IntPtr _ptr;

		/// <summary>Gets a value indicating whether the handle is <c>null</c>.</summary>
		public bool IsNull => _ptr == IntPtr.Zero;

		public override string ToString() => "FPDF_PAGEOBJECT: 0x" + _ptr.ToString("X16");

		/// <summary>Gets a handle representing <c>null</c>.</summary>
		public static FPDF_PAGEOBJECT Null => new FPDF_PAGEOBJECT();

		FPDF_PAGEOBJECT(IntPtr ptr)
		{
			_ptr = ptr;
		}

		FPDF_PAGEOBJECT IHandle<FPDF_PAGEOBJECT>.SetToNull() => new FPDF_PAGEOBJECT(Interlocked.Exchange(ref _ptr, IntPtr.Zero));
	}

	/// <summary>Handle to a FPDF_PAGEOBJECTMARK</summary>
	[StructLayout(LayoutKind.Sequential)]
    public struct FPDF_PAGEOBJECTMARK : IHandle<FPDF_PAGEOBJECTMARK>
	{
		IntPtr _ptr;

		/// <summary>Gets a value indicating whether the handle is <c>null</c>.</summary>
		public bool IsNull => _ptr == IntPtr.Zero;

		public override string ToString() => "FPDF_PAGEOBJECTMARK: 0x" + _ptr.ToString("X16");

		/// <summary>Gets a handle representing <c>null</c>.</summary>
		public static FPDF_PAGEOBJECTMARK Null => new FPDF_PAGEOBJECTMARK();

		FPDF_PAGEOBJECTMARK(IntPtr ptr)
		{
			_ptr = ptr;
		}

		FPDF_PAGEOBJECTMARK IHandle<FPDF_PAGEOBJECTMARK>.SetToNull() => new FPDF_PAGEOBJECTMARK(Interlocked.Exchange(ref _ptr, IntPtr.Zero));
	}

	/// <summary>Handle to a FPDF_PAGERANGE</summary>
	[StructLayout(LayoutKind.Sequential)]
    public struct FPDF_PAGERANGE : IHandle<FPDF_PAGERANGE>
	{
		IntPtr _ptr;

		/// <summary>Gets a value indicating whether the handle is <c>null</c>.</summary>
		public bool IsNull => _ptr == IntPtr.Zero;

		public override string ToString() => "FPDF_PAGERANGE: 0x" + _ptr.ToString("X16");

		/// <summary>Gets a handle representing <c>null</c>.</summary>
		public static FPDF_PAGERANGE Null => new FPDF_PAGERANGE();

		FPDF_PAGERANGE(IntPtr ptr)
		{
			_ptr = ptr;
		}

		FPDF_PAGERANGE IHandle<FPDF_PAGERANGE>.SetToNull() => new FPDF_PAGERANGE(Interlocked.Exchange(ref _ptr, IntPtr.Zero));
	}

	/// <summary>Handle to a FPDF_PATHSEGMENT</summary>
	[StructLayout(LayoutKind.Sequential)]
    public struct FPDF_PATHSEGMENT : IHandle<FPDF_PATHSEGMENT>
	{
		IntPtr _ptr;

		/// <summary>Gets a value indicating whether the handle is <c>null</c>.</summary>
		public bool IsNull => _ptr == IntPtr.Zero;

		public override string ToString() => "FPDF_PATHSEGMENT: 0x" + _ptr.ToString("X16");

		/// <summary>Gets a handle representing <c>null</c>.</summary>
		public static FPDF_PATHSEGMENT Null => new FPDF_PATHSEGMENT();

		FPDF_PATHSEGMENT(IntPtr ptr)
		{
			_ptr = ptr;
		}

		FPDF_PATHSEGMENT IHandle<FPDF_PATHSEGMENT>.SetToNull() => new FPDF_PATHSEGMENT(Interlocked.Exchange(ref _ptr, IntPtr.Zero));
	}

	/// <summary>Handle to a FPDF_RECORDER</summary>
	[StructLayout(LayoutKind.Sequential)]
    public struct FPDF_RECORDER : IHandle<FPDF_RECORDER>
	{
		IntPtr _ptr;

		/// <summary>Gets a value indicating whether the handle is <c>null</c>.</summary>
		public bool IsNull => _ptr == IntPtr.Zero;

		public override string ToString() => "FPDF_RECORDER: 0x" + _ptr.ToString("X16");

		/// <summary>Gets a handle representing <c>null</c>.</summary>
		public static FPDF_RECORDER Null => new FPDF_RECORDER();

		FPDF_RECORDER(IntPtr ptr)
		{
			_ptr = ptr;
		}

		FPDF_RECORDER IHandle<FPDF_RECORDER>.SetToNull() => new FPDF_RECORDER(Interlocked.Exchange(ref _ptr, IntPtr.Zero));
	}

	/// <summary>Handle to a FPDF_OBJECT_TYPE</summary>
	[StructLayout(LayoutKind.Sequential)]
    public struct FPDF_OBJECT_TYPE : IHandle<FPDF_OBJECT_TYPE>
	{
		IntPtr _ptr;

		/// <summary>Gets a value indicating whether the handle is <c>null</c>.</summary>
		public bool IsNull => _ptr == IntPtr.Zero;

		public override string ToString() => "FPDF_OBJECT_TYPE: 0x" + _ptr.ToString("X16");

		/// <summary>Gets a handle representing <c>null</c>.</summary>
		public static FPDF_OBJECT_TYPE Null => new FPDF_OBJECT_TYPE();

		FPDF_OBJECT_TYPE(IntPtr ptr)
		{
			_ptr = ptr;
		}

		FPDF_OBJECT_TYPE IHandle<FPDF_OBJECT_TYPE>.SetToNull() => new FPDF_OBJECT_TYPE(Interlocked.Exchange(ref _ptr, IntPtr.Zero));
	}

	/// <summary>Handle to a FPDF_SCHHANDLE</summary>
	[StructLayout(LayoutKind.Sequential)]
    public struct FPDF_SCHHANDLE : IHandle<FPDF_SCHHANDLE>
	{
		IntPtr _ptr;

		/// <summary>Gets a value indicating whether the handle is <c>null</c>.</summary>
		public bool IsNull => _ptr == IntPtr.Zero;

		public override string ToString() => "FPDF_SCHHANDLE: 0x" + _ptr.ToString("X16");

		/// <summary>Gets a handle representing <c>null</c>.</summary>
		public static FPDF_SCHHANDLE Null => new FPDF_SCHHANDLE();

		FPDF_SCHHANDLE(IntPtr ptr)
		{
			_ptr = ptr;
		}

		FPDF_SCHHANDLE IHandle<FPDF_SCHHANDLE>.SetToNull() => new FPDF_SCHHANDLE(Interlocked.Exchange(ref _ptr, IntPtr.Zero));
	}

	/// <summary>Handle to a FPDF_SIGNATURE</summary>
	[StructLayout(LayoutKind.Sequential)]
    public struct FPDF_SIGNATURE : IHandle<FPDF_SIGNATURE>
	{
		IntPtr _ptr;

		/// <summary>Gets a value indicating whether the handle is <c>null</c>.</summary>
		public bool IsNull => _ptr == IntPtr.Zero;

		public override string ToString() => "FPDF_SIGNATURE: 0x" + _ptr.ToString("X16");

		/// <summary>Gets a handle representing <c>null</c>.</summary>
		public static FPDF_SIGNATURE Null => new FPDF_SIGNATURE();

		FPDF_SIGNATURE(IntPtr ptr)
		{
			_ptr = ptr;
		}

		FPDF_SIGNATURE IHandle<FPDF_SIGNATURE>.SetToNull() => new FPDF_SIGNATURE(Interlocked.Exchange(ref _ptr, IntPtr.Zero));
	}

	/// <summary>Handle to a FPDF_SKIA_CANVAS</summary>
	[StructLayout(LayoutKind.Sequential)]
    public struct FPDF_SKIA_CANVAS : IHandle<FPDF_SKIA_CANVAS>
	{
		IntPtr _ptr;

		/// <summary>Gets a value indicating whether the handle is <c>null</c>.</summary>
		public bool IsNull => _ptr == IntPtr.Zero;

		public override string ToString() => "FPDF_SKIA_CANVAS: 0x" + _ptr.ToString("X16");

		/// <summary>Gets a handle representing <c>null</c>.</summary>
		public static FPDF_SKIA_CANVAS Null => new FPDF_SKIA_CANVAS();

		FPDF_SKIA_CANVAS(IntPtr ptr)
		{
			_ptr = ptr;
		}

		FPDF_SKIA_CANVAS IHandle<FPDF_SKIA_CANVAS>.SetToNull() => new FPDF_SKIA_CANVAS(Interlocked.Exchange(ref _ptr, IntPtr.Zero));
	}

	/// <summary>Handle to a FPDF_STRUCTELEMENT</summary>
	[StructLayout(LayoutKind.Sequential)]
    public struct FPDF_STRUCTELEMENT : IHandle<FPDF_STRUCTELEMENT>
	{
		IntPtr _ptr;

		/// <summary>Gets a value indicating whether the handle is <c>null</c>.</summary>
		public bool IsNull => _ptr == IntPtr.Zero;

		public override string ToString() => "FPDF_STRUCTELEMENT: 0x" + _ptr.ToString("X16");

		/// <summary>Gets a handle representing <c>null</c>.</summary>
		public static FPDF_STRUCTELEMENT Null => new FPDF_STRUCTELEMENT();

		FPDF_STRUCTELEMENT(IntPtr ptr)
		{
			_ptr = ptr;
		}

		FPDF_STRUCTELEMENT IHandle<FPDF_STRUCTELEMENT>.SetToNull() => new FPDF_STRUCTELEMENT(Interlocked.Exchange(ref _ptr, IntPtr.Zero));
	}

	/// <summary>Handle to a FPDF_STRUCTELEMENT_ATTR</summary>
	[StructLayout(LayoutKind.Sequential)]
    public struct FPDF_STRUCTELEMENT_ATTR : IHandle<FPDF_STRUCTELEMENT_ATTR>
	{
		IntPtr _ptr;

		/// <summary>Gets a value indicating whether the handle is <c>null</c>.</summary>
		public bool IsNull => _ptr == IntPtr.Zero;

		public override string ToString() => "FPDF_STRUCTELEMENT_ATTR: 0x" + _ptr.ToString("X16");

		/// <summary>Gets a handle representing <c>null</c>.</summary>
		public static FPDF_STRUCTELEMENT_ATTR Null => new FPDF_STRUCTELEMENT_ATTR();

		FPDF_STRUCTELEMENT_ATTR(IntPtr ptr)
		{
			_ptr = ptr;
		}

		FPDF_STRUCTELEMENT_ATTR IHandle<FPDF_STRUCTELEMENT_ATTR>.SetToNull() => new FPDF_STRUCTELEMENT_ATTR(Interlocked.Exchange(ref _ptr, IntPtr.Zero));
	}

	/// <summary>Handle to a FPDF_STRUCTTREE</summary>
	[StructLayout(LayoutKind.Sequential)]
    public struct FPDF_STRUCTTREE : IHandle<FPDF_STRUCTTREE>
	{
		IntPtr _ptr;

		/// <summary>Gets a value indicating whether the handle is <c>null</c>.</summary>
		public bool IsNull => _ptr == IntPtr.Zero;

		public override string ToString() => "FPDF_STRUCTTREE: 0x" + _ptr.ToString("X16");

		/// <summary>Gets a handle representing <c>null</c>.</summary>
		public static FPDF_STRUCTTREE Null => new FPDF_STRUCTTREE();

		FPDF_STRUCTTREE(IntPtr ptr)
		{
			_ptr = ptr;
		}

		FPDF_STRUCTTREE IHandle<FPDF_STRUCTTREE>.SetToNull() => new FPDF_STRUCTTREE(Interlocked.Exchange(ref _ptr, IntPtr.Zero));
	}

	/// <summary>Handle to a FPDF_SYSFONTINFO</summary>
	[StructLayout(LayoutKind.Sequential)]
    public struct FPDF_SYSFONTINFO : IHandle<FPDF_SYSFONTINFO>
	{
		IntPtr _ptr;

		/// <summary>Gets a value indicating whether the handle is <c>null</c>.</summary>
		public bool IsNull => _ptr == IntPtr.Zero;

		public override string ToString() => "FPDF_SYSFONTINFO: 0x" + _ptr.ToString("X16");

		/// <summary>Gets a handle representing <c>null</c>.</summary>
		public static FPDF_SYSFONTINFO Null => new FPDF_SYSFONTINFO();

		FPDF_SYSFONTINFO(IntPtr ptr)
		{
			_ptr = ptr;
		}

		FPDF_SYSFONTINFO IHandle<FPDF_SYSFONTINFO>.SetToNull() => new FPDF_SYSFONTINFO(Interlocked.Exchange(ref _ptr, IntPtr.Zero));
	}

	/// <summary>Handle to a FPDF_TEXTPAGE</summary>
	[StructLayout(LayoutKind.Sequential)]
    public struct FPDF_TEXTPAGE : IHandle<FPDF_TEXTPAGE>
	{
		IntPtr _ptr;

		/// <summary>Gets a value indicating whether the handle is <c>null</c>.</summary>
		public bool IsNull => _ptr == IntPtr.Zero;

		public override string ToString() => "FPDF_TEXTPAGE: 0x" + _ptr.ToString("X16");

		/// <summary>Gets a handle representing <c>null</c>.</summary>
		public static FPDF_TEXTPAGE Null => new FPDF_TEXTPAGE();

		FPDF_TEXTPAGE(IntPtr ptr)
		{
			_ptr = ptr;
		}

		FPDF_TEXTPAGE IHandle<FPDF_TEXTPAGE>.SetToNull() => new FPDF_TEXTPAGE(Interlocked.Exchange(ref _ptr, IntPtr.Zero));
	}

	/// <summary>Handle to a FPDF_XOBJECT</summary>
	[StructLayout(LayoutKind.Sequential)]
    public struct FPDF_XOBJECT : IHandle<FPDF_XOBJECT>
	{
		IntPtr _ptr;

		/// <summary>Gets a value indicating whether the handle is <c>null</c>.</summary>
		public bool IsNull => _ptr == IntPtr.Zero;

		public override string ToString() => "FPDF_XOBJECT: 0x" + _ptr.ToString("X16");

		/// <summary>Gets a handle representing <c>null</c>.</summary>
		public static FPDF_XOBJECT Null => new FPDF_XOBJECT();

		FPDF_XOBJECT(IntPtr ptr)
		{
			_ptr = ptr;
		}

		FPDF_XOBJECT IHandle<FPDF_XOBJECT>.SetToNull() => new FPDF_XOBJECT(Interlocked.Exchange(ref _ptr, IntPtr.Zero));
	}

	/// <summary>Handle to a FPDF_WCHAR</summary>
	[StructLayout(LayoutKind.Sequential)]
    public struct FPDF_WCHAR : IHandle<FPDF_WCHAR>
	{
		IntPtr _ptr;

		/// <summary>Gets a value indicating whether the handle is <c>null</c>.</summary>
		public bool IsNull => _ptr == IntPtr.Zero;

		public override string ToString() => "FPDF_WCHAR: 0x" + _ptr.ToString("X16");

		/// <summary>Gets a handle representing <c>null</c>.</summary>
		public static FPDF_WCHAR Null => new FPDF_WCHAR();

		FPDF_WCHAR(IntPtr ptr)
		{
			_ptr = ptr;
		}

		FPDF_WCHAR IHandle<FPDF_WCHAR>.SetToNull() => new FPDF_WCHAR(Interlocked.Exchange(ref _ptr, IntPtr.Zero));
	}

	/// <summary>Handle to a FPDF_WIDGET</summary>
	[StructLayout(LayoutKind.Sequential)]
    public struct FPDF_WIDGET : IHandle<FPDF_WIDGET>
	{
		IntPtr _ptr;

		/// <summary>Gets a value indicating whether the handle is <c>null</c>.</summary>
		public bool IsNull => _ptr == IntPtr.Zero;

		public override string ToString() => "FPDF_WIDGET: 0x" + _ptr.ToString("X16");

		/// <summary>Gets a handle representing <c>null</c>.</summary>
		public static FPDF_WIDGET Null => new FPDF_WIDGET();

		FPDF_WIDGET(IntPtr ptr)
		{
			_ptr = ptr;
		}

		FPDF_WIDGET IHandle<FPDF_WIDGET>.SetToNull() => new FPDF_WIDGET(Interlocked.Exchange(ref _ptr, IntPtr.Zero));
	}

	/// <summary>Handle to a UNSUPPORT_INFO</summary>
	[StructLayout(LayoutKind.Sequential)]
    public struct UNSUPPORT_INFO : IHandle<UNSUPPORT_INFO>
	{
		IntPtr _ptr;

		/// <summary>Gets a value indicating whether the handle is <c>null</c>.</summary>
		public bool IsNull => _ptr == IntPtr.Zero;

		public override string ToString() => "UNSUPPORT_INFO: 0x" + _ptr.ToString("X16");

		/// <summary>Gets a handle representing <c>null</c>.</summary>
		public static UNSUPPORT_INFO Null => new UNSUPPORT_INFO();

		UNSUPPORT_INFO(IntPtr ptr)
		{
			_ptr = ptr;
		}

		UNSUPPORT_INFO IHandle<UNSUPPORT_INFO>.SetToNull() => new UNSUPPORT_INFO(Interlocked.Exchange(ref _ptr, IntPtr.Zero));
	}

	/// <summary>Handle to a FX_FILEAVAIL</summary>
	[StructLayout(LayoutKind.Sequential)]
    public struct FX_FILEAVAIL : IHandle<FX_FILEAVAIL>
	{
		IntPtr _ptr;

		/// <summary>Gets a value indicating whether the handle is <c>null</c>.</summary>
		public bool IsNull => _ptr == IntPtr.Zero;

		public override string ToString() => "FX_FILEAVAIL: 0x" + _ptr.ToString("X16");

		/// <summary>Gets a handle representing <c>null</c>.</summary>
		public static FX_FILEAVAIL Null => new FX_FILEAVAIL();

		FX_FILEAVAIL(IntPtr ptr)
		{
			_ptr = ptr;
		}

		FX_FILEAVAIL IHandle<FX_FILEAVAIL>.SetToNull() => new FX_FILEAVAIL(Interlocked.Exchange(ref _ptr, IntPtr.Zero));
	}

}