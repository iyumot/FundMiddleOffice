<ResourceDictionary
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:hc="https://handyorg.github.io/handycontrol"
    xmlns:i="http://schemas.microsoft.com/xaml/behaviors"
    xmlns:local="clr-namespace:FMO"
    xmlns:scm="clr-namespace:System.ComponentModel;assembly=WindowsBase"
    xmlns:shared="clr-namespace:FMO.Shared;assembly=FMO.Shared">

    <Visibility x:Key="Collapsed">Collapsed</Visibility>



    <Style TargetType="{x:Type local:MultiFileDisplay}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type local:MultiFileDisplay}">
                    <Border
                        Background="{TemplateBinding Background}"
                        BorderBrush="{TemplateBinding BorderBrush}"
                        BorderThickness="{TemplateBinding BorderThickness}">
                        <DockPanel DataContext="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}}">
                            <ContentPresenter VerticalAlignment="Center" Content="{Binding Header}" />
                            <Viewbox
                                Width="14"
                                Height="14"
                                Margin="2,0,8,0"
                                VerticalAlignment="Center">
                                <Path
                                    Data="{DynamicResource f.angle-right}"
                                    Fill="Black"
                                    Stroke="Black" />
                            </Viewbox>

                            <TextBlock
                                x:Name="tbName"
                                VerticalAlignment="Center"
                                shared:MaskService.IsMask="True"
                                Text="{Binding Current.Name}" />
                            <TextBlock
                                VerticalAlignment="Center"
                                shared:MaskService.IsMask="True"
                                FontSize="11"
                                Foreground="Gray"
                                Text="按蓝色按键选择文件，支持多次设置文件，可保存文件历史版本"
                                Visibility="{Binding Current, Converter={StaticResource Object2VisibilityReConverter}}" />

                            <Button
                                x:Name="PART_SetFile"
                                hc:IconElement.Geometry="{StaticResource f.file-medical}"
                                Foreground="{StaticResource PrimaryBrush}"
                                Style="{StaticResource ButtonIcon.Small}"
                                ToolTip="设置文件"
                                Visibility="{Binding IsReadOnly, Converter={StaticResource Boolean2VisibilityReConverter}}" />

                            <Grid Margin="5,0" Visibility="{Binding Current, RelativeSource={RelativeSource Mode=TemplatedParent}, Converter={StaticResource FileExistsToVisibilityConverter}}">
                                <DockPanel x:Name="p" Visibility="Visible">
                                    <Button
                                        x:Name="PART_View"
                                        Margin="-5"
                                        hc:IconElement.Geometry="{StaticResource f.book-open-reader}"
                                        Command="{x:Static local:MultiFileDisplay.ViewFileCommand}"
                                        CommandParameter="{Binding Current}"
                                        Foreground="Lime"
                                        Style="{StaticResource ButtonIcon.Small}"
                                        ToolTip="查看" />
                                    <Button
                                        x:Name="PART_SaveAs"
                                        Margin="-5"
                                        hc:IconElement.Geometry="{StaticResource f.file-export}"
                                        Command="{x:Static local:MultiFileDisplay.FileSaveAsCommand}"
                                        CommandParameter="{Binding Current}"
                                        Style="{StaticResource ButtonIcon.Small}"
                                        ToolTip="另存为" />
                                </DockPanel>
                            </Grid>

                            <Popup
                                x:Name="pop"
                                PlacementTarget="{Binding ElementName=tbName}"
                                StaysOpen="True">
                                <Border Background="White">
                                    <ListBox ItemsSource="{Binding Files}" Style="{StaticResource ListBoxCustom}">
                                        <ListBox.ItemTemplate>
                                            <DataTemplate>
                                                <DockPanel>
                                                    <Button
                                                        Margin="-5"
                                                        hc:IconElement.Geometry="{StaticResource f.book-open-reader}"
                                                        Command="{x:Static local:MultiFileDisplay.ViewFileCommand}"
                                                        CommandParameter="{Binding}"
                                                        Foreground="Lime"
                                                        Style="{StaticResource ButtonIcon.Small}"
                                                        ToolTip="查看" />
                                                    <Button
                                                        Margin="-5"
                                                        hc:IconElement.Geometry="{StaticResource f.file-export}"
                                                        Command="{x:Static local:MultiFileDisplay.FileSaveAsCommand}"
                                                        CommandParameter="{Binding}"
                                                        Style="{StaticResource ButtonIcon.Small}"
                                                        ToolTip="另存为" />

                                                    <Button
                                                        Margin="-5"
                                                        hc:IconElement.Geometry="{StaticResource f.trash-can}"
                                                        Command="{x:Static local:MultiFileDisplay.FileDeleteCommand}"
                                                        CommandParameter="{Binding}"
                                                        Foreground="Red"
                                                        Style="{StaticResource ButtonIcon.Small}"
                                                        ToolTip="删除"
                                                        Visibility="{Binding IsReadOnly, RelativeSource={RelativeSource AncestorType=local:MultiFileDisplay}, Converter={StaticResource Boolean2VisibilityReConverter}}" />
                                                    <TextBlock
                                                        Margin="5,0"
                                                        Foreground="Gray"
                                                        Text="{Binding LastWriteTime, StringFormat=yyyy-MM-dd}" />

                                                    <TextBlock Text="{Binding Name}" />
                                                </DockPanel>
                                            </DataTemplate>
                                        </ListBox.ItemTemplate>
                                    </ListBox>
                                </Border>
                            </Popup>


                        </DockPanel>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="pop" Property="IsOpen" Value="True" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>



    <ControlTemplate x:Key="Tpl.Changeable.Element" TargetType="shared:ChangeableContainer">
        <DockPanel
            VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
            Background="Transparent"
            LastChildFill="True">

            <Grid>
                <TextBlock
                    VerticalAlignment="Center"
                    DockPanel.Dock="Left"
                    FontStyle="Italic"
                    Foreground="{DynamicResource LabelBrush}"
                    Text="{Binding Binding.Label, RelativeSource={RelativeSource TemplatedParent}}" />

                <TextBlock
                    Margin="0,-4,0,0"
                    HorizontalAlignment="Right"
                    FontSize="6"
                    Foreground="Purple"
                    Text="▼"
                    Visibility="{Binding Binding.IsInherited, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource Boolean2VisibilityConverter}}" />
            </Grid>

            <DockPanel HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}">
                <DockPanel>
                    <shared:ChangeableControlButtons DataContext="{Binding ., RelativeSource={RelativeSource Mode=TemplatedParent}}" DockPanel.Dock="Right" />

                    <ContentPresenter
                        Margin="4,0"
                        HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                        VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                        Content="{Binding Binding, RelativeSource={RelativeSource TemplatedParent}}"
                        ContentTemplate="{TemplateBinding ContentTemplate}" />
                </DockPanel>
            </DockPanel>
        </DockPanel>
    </ControlTemplate>


    <DataTemplate x:Key="DTpl.PortionElement">
        <DockPanel LastChildFill="False">
            <DockPanel Visibility="{Binding DataContext.IsReadOnly, RelativeSource={RelativeSource AncestorType=local:ElementsView}, Converter={StaticResource Boolean2VisibilityReConverter}}">
                <hc:SimplePanel Visibility="{Binding CanDivide, RelativeSource={RelativeSource AncestorType=local:PortionElementView}, Converter={StaticResource Boolean2VisibilityConverter}}">
                    <Button
                        hc:IconElement.Geometry="{StaticResource f.knife}"
                        Command="{Binding DataContext.DivideCommand, RelativeSource={RelativeSource AncestorType=ListBox}}"
                        Style="{StaticResource ButtonIcon.Small}"
                        Visibility="{Binding DataContext.UnifiedClass, RelativeSource={RelativeSource AncestorType=ListBox}, Converter={StaticResource Boolean2VisibilityConverter}}" />
                </hc:SimplePanel>
                <Button
                    hc:IconElement.Geometry="{StaticResource f.code-merge}"
                    Command="{Binding DataContext.UnifyCommand, RelativeSource={RelativeSource AncestorType=ListBox}}"
                    CommandParameter="{Binding .}"
                    Style="{StaticResource ButtonIcon.Small}"
                    ToolTip="以此为基准，合并要素"
                    Visibility="{Binding DataContext.UnifiedClass, RelativeSource={RelativeSource AncestorType=ListBox}, Converter={StaticResource Boolean2VisibilityReConverter}}" />
            </DockPanel>

            <shared:ChangeableContainer
                VerticalContentAlignment="Center"
                Binding="{Binding .}"
                ContentTemplate="{Binding ContentTemplate, RelativeSource={RelativeSource AncestorType=local:PortionElementView}}"
                EditTemplate="{Binding EditTemplate, RelativeSource={RelativeSource AncestorType=local:PortionElementView}}" />

        </DockPanel>
    </DataTemplate>
    <Style
        x:Key="Style.ListItem.PortionElement"
        BasedOn="{StaticResource ListBoxItemCustom}"
        TargetType="ListBoxItem">
        <Setter Property="VerticalAlignment" Value="Center" />
    </Style>


    <Style TargetType="{x:Type local:PortionElementView}">
        <Setter Property="EditTemplate" Value="{StaticResource Tpl.Changeable.Element}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type local:PortionElementView}">
                    <Border
                        Background="{TemplateBinding Background}"
                        BorderBrush="{TemplateBinding BorderBrush}"
                        BorderThickness="{TemplateBinding BorderThickness}">
                        <DockPanel DataContext="{TemplateBinding Content}">
                            <!--  header  -->
                            <ContentPresenter
                                VerticalAlignment="Center"
                                Content="{Binding Header, RelativeSource={RelativeSource Mode=TemplatedParent}}"
                                TextElement.Foreground="{DynamicResource LabelBrush}" />

                            <ListBox
                                x:Name="list"
                                Margin="5,0,0,0"
                                BorderThickness="0"
                                ItemContainerStyle="{StaticResource Style.ListItem.PortionElement}"
                                ItemTemplate="{StaticResource DTpl.PortionElement}"
                                ItemsSource="{Binding Data}"
                                Style="{StaticResource ListBoxCustom}" />
                        </DockPanel>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsReadOnly" Value="True">
                            <Setter TargetName="list" Property="ItemsPanel">
                                <Setter.Value>
                                    <ItemsPanelTemplate>
                                        <WrapPanel IsItemsHost="True" />
                                    </ItemsPanelTemplate>
                                </Setter.Value>
                            </Setter>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style
        x:Key="EditSwitch"
        BasedOn="{StaticResource ToggleButtonFlip}"
        TargetType="ToggleButton">
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="Content">
            <Setter.Value>
                <Viewbox Width="20" Height="18">
                    <Path Data="{StaticResource f.eye}" Fill="Black" />
                </Viewbox>
            </Setter.Value>
        </Setter>
        <Setter Property="hc:StatusSwitchElement.CheckedElement">
            <Setter.Value>
                <Viewbox Width="16" Height="16">
                    <Path Data="{StaticResource f.pen}" Fill="Green" />
                </Viewbox>
            </Setter.Value>
        </Setter>
    </Style>
    <Style
        x:Key="EditSwitch.Small"
        BasedOn="{StaticResource ToggleButtonFlip.Small}"
        TargetType="ToggleButton">
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="Content">
            <Setter.Value>
                <Viewbox Width="20" Height="18">
                    <Path Data="{StaticResource f.eye}" Fill="Black" />
                </Viewbox>
            </Setter.Value>
        </Setter>
        <Setter Property="hc:StatusSwitchElement.CheckedElement">
            <Setter.Value>
                <Viewbox Width="16" Height="16">
                    <Path Data="{StaticResource f.pen}" Fill="Green" />
                </Viewbox>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="ToggleEditable" TargetType="ToggleButton">
        <Setter Property="Width" Value="22" />
        <Setter Property="Height" Value="22" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="hc:IconElement.Geometry" Value="{StaticResource f.pen}" />
        <Setter Property="Content" Value="{StaticResource f.pen}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ToggleButton">
                    <hc:SimplePanel Margin="3" Background="Transparent">
                        <Viewbox Width="{Binding ActualWidth, RelativeSource={RelativeSource AncestorType=hc:SimplePanel}}" Height="{Binding ActualHeight, RelativeSource={RelativeSource AncestorType=hc:SimplePanel}}">
                            <Path
                                x:Name="path"
                                Data="{TemplateBinding Content}"
                                Fill="Green" />
                        </Viewbox>
                    </hc:SimplePanel>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked" Value="True">
                            <Setter Property="Content" Value="{StaticResource f.eye}" />
                            <Setter TargetName="path" Property="Fill" Value="Black" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>

    </Style>



    <Style x:Key="NoSelectDataGridRowStyle" TargetType="{x:Type DataGridRow}">
        <Style.Triggers>
            <Trigger Property="UIElement.IsMouseOver" Value="true">
                <Setter Property="Background" Value="{DynamicResource DarkDefaultBrush}" />
            </Trigger>

        </Style.Triggers>
        <Setter Property="Background" Value="White" />
        <Setter Property="Foreground" Value="Black" />
        <Setter Property="UIElement.SnapsToDevicePixels" Value="true" />
        <Setter Property="Margin" Value="0,0,0,4" />
        <Setter Property="Padding" Value="0,6" />
        <Setter Property="Validation.ErrorTemplate" Value="{x:Null}" />
        <Setter Property="DataGridRow.ValidationErrorTemplate">
            <Setter.Value>
                <ControlTemplate>
                    <TextBlock
                        Margin="2,0,0,0"
                        VerticalAlignment="Center"
                        Foreground="Red"
                        Text="!" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type DataGridRow}">
                    <SelectiveScrollingGrid>
                        <SelectiveScrollingGrid.ColumnDefinitions>
                            <ColumnDefinition Width="Auto" />
                            <ColumnDefinition Width="*" />
                        </SelectiveScrollingGrid.ColumnDefinitions>
                        <SelectiveScrollingGrid.RowDefinitions>
                            <RowDefinition Height="*" />
                            <RowDefinition Height="Auto" />
                        </SelectiveScrollingGrid.RowDefinitions>
                        <Border
                            Name="DGR_Border"
                            Grid.ColumnSpan="2"
                            Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            CornerRadius="4"
                            SnapsToDevicePixels="True" />
                        <DataGridCellsPresenter
                            Grid.Row="0"
                            Grid.Column="1"
                            MinHeight="{TemplateBinding MinHeight}"
                            VerticalContentAlignment="Center"
                            ItemsPanel="{TemplateBinding ItemsPanel}"
                            SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                        <DataGridDetailsPresenter
                            Grid.Row="1"
                            Grid.Column="1"
                            Visibility="{TemplateBinding DetailsVisibility}" />
                        <DataGridRowHeader
                            Grid.Row="0"
                            Grid.Column="0"
                            Margin="5,0,0,0"
                            Visibility="{Binding HeadersVisibility, ConverterParameter={x:Static DataGridHeadersVisibility.Row}, Converter={x:Static DataGrid.HeadersVisibilityConverter}, RelativeSource={RelativeSource AncestorType=DataGrid}}" />
                    </SelectiveScrollingGrid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="NoSelectDataGridCellStyle" TargetType="{x:Type DataGridCell}">
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="BorderBrush" Value="Transparent" />
        <Setter Property="Foreground" Value="Black" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="HorizontalContentAlignment" Value="Stretch" />
        <Setter Property="Padding" Value="0" />
        <Setter Property="hc:BorderElement.CornerRadius" Value="{StaticResource DefaultCornerRadius}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type DataGridCell}">
                    <Border Background="Transparent">
                        <Border
                            Margin="0,0,4,0"
                            Padding="{TemplateBinding Padding}"
                            Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            CornerRadius="{Binding Path=(hc:BorderElement.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}"
                            SnapsToDevicePixels="True">
                            <ContentPresenter
                                HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                        </Border>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>


    <Style
        x:Key="DataGrid.NoSelect"
        BasedOn="{StaticResource DataGrid.Small}"
        TargetType="{x:Type DataGrid}">
        <Setter Property="DataGrid.CellStyle" Value="{StaticResource NoSelectDataGridCellStyle}" />
        <Setter Property="DataGrid.RowStyle" Value="{StaticResource NoSelectDataGridRowStyle}" />
    </Style>



    <ControlTemplate x:Key="Tpl.ChangeableControl.Complex" TargetType="shared:ChangeableControl">
        <StackPanel VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Background="Transparent">
            <DockPanel
                Margin="4"
                HorizontalAlignment="Center"
                LastChildFill="False">
                <Grid>
                    <TextBlock
                        VerticalAlignment="Center"
                        DockPanel.Dock="Left"
                        Foreground="{DynamicResource LabelBrush}"
                        Text="{Binding Binding.Label, RelativeSource={RelativeSource TemplatedParent}}" />

                    <TextBlock
                        Margin="0,-4,0,0"
                        HorizontalAlignment="Right"
                        FontSize="6"
                        Foreground="Purple"
                        Text="▼"
                        Visibility="{Binding Binding.IsInherited, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource Boolean2VisibilityConverter}}" />
                </Grid>

                <shared:ChangeableControlButtons DataContext="{Binding ., RelativeSource={RelativeSource TemplatedParent}}" DockPanel.Dock="Right" />

            </DockPanel>


            <ContentPresenter
                x:Name="PART_Content"
                Margin="4,0"
                HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                Content="{Binding Binding, RelativeSource={RelativeSource TemplatedParent}}" />

        </StackPanel>
        <ControlTemplate.Triggers>
            <Trigger Property="IsReadOnly" Value="True">
                <Setter TargetName="PART_Content" Property="ContentTemplate" Value="{Binding ContentTemplate, RelativeSource={RelativeSource TemplatedParent}, Mode=OneTime}" />
            </Trigger>
            <Trigger Property="IsReadOnly" Value="False">
                <Setter TargetName="PART_Content" Property="ContentTemplate" Value="{Binding EditTemplate, RelativeSource={RelativeSource TemplatedParent}, Mode=OneTime}" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <Style
        x:Key="ListBoxItem.AllaysFocus"
        BasedOn="{StaticResource ListBoxItemBaseStyle}"
        TargetType="ListBoxItem">
        <Setter Property="Margin" Value="2,0" />
        <Style.Triggers>
            <Trigger Property="UIElement.IsMouseOver" Value="true">
                <Setter Property="Background" Value="{DynamicResource SecondaryRegionBrush}" />
            </Trigger>
            <Trigger Property="ListBoxItem.IsSelected" Value="true">
                <Setter Property="Background" Value="{DynamicResource PrimaryBrush}" />
                <Setter Property="Foreground" Value="{DynamicResource TextIconBrush}" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="false">
                <Setter Property="UIElement.Opacity" Value=".4" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style
        x:Key="ListBoxItem.AllaysFocus.Small"
        BasedOn="{StaticResource ListBoxItem.AllaysFocus}"
        TargetType="ListBoxItem">
        <Setter Property="Padding" Value="6,0" />
        <Setter Property="MinHeight" Value="24" />
    </Style>




 





    <Style TargetType="{x:Type local:ValidationItemView}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type local:ValidationItemView}">
                    <Border BorderBrush="Black" BorderThickness="0,0,0,1">
                        <DockPanel Margin="5,0,0,2" LastChildFill="False">
                            <ContentPresenter
                                VerticalAlignment="Center"
                                Content="{TemplateBinding Header}"
                                TextElement.FontSize="13" />

                            <ToggleButton
                                x:Name="show"
                                BorderThickness="0"
                                Style="{StaticResource ToggleButtonCustom}">
                                <Border
                                    Margin="4,0,0,0"
                                    VerticalAlignment="Center"
                                    Background="Red"
                                    CornerRadius="6">
                                    <TextBlock
                                        Margin="5,0"
                                        Foreground="White"
                                        Text="{Binding Count}" />
                                </Border>
                            </ToggleButton>
                            <Popup
                                AllowsTransparency="True"
                                IsOpen="{Binding ElementName=show, Path=IsChecked}"
                                PlacementRectangle="0,30,0,0"
                                PlacementTarget="{Binding RelativeSource={RelativeSource AncestorType=local:HomeValidationView}}"
                                StaysOpen="False">
                                <ContentPresenter Content="{Binding .}" ContentTemplate="{TemplateBinding TipTemplate}" />
                            </Popup>
                        </DockPanel>
                    </Border>
                    <ControlTemplate.Triggers>
                        <DataTrigger Binding="{Binding IsEmpty}" Value="True">
                            <Setter Property="Visibility" Value="Collapsed" />
                        </DataTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
</ResourceDictionary>
